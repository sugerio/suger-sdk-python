# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import List

from openapi_client.models.identity_contact import IdentityContact

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ContactApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_contact_to_buyer(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], buyer_id : Annotated[StrictStr, Field(..., description="Buyer ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], **kwargs) -> str:  # noqa: E501
        """add contact to buyer  # noqa: E501

        add contact to buyer by the given organization, buyer id and contact id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_contact_to_buyer(org_id, buyer_id, contact_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param buyer_id: Buyer ID (required)
        :type buyer_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_contact_to_buyer_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_contact_to_buyer_with_http_info(org_id, buyer_id, contact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def add_contact_to_buyer_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], buyer_id : Annotated[StrictStr, Field(..., description="Buyer ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """add contact to buyer  # noqa: E501

        add contact to buyer by the given organization, buyer id and contact id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_contact_to_buyer_with_http_info(org_id, buyer_id, contact_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param buyer_id: Buyer ID (required)
        :type buyer_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'buyer_id',
            'contact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_contact_to_buyer" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['buyer_id']:
            _path_params['buyerId'] = _params['buyer_id']

        if _params['contact_id']:
            _path_params['contactId'] = _params['contact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/contact/{contactId}/buyer/{buyerId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def add_contact_to_offer(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], offer_id : Annotated[StrictStr, Field(..., description="Offer ID")], **kwargs) -> str:  # noqa: E501
        """add contact to offer  # noqa: E501

        add contact to offer by the given organization, offer id and contact id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_contact_to_offer(org_id, contact_id, offer_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param offer_id: Offer ID (required)
        :type offer_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_contact_to_offer_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_contact_to_offer_with_http_info(org_id, contact_id, offer_id, **kwargs)  # noqa: E501

    @validate_arguments
    def add_contact_to_offer_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], offer_id : Annotated[StrictStr, Field(..., description="Offer ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """add contact to offer  # noqa: E501

        add contact to offer by the given organization, offer id and contact id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_contact_to_offer_with_http_info(org_id, contact_id, offer_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param offer_id: Offer ID (required)
        :type offer_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'contact_id',
            'offer_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_contact_to_offer" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['contact_id']:
            _path_params['contactId'] = _params['contact_id']

        if _params['offer_id']:
            _path_params['offerId'] = _params['offer_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/contact/{contactId}/offer/{offerId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_contact(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], data : Annotated[IdentityContact, Field(..., description="RequestBody")], **kwargs) -> IdentityContact:  # noqa: E501
        """create contact  # noqa: E501

        Create a contact under the given organization. If the email address already exists, return the existing contact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_contact(org_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param data: RequestBody (required)
        :type data: IdentityContact
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IdentityContact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_contact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_contact_with_http_info(org_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def create_contact_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], data : Annotated[IdentityContact, Field(..., description="RequestBody")], **kwargs) -> ApiResponse:  # noqa: E501
        """create contact  # noqa: E501

        Create a contact under the given organization. If the email address already exists, return the existing contact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_contact_with_http_info(org_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param data: RequestBody (required)
        :type data: IdentityContact
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IdentityContact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_contact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "IdentityContact",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/contact', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_contact(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], **kwargs) -> IdentityContact:  # noqa: E501
        """get contact  # noqa: E501

        Get the Contact by the given contact ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_contact(org_id, contact_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IdentityContact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_contact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_contact_with_http_info(org_id, contact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_contact_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """get contact  # noqa: E501

        Get the Contact by the given contact ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_contact_with_http_info(org_id, contact_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IdentityContact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'contact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['contact_id']:
            _path_params['contactId'] = _params['contact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "IdentityContact",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/contact/{contactId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_contacts_by_organization(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], **kwargs) -> List[IdentityContact]:  # noqa: E501
        """list contacts by organization  # noqa: E501

        List all contacts under the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_contacts_by_organization(org_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[IdentityContact]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_contacts_by_organization_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_contacts_by_organization_with_http_info(org_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_contacts_by_organization_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """list contacts by organization  # noqa: E501

        List all contacts under the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_contacts_by_organization_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[IdentityContact], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_contacts_by_organization" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[IdentityContact]",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/contact', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def remove_contact_from_buyer(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], buyer_id : Annotated[StrictStr, Field(..., description="Buyer ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], **kwargs) -> str:  # noqa: E501
        """remove contact from buyer  # noqa: E501

        remove contact from buyer by the given organization, buyer id and contact id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_contact_from_buyer(org_id, buyer_id, contact_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param buyer_id: Buyer ID (required)
        :type buyer_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the remove_contact_from_buyer_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.remove_contact_from_buyer_with_http_info(org_id, buyer_id, contact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def remove_contact_from_buyer_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], buyer_id : Annotated[StrictStr, Field(..., description="Buyer ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """remove contact from buyer  # noqa: E501

        remove contact from buyer by the given organization, buyer id and contact id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_contact_from_buyer_with_http_info(org_id, buyer_id, contact_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param buyer_id: Buyer ID (required)
        :type buyer_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'buyer_id',
            'contact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_contact_from_buyer" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['buyer_id']:
            _path_params['buyerId'] = _params['buyer_id']

        if _params['contact_id']:
            _path_params['contactId'] = _params['contact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/contact/{contactId}/buyer/{buyerId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def remove_contact_from_offer(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], offer_id : Annotated[StrictStr, Field(..., description="Offer ID")], **kwargs) -> str:  # noqa: E501
        """remove contact from offer  # noqa: E501

        remove contact from offer by the given organization, offer id and contact id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_contact_from_offer(org_id, contact_id, offer_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param offer_id: Offer ID (required)
        :type offer_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the remove_contact_from_offer_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.remove_contact_from_offer_with_http_info(org_id, contact_id, offer_id, **kwargs)  # noqa: E501

    @validate_arguments
    def remove_contact_from_offer_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], offer_id : Annotated[StrictStr, Field(..., description="Offer ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """remove contact from offer  # noqa: E501

        remove contact from offer by the given organization, offer id and contact id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_contact_from_offer_with_http_info(org_id, contact_id, offer_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param offer_id: Offer ID (required)
        :type offer_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'contact_id',
            'offer_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_contact_from_offer" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['contact_id']:
            _path_params['contactId'] = _params['contact_id']

        if _params['offer_id']:
            _path_params['offerId'] = _params['offer_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/contact/{contactId}/offer/{offerId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_contact(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], data : Annotated[IdentityContact, Field(..., description="Request Body")], **kwargs) -> IdentityContact:  # noqa: E501
        """update contact  # noqa: E501

        update contact by the given organization and buyer id. The given name and information should be complete. Please note that this function does not support partial updates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_contact(org_id, contact_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param data: Request Body (required)
        :type data: IdentityContact
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IdentityContact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_contact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_contact_with_http_info(org_id, contact_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def update_contact_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], contact_id : Annotated[StrictStr, Field(..., description="Contact ID")], data : Annotated[IdentityContact, Field(..., description="Request Body")], **kwargs) -> ApiResponse:  # noqa: E501
        """update contact  # noqa: E501

        update contact by the given organization and buyer id. The given name and information should be complete. Please note that this function does not support partial updates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_contact_with_http_info(org_id, contact_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param contact_id: Contact ID (required)
        :type contact_id: str
        :param data: Request Body (required)
        :type data: IdentityContact
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IdentityContact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'contact_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_contact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['contact_id']:
            _path_params['contactId'] = _params['contact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "IdentityContact",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/contact/{contactId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
