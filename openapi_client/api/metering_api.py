# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr, conlist

from typing import List, Optional

from openapi_client.models.create_usage_record_group_params import CreateUsageRecordGroupParams
from openapi_client.models.list_usage_record_groups_response import ListUsageRecordGroupsResponse
from openapi_client.models.list_usage_record_reports_response import ListUsageRecordReportsResponse
from openapi_client.models.metering_usage_record_group import MeteringUsageRecordGroup
from openapi_client.models.metering_usage_record_report import MeteringUsageRecordReport
from openapi_client.models.new_usage_record_group import NewUsageRecordGroup
from openapi_client.models.usage_metering_config_info import UsageMeteringConfigInfo

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MeteringApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def batch_report_usage_record_groups(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], usage_record_groups : Annotated[conlist(NewUsageRecordGroup), Field(..., description="Array of new usage record groups to report")], **kwargs) -> List[MeteringUsageRecordGroup]:  # noqa: E501
        """batch report usageRecordGroups  # noqa: E501

        Batch report new usage record groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_report_usage_record_groups(org_id, usage_record_groups, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param usage_record_groups: Array of new usage record groups to report (required)
        :type usage_record_groups: List[NewUsageRecordGroup]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[MeteringUsageRecordGroup]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the batch_report_usage_record_groups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.batch_report_usage_record_groups_with_http_info(org_id, usage_record_groups, **kwargs)  # noqa: E501

    @validate_arguments
    def batch_report_usage_record_groups_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], usage_record_groups : Annotated[conlist(NewUsageRecordGroup), Field(..., description="Array of new usage record groups to report")], **kwargs) -> ApiResponse:  # noqa: E501
        """batch report usageRecordGroups  # noqa: E501

        Batch report new usage record groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_report_usage_record_groups_with_http_info(org_id, usage_record_groups, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param usage_record_groups: Array of new usage record groups to report (required)
        :type usage_record_groups: List[NewUsageRecordGroup]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[MeteringUsageRecordGroup], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'usage_record_groups'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_report_usage_record_groups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['usage_record_groups'] is not None:
            _body_params = _params['usage_record_groups']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[MeteringUsageRecordGroup]",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/batchCreateUsageRecordGroups', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def batch_validate_usage_record_groups(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], data : Annotated[conlist(NewUsageRecordGroup), Field(..., description="Array of usage record groups to be validated")], **kwargs) -> str:  # noqa: E501
        """batch validate usageRecordGroups  # noqa: E501

        Provide a batch of usage record groups and validate each individual usage record group one by one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_validate_usage_record_groups(org_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param data: Array of usage record groups to be validated (required)
        :type data: List[NewUsageRecordGroup]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the batch_validate_usage_record_groups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.batch_validate_usage_record_groups_with_http_info(org_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def batch_validate_usage_record_groups_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], data : Annotated[conlist(NewUsageRecordGroup), Field(..., description="Array of usage record groups to be validated")], **kwargs) -> ApiResponse:  # noqa: E501
        """batch validate usageRecordGroups  # noqa: E501

        Provide a batch of usage record groups and validate each individual usage record group one by one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_validate_usage_record_groups_with_http_info(org_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param data: Array of usage record groups to be validated (required)
        :type data: List[NewUsageRecordGroup]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_validate_usage_record_groups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/batchValidateUsageRecordGroups', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_usage_record_group(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], usage_record_group_id : Annotated[StrictStr, Field(..., description="UsageRecordGroup ID")], **kwargs) -> MeteringUsageRecordGroup:  # noqa: E501
        """delete usageRecordGroup  # noqa: E501

        delete the UsageRecordGroup for the given organization and usageRecordGroup ID. Only usageRecordGroup with status \"CREATED\" or \"INVALID\" can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_usage_record_group(org_id, usage_record_group_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param usage_record_group_id: UsageRecordGroup ID (required)
        :type usage_record_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUsageRecordGroup
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_usage_record_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_usage_record_group_with_http_info(org_id, usage_record_group_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_usage_record_group_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], usage_record_group_id : Annotated[StrictStr, Field(..., description="UsageRecordGroup ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """delete usageRecordGroup  # noqa: E501

        delete the UsageRecordGroup for the given organization and usageRecordGroup ID. Only usageRecordGroup with status \"CREATED\" or \"INVALID\" can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_usage_record_group_with_http_info(org_id, usage_record_group_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param usage_record_group_id: UsageRecordGroup ID (required)
        :type usage_record_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUsageRecordGroup, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'usage_record_group_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_usage_record_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['usage_record_group_id']:
            _path_params['usageRecordGroupId'] = _params['usage_record_group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUsageRecordGroup",
            '400': "str",
            '404': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/usageRecordGroup/{usageRecordGroupId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_usage_metering_config_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], **kwargs) -> UsageMeteringConfigInfo:  # noqa: E501
        """get usage metering config info  # noqa: E501

        Get the usage metering config info of the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_usage_metering_config_info(org_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsageMeteringConfigInfo
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_usage_metering_config_info_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_usage_metering_config_info_with_http_info(org_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_usage_metering_config_info_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """get usage metering config info  # noqa: E501

        Get the usage metering config info of the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_usage_metering_config_info_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsageMeteringConfigInfo, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_usage_metering_config_info" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "UsageMeteringConfigInfo",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/usageMeteringConfigInfo', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_usage_record_group(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], usage_record_group_id : Annotated[StrictStr, Field(..., description="UsageRecordGroup ID")], **kwargs) -> MeteringUsageRecordGroup:  # noqa: E501
        """get usageRecordGroup  # noqa: E501

        get UsageRecordGroup for the given organization and usageRecordGroup ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_usage_record_group(org_id, usage_record_group_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param usage_record_group_id: UsageRecordGroup ID (required)
        :type usage_record_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUsageRecordGroup
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_usage_record_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_usage_record_group_with_http_info(org_id, usage_record_group_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_usage_record_group_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], usage_record_group_id : Annotated[StrictStr, Field(..., description="UsageRecordGroup ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """get usageRecordGroup  # noqa: E501

        get UsageRecordGroup for the given organization and usageRecordGroup ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_usage_record_group_with_http_info(org_id, usage_record_group_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param usage_record_group_id: UsageRecordGroup ID (required)
        :type usage_record_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUsageRecordGroup, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'usage_record_group_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_usage_record_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['usage_record_group_id']:
            _path_params['usageRecordGroupId'] = _params['usage_record_group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUsageRecordGroup",
            '400': "str",
            '404': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/usageRecordGroup/{usageRecordGroupId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_usage_record_report(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], usage_record_report_id : Annotated[StrictStr, Field(..., description="UsageRecordReport ID")], **kwargs) -> MeteringUsageRecordReport:  # noqa: E501
        """get usageRecordReport  # noqa: E501

        get the usageRecordReport for a given organization and usageRecordReport ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_usage_record_report(org_id, usage_record_report_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param usage_record_report_id: UsageRecordReport ID (required)
        :type usage_record_report_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUsageRecordReport
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_usage_record_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_usage_record_report_with_http_info(org_id, usage_record_report_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_usage_record_report_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], usage_record_report_id : Annotated[StrictStr, Field(..., description="UsageRecordReport ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """get usageRecordReport  # noqa: E501

        get the usageRecordReport for a given organization and usageRecordReport ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_usage_record_report_with_http_info(org_id, usage_record_report_id, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param usage_record_report_id: UsageRecordReport ID (required)
        :type usage_record_report_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUsageRecordReport, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'usage_record_report_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_usage_record_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['usage_record_report_id']:
            _path_params['usageRecordReportId'] = _params['usage_record_report_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUsageRecordReport",
            '400': "str",
            '404': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/usageRecordReport/{usageRecordReportId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_usage_record_groups(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], partner : Annotated[Optional[StrictStr], Field(description="Cloud Partner")] = None, product_id : Annotated[Optional[StrictStr], Field(description="product ID")] = None, entitlement_id : Annotated[Optional[StrictStr], Field(description="entitlement ID")] = None, buyer_id : Annotated[Optional[StrictStr], Field(description="buyer ID")] = None, start_date : Annotated[Optional[StrictStr], Field(description="start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate")] = None, end_date : Annotated[Optional[StrictStr], Field(description="end date (UTC) in YYYY-MM-DD format, default is today")] = None, limit : Annotated[Optional[StrictInt], Field(description="List pagination size, default 20, max value is 1000")] = None, offset : Annotated[Optional[StrictInt], Field(description="List pagination offset, default 0")] = None, **kwargs) -> ListUsageRecordGroupsResponse:  # noqa: E501
        """list usageRecordGroups  # noqa: E501

        List UsageRecordGroups by the given organization, partner, product, entitlement or buyer. Only provide one or none of the optional query parameters: partner, productId, entitlementId & buyerId .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_usage_record_groups(org_id, partner, product_id, entitlement_id, buyer_id, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param partner: Cloud Partner
        :type partner: str
        :param product_id: product ID
        :type product_id: str
        :param entitlement_id: entitlement ID
        :type entitlement_id: str
        :param buyer_id: buyer ID
        :type buyer_id: str
        :param start_date: start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
        :type start_date: str
        :param end_date: end date (UTC) in YYYY-MM-DD format, default is today
        :type end_date: str
        :param limit: List pagination size, default 20, max value is 1000
        :type limit: int
        :param offset: List pagination offset, default 0
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListUsageRecordGroupsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_usage_record_groups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_usage_record_groups_with_http_info(org_id, partner, product_id, entitlement_id, buyer_id, start_date, end_date, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def list_usage_record_groups_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], partner : Annotated[Optional[StrictStr], Field(description="Cloud Partner")] = None, product_id : Annotated[Optional[StrictStr], Field(description="product ID")] = None, entitlement_id : Annotated[Optional[StrictStr], Field(description="entitlement ID")] = None, buyer_id : Annotated[Optional[StrictStr], Field(description="buyer ID")] = None, start_date : Annotated[Optional[StrictStr], Field(description="start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate")] = None, end_date : Annotated[Optional[StrictStr], Field(description="end date (UTC) in YYYY-MM-DD format, default is today")] = None, limit : Annotated[Optional[StrictInt], Field(description="List pagination size, default 20, max value is 1000")] = None, offset : Annotated[Optional[StrictInt], Field(description="List pagination offset, default 0")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list usageRecordGroups  # noqa: E501

        List UsageRecordGroups by the given organization, partner, product, entitlement or buyer. Only provide one or none of the optional query parameters: partner, productId, entitlementId & buyerId .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_usage_record_groups_with_http_info(org_id, partner, product_id, entitlement_id, buyer_id, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param partner: Cloud Partner
        :type partner: str
        :param product_id: product ID
        :type product_id: str
        :param entitlement_id: entitlement ID
        :type entitlement_id: str
        :param buyer_id: buyer ID
        :type buyer_id: str
        :param start_date: start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
        :type start_date: str
        :param end_date: end date (UTC) in YYYY-MM-DD format, default is today
        :type end_date: str
        :param limit: List pagination size, default 20, max value is 1000
        :type limit: int
        :param offset: List pagination offset, default 0
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListUsageRecordGroupsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'partner',
            'product_id',
            'entitlement_id',
            'buyer_id',
            'start_date',
            'end_date',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_usage_record_groups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        if _params.get('partner') is not None:  # noqa: E501
            _query_params.append(('partner', _params['partner']))

        if _params.get('product_id') is not None:  # noqa: E501
            _query_params.append(('productId', _params['product_id']))

        if _params.get('entitlement_id') is not None:  # noqa: E501
            _query_params.append(('entitlementId', _params['entitlement_id']))

        if _params.get('buyer_id') is not None:  # noqa: E501
            _query_params.append(('buyerId', _params['buyer_id']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListUsageRecordGroupsResponse",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/usageRecordGroup', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_usage_record_groups_by_entitlement(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], entitlement_id : Annotated[StrictStr, Field(..., description="entitlement ID")], start_date : Annotated[Optional[StrictStr], Field(description="start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate")] = None, end_date : Annotated[Optional[StrictStr], Field(description="end date (UTC) in YYYY-MM-DD format, default is today")] = None, limit : Annotated[Optional[StrictInt], Field(description="List pagination size, default 20, max value is 1000")] = None, offset : Annotated[Optional[StrictInt], Field(description="List pagination offset, default 0")] = None, **kwargs) -> ListUsageRecordGroupsResponse:  # noqa: E501
        """list usageRecordGroups by entitlement  # noqa: E501

        List UsageRecordGroups by the given organization and entitlement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_usage_record_groups_by_entitlement(org_id, entitlement_id, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param entitlement_id: entitlement ID (required)
        :type entitlement_id: str
        :param start_date: start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
        :type start_date: str
        :param end_date: end date (UTC) in YYYY-MM-DD format, default is today
        :type end_date: str
        :param limit: List pagination size, default 20, max value is 1000
        :type limit: int
        :param offset: List pagination offset, default 0
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListUsageRecordGroupsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_usage_record_groups_by_entitlement_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_usage_record_groups_by_entitlement_with_http_info(org_id, entitlement_id, start_date, end_date, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def list_usage_record_groups_by_entitlement_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], entitlement_id : Annotated[StrictStr, Field(..., description="entitlement ID")], start_date : Annotated[Optional[StrictStr], Field(description="start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate")] = None, end_date : Annotated[Optional[StrictStr], Field(description="end date (UTC) in YYYY-MM-DD format, default is today")] = None, limit : Annotated[Optional[StrictInt], Field(description="List pagination size, default 20, max value is 1000")] = None, offset : Annotated[Optional[StrictInt], Field(description="List pagination offset, default 0")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list usageRecordGroups by entitlement  # noqa: E501

        List UsageRecordGroups by the given organization and entitlement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_usage_record_groups_by_entitlement_with_http_info(org_id, entitlement_id, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param entitlement_id: entitlement ID (required)
        :type entitlement_id: str
        :param start_date: start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
        :type start_date: str
        :param end_date: end date (UTC) in YYYY-MM-DD format, default is today
        :type end_date: str
        :param limit: List pagination size, default 20, max value is 1000
        :type limit: int
        :param offset: List pagination offset, default 0
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListUsageRecordGroupsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'entitlement_id',
            'start_date',
            'end_date',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_usage_record_groups_by_entitlement" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['entitlement_id']:
            _path_params['entitlementId'] = _params['entitlement_id']


        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListUsageRecordGroupsResponse",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_usage_record_groups_by_product(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], product_id : Annotated[StrictStr, Field(..., description="product ID")], start_date : Annotated[Optional[StrictStr], Field(description="start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate")] = None, end_date : Annotated[Optional[StrictStr], Field(description="end date (UTC) in YYYY-MM-DD format, default is today")] = None, limit : Annotated[Optional[StrictInt], Field(description="List pagination size, default 20, max value is 1000")] = None, offset : Annotated[Optional[StrictInt], Field(description="List pagination offset, default 0")] = None, **kwargs) -> ListUsageRecordGroupsResponse:  # noqa: E501
        """list usageRecordGroups by product  # noqa: E501

        List UsageRecordGroups by the given organization and product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_usage_record_groups_by_product(org_id, product_id, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param product_id: product ID (required)
        :type product_id: str
        :param start_date: start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
        :type start_date: str
        :param end_date: end date (UTC) in YYYY-MM-DD format, default is today
        :type end_date: str
        :param limit: List pagination size, default 20, max value is 1000
        :type limit: int
        :param offset: List pagination offset, default 0
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListUsageRecordGroupsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_usage_record_groups_by_product_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_usage_record_groups_by_product_with_http_info(org_id, product_id, start_date, end_date, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def list_usage_record_groups_by_product_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], product_id : Annotated[StrictStr, Field(..., description="product ID")], start_date : Annotated[Optional[StrictStr], Field(description="start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate")] = None, end_date : Annotated[Optional[StrictStr], Field(description="end date (UTC) in YYYY-MM-DD format, default is today")] = None, limit : Annotated[Optional[StrictInt], Field(description="List pagination size, default 20, max value is 1000")] = None, offset : Annotated[Optional[StrictInt], Field(description="List pagination offset, default 0")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list usageRecordGroups by product  # noqa: E501

        List UsageRecordGroups by the given organization and product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_usage_record_groups_by_product_with_http_info(org_id, product_id, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param product_id: product ID (required)
        :type product_id: str
        :param start_date: start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
        :type start_date: str
        :param end_date: end date (UTC) in YYYY-MM-DD format, default is today
        :type end_date: str
        :param limit: List pagination size, default 20, max value is 1000
        :type limit: int
        :param offset: List pagination offset, default 0
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListUsageRecordGroupsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'product_id',
            'start_date',
            'end_date',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_usage_record_groups_by_product" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['product_id']:
            _path_params['productId'] = _params['product_id']


        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListUsageRecordGroupsResponse",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/product/{productId}/usageRecordGroup', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_usage_record_reports(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], partner : Annotated[Optional[StrictStr], Field(description="Cloud Partner")] = None, product_id : Annotated[Optional[StrictStr], Field(description="product ID")] = None, entitlement_id : Annotated[Optional[StrictStr], Field(description="entitlement ID")] = None, buyer_id : Annotated[Optional[StrictStr], Field(description="buyer ID")] = None, start_date : Annotated[Optional[StrictStr], Field(description="start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate")] = None, end_date : Annotated[Optional[StrictStr], Field(description="end date (UTC) in YYYY-MM-DD format, default is today")] = None, limit : Annotated[Optional[StrictInt], Field(description="List pagination size, default 20, max value is 1000")] = None, offset : Annotated[Optional[StrictInt], Field(description="List pagination offset, default 0")] = None, **kwargs) -> ListUsageRecordReportsResponse:  # noqa: E501
        """list usageRecordReports  # noqa: E501

        List usageRecordReports under the given organization, partner, product, entitlement or buyer. Only provide one or none of the following parameters: partner, product, entitlement or buyer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_usage_record_reports(org_id, partner, product_id, entitlement_id, buyer_id, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param partner: Cloud Partner
        :type partner: str
        :param product_id: product ID
        :type product_id: str
        :param entitlement_id: entitlement ID
        :type entitlement_id: str
        :param buyer_id: buyer ID
        :type buyer_id: str
        :param start_date: start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
        :type start_date: str
        :param end_date: end date (UTC) in YYYY-MM-DD format, default is today
        :type end_date: str
        :param limit: List pagination size, default 20, max value is 1000
        :type limit: int
        :param offset: List pagination offset, default 0
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListUsageRecordReportsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_usage_record_reports_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_usage_record_reports_with_http_info(org_id, partner, product_id, entitlement_id, buyer_id, start_date, end_date, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def list_usage_record_reports_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], partner : Annotated[Optional[StrictStr], Field(description="Cloud Partner")] = None, product_id : Annotated[Optional[StrictStr], Field(description="product ID")] = None, entitlement_id : Annotated[Optional[StrictStr], Field(description="entitlement ID")] = None, buyer_id : Annotated[Optional[StrictStr], Field(description="buyer ID")] = None, start_date : Annotated[Optional[StrictStr], Field(description="start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate")] = None, end_date : Annotated[Optional[StrictStr], Field(description="end date (UTC) in YYYY-MM-DD format, default is today")] = None, limit : Annotated[Optional[StrictInt], Field(description="List pagination size, default 20, max value is 1000")] = None, offset : Annotated[Optional[StrictInt], Field(description="List pagination offset, default 0")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list usageRecordReports  # noqa: E501

        List usageRecordReports under the given organization, partner, product, entitlement or buyer. Only provide one or none of the following parameters: partner, product, entitlement or buyer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_usage_record_reports_with_http_info(org_id, partner, product_id, entitlement_id, buyer_id, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param partner: Cloud Partner
        :type partner: str
        :param product_id: product ID
        :type product_id: str
        :param entitlement_id: entitlement ID
        :type entitlement_id: str
        :param buyer_id: buyer ID
        :type buyer_id: str
        :param start_date: start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate
        :type start_date: str
        :param end_date: end date (UTC) in YYYY-MM-DD format, default is today
        :type end_date: str
        :param limit: List pagination size, default 20, max value is 1000
        :type limit: int
        :param offset: List pagination offset, default 0
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListUsageRecordReportsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'partner',
            'product_id',
            'entitlement_id',
            'buyer_id',
            'start_date',
            'end_date',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_usage_record_reports" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        if _params.get('partner') is not None:  # noqa: E501
            _query_params.append(('partner', _params['partner']))

        if _params.get('product_id') is not None:  # noqa: E501
            _query_params.append(('productId', _params['product_id']))

        if _params.get('entitlement_id') is not None:  # noqa: E501
            _query_params.append(('entitlementId', _params['entitlement_id']))

        if _params.get('buyer_id') is not None:  # noqa: E501
            _query_params.append(('buyerId', _params['buyer_id']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListUsageRecordReportsResponse",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/usageRecordReport', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def report_usage_record_group(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], entitlement_id : Annotated[StrictStr, Field(..., description="Entitlement ID")], data : Annotated[CreateUsageRecordGroupParams, Field(..., description="RequestBody")], **kwargs) -> MeteringUsageRecordGroup:  # noqa: E501
        """report usageRecordGroup  # noqa: E501

        It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_usage_record_group(org_id, entitlement_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param entitlement_id: Entitlement ID (required)
        :type entitlement_id: str
        :param data: RequestBody (required)
        :type data: CreateUsageRecordGroupParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUsageRecordGroup
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the report_usage_record_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.report_usage_record_group_with_http_info(org_id, entitlement_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def report_usage_record_group_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], entitlement_id : Annotated[StrictStr, Field(..., description="Entitlement ID")], data : Annotated[CreateUsageRecordGroupParams, Field(..., description="RequestBody")], **kwargs) -> ApiResponse:  # noqa: E501
        """report usageRecordGroup  # noqa: E501

        It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_usage_record_group_with_http_info(org_id, entitlement_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param entitlement_id: Entitlement ID (required)
        :type entitlement_id: str
        :param data: RequestBody (required)
        :type data: CreateUsageRecordGroupParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUsageRecordGroup, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'entitlement_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_usage_record_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        if _params['entitlement_id']:
            _path_params['entitlementId'] = _params['entitlement_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUsageRecordGroup",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_usage_metering_config_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], data : Annotated[UsageMeteringConfigInfo, Field(..., description="The usage metering config info to be updated")], **kwargs) -> UsageMeteringConfigInfo:  # noqa: E501
        """update usage metering config info  # noqa: E501

        Update the usage metering config info of the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_usage_metering_config_info(org_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param data: The usage metering config info to be updated (required)
        :type data: UsageMeteringConfigInfo
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsageMeteringConfigInfo
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_usage_metering_config_info_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_usage_metering_config_info_with_http_info(org_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def update_usage_metering_config_info_with_http_info(self, org_id : Annotated[StrictStr, Field(..., description="Organization ID")], data : Annotated[UsageMeteringConfigInfo, Field(..., description="The usage metering config info to be updated")], **kwargs) -> ApiResponse:  # noqa: E501
        """update usage metering config info  # noqa: E501

        Update the usage metering config info of the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_usage_metering_config_info_with_http_info(org_id, data, async_req=True)
        >>> result = thread.get()

        :param org_id: Organization ID (required)
        :type org_id: str
        :param data: The usage metering config info to be updated (required)
        :type data: UsageMeteringConfigInfo
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsageMeteringConfigInfo, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_usage_metering_config_info" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerTokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "UsageMeteringConfigInfo",
            '400': "str",
            '500': "str",
        }

        return self.api_client.call_api(
            '/org/{orgId}/usageMeteringConfigInfo', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
