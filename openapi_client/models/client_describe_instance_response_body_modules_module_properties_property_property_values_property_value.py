# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ClientDescribeInstanceResponseBodyModulesModulePropertiesPropertyPropertyValuesPropertyValue(BaseModel):
    """
    ClientDescribeInstanceResponseBodyModulesModulePropertiesPropertyPropertyValuesPropertyValue
    """
    display_name: Optional[StrictStr] = Field(None, alias="DisplayName")
    max: Optional[StrictStr] = Field(None, alias="Max")
    min: Optional[StrictStr] = Field(None, alias="Min")
    remark: Optional[StrictStr] = Field(None, alias="Remark")
    step: Optional[StrictStr] = Field(None, alias="Step")
    type: Optional[StrictStr] = Field(None, alias="Type")
    value: Optional[StrictStr] = Field(None, alias="Value")
    __properties = ["DisplayName", "Max", "Min", "Remark", "Step", "Type", "Value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientDescribeInstanceResponseBodyModulesModulePropertiesPropertyPropertyValuesPropertyValue:
        """Create an instance of ClientDescribeInstanceResponseBodyModulesModulePropertiesPropertyPropertyValuesPropertyValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientDescribeInstanceResponseBodyModulesModulePropertiesPropertyPropertyValuesPropertyValue:
        """Create an instance of ClientDescribeInstanceResponseBodyModulesModulePropertiesPropertyPropertyValuesPropertyValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientDescribeInstanceResponseBodyModulesModulePropertiesPropertyPropertyValuesPropertyValue.parse_obj(obj)

        _obj = ClientDescribeInstanceResponseBodyModulesModulePropertiesPropertyPropertyValuesPropertyValue.parse_obj({
            "display_name": obj.get("DisplayName"),
            "max": obj.get("Max"),
            "min": obj.get("Min"),
            "remark": obj.get("Remark"),
            "step": obj.get("Step"),
            "type": obj.get("Type"),
            "value": obj.get("Value")
        })
        return _obj


