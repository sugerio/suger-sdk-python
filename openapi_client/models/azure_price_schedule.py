# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.azure_price import AzurePrice
from openapi_client.models.azure_price_cadence import AzurePriceCadence
from openapi_client.models.azure_pricing_unit import AzurePricingUnit


class AzurePriceSchedule(BaseModel):
    """
    AzurePriceSchedule
    """

    price_cadence: Optional[AzurePriceCadence] = Field(None, alias="priceCadence")
    pricing_model: Optional[StrictStr] = Field(None, alias="pricingModel")
    pricing_units: Optional[conlist(AzurePricingUnit)] = Field(
        None, alias="pricingUnits"
    )
    retail_price: Optional[AzurePrice] = Field(None, alias="retailPrice")
    __properties = ["priceCadence", "pricingModel", "pricingUnits", "retailPrice"]

    @validator("pricing_model")
    def pricing_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Flat", "Recurring", "Usage"):
            raise ValueError(
                "must be one of enum values ('Flat', 'Recurring', 'Usage')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzurePriceSchedule:
        """Create an instance of AzurePriceSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price_cadence
        if self.price_cadence:
            _dict["priceCadence"] = self.price_cadence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pricing_units (list)
        _items = []
        if self.pricing_units:
            for _item in self.pricing_units:
                if _item:
                    _items.append(_item.to_dict())
            _dict["pricingUnits"] = _items
        # override the default output from pydantic by calling `to_dict()` of retail_price
        if self.retail_price:
            _dict["retailPrice"] = self.retail_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzurePriceSchedule:
        """Create an instance of AzurePriceSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzurePriceSchedule.parse_obj(obj)

        _obj = AzurePriceSchedule.parse_obj(
            {
                "price_cadence": AzurePriceCadence.from_dict(obj.get("priceCadence"))
                if obj.get("priceCadence") is not None
                else None,
                "pricing_model": obj.get("pricingModel"),
                "pricing_units": [
                    AzurePricingUnit.from_dict(_item)
                    for _item in obj.get("pricingUnits")
                ]
                if obj.get("pricingUnits") is not None
                else None,
                "retail_price": AzurePrice.from_dict(obj.get("retailPrice"))
                if obj.get("retailPrice") is not None
                else None,
            }
        )
        return _obj
