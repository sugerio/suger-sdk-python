# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ServicecontrolStatus(BaseModel):
    """
    ServicecontrolStatus
    """
    code: Optional[StrictInt] = Field(None, description="Code: The status code, which should be an enum value of google.rpc.Code.")
    details: Optional[conlist(conlist(StrictInt))] = Field(None, description="Details: A list of messages that carry the error details. There is a common set of message types for APIs to use.")
    message: Optional[StrictStr] = Field(None, description="Message: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.")
    __properties = ["code", "details", "message"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServicecontrolStatus:
        """Create an instance of ServicecontrolStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServicecontrolStatus:
        """Create an instance of ServicecontrolStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServicecontrolStatus.parse_obj(obj)

        _obj = ServicecontrolStatus.parse_obj({
            "code": obj.get("code"),
            "details": obj.get("details"),
            "message": obj.get("message")
        })
        return _obj


