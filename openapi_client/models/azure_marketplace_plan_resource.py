# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.azure_marketplace_plan import AzureMarketplacePlan
from openapi_client.models.azure_marketplace_plan_listing import (
    AzureMarketplacePlanListing,
)
from openapi_client.models.azure_marketplace_price_and_availability_plan import (
    AzureMarketplacePriceAndAvailabilityPlan,
)


class AzureMarketplacePlanResource(BaseModel):
    """
    AzureMarketplacePlanResource
    """

    plan: Optional[AzureMarketplacePlan] = None
    plan_listing: Optional[AzureMarketplacePlanListing] = Field(
        None, alias="planListing"
    )
    price_and_availability_plan: Optional[
        AzureMarketplacePriceAndAvailabilityPlan
    ] = Field(None, alias="priceAndAvailabilityPlan")
    __properties = ["plan", "planListing", "priceAndAvailabilityPlan"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketplacePlanResource:
        """Create an instance of AzureMarketplacePlanResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict["plan"] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_listing
        if self.plan_listing:
            _dict["planListing"] = self.plan_listing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_and_availability_plan
        if self.price_and_availability_plan:
            _dict[
                "priceAndAvailabilityPlan"
            ] = self.price_and_availability_plan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketplacePlanResource:
        """Create an instance of AzureMarketplacePlanResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketplacePlanResource.parse_obj(obj)

        _obj = AzureMarketplacePlanResource.parse_obj(
            {
                "plan": AzureMarketplacePlan.from_dict(obj.get("plan"))
                if obj.get("plan") is not None
                else None,
                "plan_listing": AzureMarketplacePlanListing.from_dict(
                    obj.get("planListing")
                )
                if obj.get("planListing") is not None
                else None,
                "price_and_availability_plan": AzureMarketplacePriceAndAvailabilityPlan.from_dict(
                    obj.get("priceAndAvailabilityPlan")
                )
                if obj.get("priceAndAvailabilityPlan") is not None
                else None,
            }
        )
        return _obj
