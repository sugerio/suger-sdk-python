# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.gcp_marketplace_price_model import GcpMarketplacePriceModel
from openapi_client.models.gcp_marketplace_product_subscription_plan import (
    GcpMarketplaceProductSubscriptionPlan,
)
from openapi_client.models.gcp_marketplace_product_usage_fee import (
    GcpMarketplaceProductUsageFee,
)


class GcpMarketplaceProductPriceInfo(BaseModel):
    """
    GcpMarketplaceProductPriceInfo
    """

    description: Optional[StrictStr] = None
    price_model: Optional[GcpMarketplacePriceModel] = Field(None, alias="priceModel")
    subscription_plans: Optional[
        conlist(GcpMarketplaceProductSubscriptionPlan)
    ] = Field(
        None,
        alias="subscriptionPlans",
        description="Subscription Plan (Flat Commitment)",
    )
    usage_fees: Optional[conlist(GcpMarketplaceProductUsageFee)] = Field(
        None,
        alias="usageFees",
        description="Usage Metering Dimension/Metric if available",
    )
    __properties = ["description", "priceModel", "subscriptionPlans", "usageFees"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplaceProductPriceInfo:
        """Create an instance of GcpMarketplaceProductPriceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_plans (list)
        _items = []
        if self.subscription_plans:
            for _item in self.subscription_plans:
                if _item:
                    _items.append(_item.to_dict())
            _dict["subscriptionPlans"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in usage_fees (list)
        _items = []
        if self.usage_fees:
            for _item in self.usage_fees:
                if _item:
                    _items.append(_item.to_dict())
            _dict["usageFees"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplaceProductPriceInfo:
        """Create an instance of GcpMarketplaceProductPriceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplaceProductPriceInfo.parse_obj(obj)

        _obj = GcpMarketplaceProductPriceInfo.parse_obj(
            {
                "description": obj.get("description"),
                "price_model": obj.get("priceModel"),
                "subscription_plans": [
                    GcpMarketplaceProductSubscriptionPlan.from_dict(_item)
                    for _item in obj.get("subscriptionPlans")
                ]
                if obj.get("subscriptionPlans") is not None
                else None,
                "usage_fees": [
                    GcpMarketplaceProductUsageFee.from_dict(_item)
                    for _item in obj.get("usageFees")
                ]
                if obj.get("usageFees") is not None
                else None,
            }
        )
        return _obj
