# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.gcp_marketplace_product_feature_value import GcpMarketplaceProductFeatureValue
from openapi_client.models.gcp_marketplace_product_price_info import GcpMarketplaceProductPriceInfo

class GcpMarketplaceProductPurchaseOptionSpec(BaseModel):
    """
    GcpMarketplaceProductPurchaseOptionSpec
    """
    feature_values: Optional[conlist(GcpMarketplaceProductFeatureValue)] = Field(None, alias="featureValues")
    name: Optional[StrictStr] = Field(None, description="The plan ID, such as \"starter\", without the duration suffix, such as \"P1Y\".")
    price_info: Optional[GcpMarketplaceProductPriceInfo] = Field(None, alias="priceInfo")
    purchase_mode: Optional[StrictStr] = Field(None, alias="purchaseMode")
    title: Optional[StrictStr] = Field(None, description="such as \"Starter\"")
    __properties = ["featureValues", "name", "priceInfo", "purchaseMode", "title"]

    @validator('purchase_mode')
    def purchase_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PURCHASE_MODE_PRIVATE', 'PURCHASE_MODE_PUBLIC'):
            raise ValueError("must be one of enum values ('PURCHASE_MODE_PRIVATE', 'PURCHASE_MODE_PUBLIC')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplaceProductPurchaseOptionSpec:
        """Create an instance of GcpMarketplaceProductPurchaseOptionSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in feature_values (list)
        _items = []
        if self.feature_values:
            for _item in self.feature_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['featureValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of price_info
        if self.price_info:
            _dict['priceInfo'] = self.price_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplaceProductPurchaseOptionSpec:
        """Create an instance of GcpMarketplaceProductPurchaseOptionSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplaceProductPurchaseOptionSpec.parse_obj(obj)

        _obj = GcpMarketplaceProductPurchaseOptionSpec.parse_obj({
            "feature_values": [GcpMarketplaceProductFeatureValue.from_dict(_item) for _item in obj.get("featureValues")] if obj.get("featureValues") is not None else None,
            "name": obj.get("name"),
            "price_info": GcpMarketplaceProductPriceInfo.from_dict(obj.get("priceInfo")) if obj.get("priceInfo") is not None else None,
            "purchase_mode": obj.get("purchaseMode"),
            "title": obj.get("title")
        })
        return _obj


