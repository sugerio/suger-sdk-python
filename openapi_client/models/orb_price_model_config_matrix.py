# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.orb_matrix_price_value import OrbMatrixPriceValue


class OrbPriceModelConfigMATRIX(BaseModel):
    """
    OrbPriceModelConfigMATRIX
    """

    default_unit_amount: Optional[StrictStr] = None
    dimensions: Optional[conlist(StrictStr)] = Field(
        None, description="First and (optional) second dimension grouping keys"
    )
    matrix_values: Optional[conlist(OrbMatrixPriceValue)] = None
    __properties = ["default_unit_amount", "dimensions", "matrix_values"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrbPriceModelConfigMATRIX:
        """Create an instance of OrbPriceModelConfigMATRIX from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in matrix_values (list)
        _items = []
        if self.matrix_values:
            for _item in self.matrix_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict["matrix_values"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrbPriceModelConfigMATRIX:
        """Create an instance of OrbPriceModelConfigMATRIX from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrbPriceModelConfigMATRIX.parse_obj(obj)

        _obj = OrbPriceModelConfigMATRIX.parse_obj(
            {
                "default_unit_amount": obj.get("default_unit_amount"),
                "dimensions": obj.get("dimensions"),
                "matrix_values": [
                    OrbMatrixPriceValue.from_dict(_item)
                    for _item in obj.get("matrix_values")
                ]
                if obj.get("matrix_values") is not None
                else None,
            }
        )
        return _obj
