# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.gcp_price_tier import GcpPriceTier


class GcpMarketplaceProductUsageFee(BaseModel):
    """
    GcpMarketplaceProductUsageFee
    """

    display_quantity: Optional[StrictInt] = Field(
        None, alias="displayQuantity", description="such as 1"
    )
    metric_id: Optional[StrictStr] = Field(
        None, alias="metricId", description='such as "Starter_storage"'
    )
    price_tiers: Optional[conlist(GcpPriceTier)] = Field(None, alias="priceTiers")
    __properties = ["displayQuantity", "metricId", "priceTiers"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplaceProductUsageFee:
        """Create an instance of GcpMarketplaceProductUsageFee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in price_tiers (list)
        _items = []
        if self.price_tiers:
            for _item in self.price_tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict["priceTiers"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplaceProductUsageFee:
        """Create an instance of GcpMarketplaceProductUsageFee from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplaceProductUsageFee.parse_obj(obj)

        _obj = GcpMarketplaceProductUsageFee.parse_obj(
            {
                "display_quantity": obj.get("displayQuantity"),
                "metric_id": obj.get("metricId"),
                "price_tiers": [
                    GcpPriceTier.from_dict(_item) for _item in obj.get("priceTiers")
                ]
                if obj.get("priceTiers") is not None
                else None,
            }
        )
        return _obj
