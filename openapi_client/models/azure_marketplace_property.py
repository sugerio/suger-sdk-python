# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.azure_marketplace_custom_amendment import AzureMarketplaceCustomAmendment
from openapi_client.models.azure_marketplace_resource_lifecycle_state import AzureMarketplaceResourceLifecycleState
from openapi_client.models.azure_marketplace_validation import AzureMarketplaceValidation

class AzureMarketplaceProperty(BaseModel):
    """
    AzureMarketplaceProperty
    """
    var_schema: Optional[StrictStr] = Field(None, alias="$schema")
    app_version: Optional[StrictStr] = Field(None, alias="appVersion")
    categories: Optional[Dict[str, conlist(StrictStr)]] = None
    cloud_industries: Optional[Dict[str, conlist(StrictStr)]] = Field(None, alias="cloudIndustries")
    custom_amendments: Optional[conlist(AzureMarketplaceCustomAmendment)] = Field(None, alias="customAmendments")
    id: Optional[StrictStr] = None
    industries: Optional[Dict[str, conlist(StrictStr)]] = None
    kind: Optional[StrictStr] = None
    lifecycle_state: Optional[AzureMarketplaceResourceLifecycleState] = Field(None, alias="lifecycleState")
    product: Optional[StrictStr] = None
    resource_name: Optional[StrictStr] = Field(None, alias="resourceName")
    standard_contract_amendment: Optional[StrictStr] = Field(None, alias="standardContractAmendment")
    terms_conditions: Optional[StrictStr] = Field(None, alias="termsConditions")
    terms_of_use: Optional[StrictStr] = Field(None, alias="termsOfUse")
    terms_of_use_url: Optional[StrictStr] = Field(None, alias="termsOfUseUrl")
    validations: Optional[conlist(AzureMarketplaceValidation)] = None
    __properties = ["$schema", "appVersion", "categories", "cloudIndustries", "customAmendments", "id", "industries", "kind", "lifecycleState", "product", "resourceName", "standardContractAmendment", "termsConditions", "termsOfUse", "termsOfUseUrl", "validations"]

    @validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('azureSaaS', 'azureVM'):
            raise ValueError("must be one of enum values ('azureSaaS', 'azureVM')")
        return value

    @validator('terms_conditions')
    def terms_conditions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('custom', 'standardMicrosoft'):
            raise ValueError("must be one of enum values ('custom', 'standardMicrosoft')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketplaceProperty:
        """Create an instance of AzureMarketplaceProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in categories (dict of array)
        _field_dict_of_array = {}
        if self.categories:
            for _key in self.categories:
                if self.categories[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.categories[_key]
                    ]
            _dict['categories'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each value in cloud_industries (dict of array)
        _field_dict_of_array = {}
        if self.cloud_industries:
            for _key in self.cloud_industries:
                if self.cloud_industries[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.cloud_industries[_key]
                    ]
            _dict['cloudIndustries'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each item in custom_amendments (list)
        _items = []
        if self.custom_amendments:
            for _item in self.custom_amendments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customAmendments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in industries (dict of array)
        _field_dict_of_array = {}
        if self.industries:
            for _key in self.industries:
                if self.industries[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.industries[_key]
                    ]
            _dict['industries'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each item in validations (list)
        _items = []
        if self.validations:
            for _item in self.validations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['validations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketplaceProperty:
        """Create an instance of AzureMarketplaceProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketplaceProperty.parse_obj(obj)

        _obj = AzureMarketplaceProperty.parse_obj({
            "var_schema": obj.get("$schema"),
            "app_version": obj.get("appVersion"),
            "categories": obj.get("categories"),
            "cloud_industries": obj.get("cloudIndustries"),
            "custom_amendments": [AzureMarketplaceCustomAmendment.from_dict(_item) for _item in obj.get("customAmendments")] if obj.get("customAmendments") is not None else None,
            "id": obj.get("id"),
            "industries": obj.get("industries"),
            "kind": obj.get("kind"),
            "lifecycle_state": obj.get("lifecycleState"),
            "product": obj.get("product"),
            "resource_name": obj.get("resourceName"),
            "standard_contract_amendment": obj.get("standardContractAmendment"),
            "terms_conditions": obj.get("termsConditions"),
            "terms_of_use": obj.get("termsOfUse"),
            "terms_of_use_url": obj.get("termsOfUseUrl"),
            "validations": [AzureMarketplaceValidation.from_dict(_item) for _item in obj.get("validations")] if obj.get("validations") is not None else None
        })
        return _obj


