# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from openapi_client.models.usage_record_group_source import UsageRecordGroupSource

class MeteringUsageRecordGroupMetaInfo(BaseModel):
    """
    MeteringUsageRecordGroupMetaInfo
    """
    metronome_daily_cost_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="metronomeDailyCostAmount", description="The metronome daily cost amount (in dollars) of the customer.")
    origin_records: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(None, alias="originRecords", description="The original records reported by the customer before convertion. If no dimension mapping is applied, this field is the same as the records field.")
    source: Optional[UsageRecordGroupSource] = None
    timestamp: Optional[datetime] = Field(None, description="The timestamp (UTC)) of when the usage records were generated. Optional, if not provided, the current report timestamp will be used.")
    __properties = ["metronomeDailyCostAmount", "originRecords", "source", "timestamp"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeteringUsageRecordGroupMetaInfo:
        """Create an instance of MeteringUsageRecordGroupMetaInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeteringUsageRecordGroupMetaInfo:
        """Create an instance of MeteringUsageRecordGroupMetaInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MeteringUsageRecordGroupMetaInfo.parse_obj(obj)

        _obj = MeteringUsageRecordGroupMetaInfo.parse_obj({
            "metronome_daily_cost_amount": obj.get("metronomeDailyCostAmount"),
            "origin_records": obj.get("originRecords"),
            "source": obj.get("source"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


