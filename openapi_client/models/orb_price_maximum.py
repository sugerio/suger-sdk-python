# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class OrbPriceMaximum(BaseModel):
    """
    OrbPriceMaximum
    """
    applies_to_price_ids: Optional[conlist(StrictStr)] = Field(None, description="List of price_ids that this maximum amount applies to. For plan/plan phase maximums, this can be a subset of prices.")
    maximum_amount: Optional[StrictStr] = None
    __properties = ["applies_to_price_ids", "maximum_amount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrbPriceMaximum:
        """Create an instance of OrbPriceMaximum from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrbPriceMaximum:
        """Create an instance of OrbPriceMaximum from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrbPriceMaximum.parse_obj(obj)

        _obj = OrbPriceMaximum.parse_obj({
            "applies_to_price_ids": obj.get("applies_to_price_ids"),
            "maximum_amount": obj.get("maximum_amount")
        })
        return _obj


