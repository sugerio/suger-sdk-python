# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field


class MicrosoftPartnerReferralTrackingInfo(BaseModel):
    """
    MicrosoftPartnerReferralTrackingInfo
    """

    microsoft_msx_id: Optional[Dict[str, Any]] = Field(None, alias="microsoftMsxId")
    microsoft_us_fed_lead_id: Optional[Dict[str, Any]] = Field(
        None, alias="microsoftUSFedLeadId"
    )
    microsoft_us_fedopportunity_id: Optional[Dict[str, Any]] = Field(
        None, alias="microsoftUSFedopportunityId"
    )
    migrated_psc_deal_id: Optional[Dict[str, Any]] = Field(
        None, alias="migratedPSCDealId"
    )
    migrated_psc_partner_deal_id: Optional[Dict[str, Any]] = Field(
        None, alias="migratedPSCPartnerDealId"
    )
    __properties = [
        "microsoftMsxId",
        "microsoftUSFedLeadId",
        "microsoftUSFedopportunityId",
        "migratedPSCDealId",
        "migratedPSCPartnerDealId",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MicrosoftPartnerReferralTrackingInfo:
        """Create an instance of MicrosoftPartnerReferralTrackingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MicrosoftPartnerReferralTrackingInfo:
        """Create an instance of MicrosoftPartnerReferralTrackingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MicrosoftPartnerReferralTrackingInfo.parse_obj(obj)

        _obj = MicrosoftPartnerReferralTrackingInfo.parse_obj(
            {
                "microsoft_msx_id": obj.get("microsoftMsxId"),
                "microsoft_us_fed_lead_id": obj.get("microsoftUSFedLeadId"),
                "microsoft_us_fedopportunity_id": obj.get(
                    "microsoftUSFedopportunityId"
                ),
                "migrated_psc_deal_id": obj.get("migratedPSCDealId"),
                "migrated_psc_partner_deal_id": obj.get("migratedPSCPartnerDealId"),
            }
        )
        return _obj
