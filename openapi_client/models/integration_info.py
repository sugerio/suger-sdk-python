# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.alibaba_marketplace_integration import (
    AlibabaMarketplaceIntegration,
)
from openapi_client.models.aws_ace_integration import AwsAceIntegration
from openapi_client.models.aws_marketplace_integration import AwsMarketplaceIntegration
from openapi_client.models.azure_integration import AzureIntegration
from openapi_client.models.gcp_integration import GcpIntegration
from openapi_client.models.hubspot_crm_integration import HubspotCrmIntegration
from openapi_client.models.metronome_integration import MetronomeIntegration
from openapi_client.models.orb_integration import OrbIntegration
from openapi_client.models.salesforce_crm_integration import SalesforceCrmIntegration
from openapi_client.models.slack_integration import SlackIntegration


class IntegrationInfo(BaseModel):
    """
    IntegrationInfo
    """

    alibaba_integration: Optional[AlibabaMarketplaceIntegration] = Field(
        None, alias="alibabaIntegration"
    )
    aws_ace_integration: Optional[AwsAceIntegration] = Field(
        None, alias="awsAceIntegration"
    )
    aws_integration: Optional[AwsMarketplaceIntegration] = Field(
        None, alias="awsIntegration"
    )
    azure_integration: Optional[AzureIntegration] = Field(
        None, alias="azureIntegration"
    )
    gcp_integration: Optional[GcpIntegration] = Field(None, alias="gcpIntegration")
    hubspot_crm_integration: Optional[HubspotCrmIntegration] = Field(
        None, alias="hubspotCrmIntegration"
    )
    metronome_integration: Optional[MetronomeIntegration] = Field(
        None, alias="metronomeIntegration"
    )
    orb_integration: Optional[OrbIntegration] = Field(None, alias="orbIntegration")
    salesforce_crm_integration: Optional[SalesforceCrmIntegration] = Field(
        None, alias="salesforceCrmIntegration"
    )
    slack_integration: Optional[SlackIntegration] = Field(
        None, alias="slackIntegration"
    )
    __properties = [
        "alibabaIntegration",
        "awsAceIntegration",
        "awsIntegration",
        "azureIntegration",
        "gcpIntegration",
        "hubspotCrmIntegration",
        "metronomeIntegration",
        "orbIntegration",
        "salesforceCrmIntegration",
        "slackIntegration",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntegrationInfo:
        """Create an instance of IntegrationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of alibaba_integration
        if self.alibaba_integration:
            _dict["alibabaIntegration"] = self.alibaba_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_ace_integration
        if self.aws_ace_integration:
            _dict["awsAceIntegration"] = self.aws_ace_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_integration
        if self.aws_integration:
            _dict["awsIntegration"] = self.aws_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_integration
        if self.azure_integration:
            _dict["azureIntegration"] = self.azure_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcp_integration
        if self.gcp_integration:
            _dict["gcpIntegration"] = self.gcp_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hubspot_crm_integration
        if self.hubspot_crm_integration:
            _dict["hubspotCrmIntegration"] = self.hubspot_crm_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metronome_integration
        if self.metronome_integration:
            _dict["metronomeIntegration"] = self.metronome_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orb_integration
        if self.orb_integration:
            _dict["orbIntegration"] = self.orb_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of salesforce_crm_integration
        if self.salesforce_crm_integration:
            _dict[
                "salesforceCrmIntegration"
            ] = self.salesforce_crm_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slack_integration
        if self.slack_integration:
            _dict["slackIntegration"] = self.slack_integration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntegrationInfo:
        """Create an instance of IntegrationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntegrationInfo.parse_obj(obj)

        _obj = IntegrationInfo.parse_obj(
            {
                "alibaba_integration": AlibabaMarketplaceIntegration.from_dict(
                    obj.get("alibabaIntegration")
                )
                if obj.get("alibabaIntegration") is not None
                else None,
                "aws_ace_integration": AwsAceIntegration.from_dict(
                    obj.get("awsAceIntegration")
                )
                if obj.get("awsAceIntegration") is not None
                else None,
                "aws_integration": AwsMarketplaceIntegration.from_dict(
                    obj.get("awsIntegration")
                )
                if obj.get("awsIntegration") is not None
                else None,
                "azure_integration": AzureIntegration.from_dict(
                    obj.get("azureIntegration")
                )
                if obj.get("azureIntegration") is not None
                else None,
                "gcp_integration": GcpIntegration.from_dict(obj.get("gcpIntegration"))
                if obj.get("gcpIntegration") is not None
                else None,
                "hubspot_crm_integration": HubspotCrmIntegration.from_dict(
                    obj.get("hubspotCrmIntegration")
                )
                if obj.get("hubspotCrmIntegration") is not None
                else None,
                "metronome_integration": MetronomeIntegration.from_dict(
                    obj.get("metronomeIntegration")
                )
                if obj.get("metronomeIntegration") is not None
                else None,
                "orb_integration": OrbIntegration.from_dict(obj.get("orbIntegration"))
                if obj.get("orbIntegration") is not None
                else None,
                "salesforce_crm_integration": SalesforceCrmIntegration.from_dict(
                    obj.get("salesforceCrmIntegration")
                )
                if obj.get("salesforceCrmIntegration") is not None
                else None,
                "slack_integration": SlackIntegration.from_dict(
                    obj.get("slackIntegration")
                )
                if obj.get("slackIntegration") is not None
                else None,
            }
        )
        return _obj
