# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from openapi_client.models.azure_localized_time_range import AzureLocalizedTimeRange

class AzureProductVariantTrial(BaseModel):
    """
    AzureProductVariantTrial
    """
    date_time_range: Optional[AzureLocalizedTimeRange] = Field(None, alias="dateTimeRange")
    duration: Optional[StrictInt] = None
    duration_type: Optional[StrictStr] = Field(None, alias="durationType")
    type: Optional[StrictStr] = None
    __properties = ["dateTimeRange", "duration", "durationType", "type"]

    @validator('duration_type')
    def duration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Minute', 'Days', 'Months'):
            raise ValueError("must be one of enum values ('Minute', 'Days', 'Months')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NoTrial', 'TimedAccess', 'TimedUsage', 'Unlimited'):
            raise ValueError("must be one of enum values ('NoTrial', 'TimedAccess', 'TimedUsage', 'Unlimited')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureProductVariantTrial:
        """Create an instance of AzureProductVariantTrial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of date_time_range
        if self.date_time_range:
            _dict['dateTimeRange'] = self.date_time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureProductVariantTrial:
        """Create an instance of AzureProductVariantTrial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureProductVariantTrial.parse_obj(obj)

        _obj = AzureProductVariantTrial.parse_obj({
            "date_time_range": AzureLocalizedTimeRange.from_dict(obj.get("dateTimeRange")) if obj.get("dateTimeRange") is not None else None,
            "duration": obj.get("duration"),
            "duration_type": obj.get("durationType"),
            "type": obj.get("type")
        })
        return _obj


