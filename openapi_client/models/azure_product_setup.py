# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from openapi_client.models.azure_type_value import AzureTypeValue


class AzureProductSetup(BaseModel):
    """
    AzureProductSetup
    """

    call_to_action: Optional[StrictStr] = Field(None, alias="callToAction")
    channel_states: Optional[conlist(AzureTypeValue)] = Field(
        None, alias="channelStates"
    )
    enable_test_drive: Optional[StrictBool] = Field(None, alias="enableTestDrive")
    resource_type: Optional[StrictStr] = Field(None, alias="resourceType")
    selling_option: Optional[StrictStr] = Field(None, alias="sellingOption")
    test_drive_type: Optional[StrictStr] = Field(None, alias="testDriveType")
    trial_uri: Optional[StrictStr] = Field(None, alias="trialUri")
    __properties = [
        "callToAction",
        "channelStates",
        "enableTestDrive",
        "resourceType",
        "sellingOption",
        "testDriveType",
        "trialUri",
    ]

    @validator("call_to_action")
    def call_to_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("free", "free-trial", "contact-me"):
            raise ValueError(
                "must be one of enum values ('free', 'free-trial', 'contact-me')"
            )
        return value

    @validator("resource_type")
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("AzureProductSetup"):
            raise ValueError("must be one of enum values ('AzureProductSetup')")
        return value

    @validator("selling_option")
    def selling_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("ListingOnly", "ListAndSell"):
            raise ValueError(
                "must be one of enum values ('ListingOnly', 'ListAndSell')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureProductSetup:
        """Create an instance of AzureProductSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in channel_states (list)
        _items = []
        if self.channel_states:
            for _item in self.channel_states:
                if _item:
                    _items.append(_item.to_dict())
            _dict["channelStates"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureProductSetup:
        """Create an instance of AzureProductSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureProductSetup.parse_obj(obj)

        _obj = AzureProductSetup.parse_obj(
            {
                "call_to_action": obj.get("callToAction"),
                "channel_states": [
                    AzureTypeValue.from_dict(_item)
                    for _item in obj.get("channelStates")
                ]
                if obj.get("channelStates") is not None
                else None,
                "enable_test_drive": obj.get("enableTestDrive"),
                "resource_type": obj.get("resourceType"),
                "selling_option": obj.get("sellingOption"),
                "test_drive_type": obj.get("testDriveType"),
                "trial_uri": obj.get("trialUri"),
            }
        )
        return _obj
