# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr
from openapi_client.models.cosell_sync_record import CosellSyncRecord

class CosellOppMeta(BaseModel):
    """
    CosellOppMeta
    """
    is_archived: Optional[StrictBool] = None
    is_draft: Optional[StrictBool] = None
    salesforce_referral_id: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    sync_record: Optional[CosellSyncRecord] = None
    __properties = ["is_archived", "is_draft", "salesforce_referral_id", "status", "sync_record"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CosellOppMeta:
        """Create an instance of CosellOppMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sync_record
        if self.sync_record:
            _dict['sync_record'] = self.sync_record.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CosellOppMeta:
        """Create an instance of CosellOppMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CosellOppMeta.parse_obj(obj)

        _obj = CosellOppMeta.parse_obj({
            "is_archived": obj.get("is_archived"),
            "is_draft": obj.get("is_draft"),
            "salesforce_referral_id": obj.get("salesforce_referral_id"),
            "status": obj.get("status"),
            "sync_record": CosellSyncRecord.from_dict(obj.get("sync_record")) if obj.get("sync_record") is not None else None
        })
        return _obj


