# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist


class AwsMarketplaceCppoPriceTermEntry(BaseModel):
    """
    AwsMarketplaceCppoPriceTermEntry
    """

    consumption_unit_column_names: Optional[conlist(StrictStr)] = Field(
        None, alias="consumptionUnitColumnNames"
    )
    description: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(
        None, alias="displayName", description="the dimension display name"
    )
    is_custom_dimension: Optional[StrictBool] = Field(None, alias="isCustomDimension")
    is_deleted: Optional[StrictBool] = Field(None, alias="isDeleted")
    name: Optional[StrictStr] = Field(None, description="The dimension Key")
    price_per_consumption_unit: Optional[Dict[str, StrictStr]] = Field(
        None,
        alias="pricePerConsumptionUnit",
        description="Key: the unit in ConsumptionUnitColumnName, Value: the unit price",
    )
    pricing_dimension: Optional[StrictStr] = Field(None, alias="pricingDimension")
    __properties = [
        "consumptionUnitColumnNames",
        "description",
        "displayName",
        "isCustomDimension",
        "isDeleted",
        "name",
        "pricePerConsumptionUnit",
        "pricingDimension",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AwsMarketplaceCppoPriceTermEntry:
        """Create an instance of AwsMarketplaceCppoPriceTermEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AwsMarketplaceCppoPriceTermEntry:
        """Create an instance of AwsMarketplaceCppoPriceTermEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AwsMarketplaceCppoPriceTermEntry.parse_obj(obj)

        _obj = AwsMarketplaceCppoPriceTermEntry.parse_obj(
            {
                "consumption_unit_column_names": obj.get("consumptionUnitColumnNames"),
                "description": obj.get("description"),
                "display_name": obj.get("displayName"),
                "is_custom_dimension": obj.get("isCustomDimension"),
                "is_deleted": obj.get("isDeleted"),
                "name": obj.get("name"),
                "price_per_consumption_unit": obj.get("pricePerConsumptionUnit"),
                "pricing_dimension": obj.get("pricingDimension"),
            }
        )
        return _obj
