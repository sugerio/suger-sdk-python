# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.hubspot_crm_credential import HubspotCrmCredential
from openapi_client.models.hubspot_sync_filter import HubspotSyncFilter


class HubspotCrmIntegration(BaseModel):
    """
    HubspotCrmIntegration
    """

    company_fields: Optional[conlist(StrictStr)] = Field(None, alias="companyFields")
    contact_fields: Optional[conlist(StrictStr)] = Field(None, alias="contactFields")
    credential: Optional[HubspotCrmCredential] = None
    deal_fields: Optional[conlist(StrictStr)] = Field(None, alias="dealFields")
    paused: Optional[StrictBool] = Field(
        None, description="Paused means the integration is not syncing."
    )
    portal_id: Optional[StrictInt] = Field(
        None, alias="portalId", description="Hubspot Account Id"
    )
    secret_key: Optional[StrictStr] = Field(None, alias="secretKey")
    sync_filters: Optional[conlist(HubspotSyncFilter)] = Field(
        None,
        alias="syncFilters",
        description="Can have at most 3 filters which will all be AND-ed.",
    )
    __properties = [
        "companyFields",
        "contactFields",
        "credential",
        "dealFields",
        "paused",
        "portalId",
        "secretKey",
        "syncFilters",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HubspotCrmIntegration:
        """Create an instance of HubspotCrmIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of credential
        if self.credential:
            _dict["credential"] = self.credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sync_filters (list)
        _items = []
        if self.sync_filters:
            for _item in self.sync_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict["syncFilters"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HubspotCrmIntegration:
        """Create an instance of HubspotCrmIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HubspotCrmIntegration.parse_obj(obj)

        _obj = HubspotCrmIntegration.parse_obj(
            {
                "company_fields": obj.get("companyFields"),
                "contact_fields": obj.get("contactFields"),
                "credential": HubspotCrmCredential.from_dict(obj.get("credential"))
                if obj.get("credential") is not None
                else None,
                "deal_fields": obj.get("dealFields"),
                "paused": obj.get("paused"),
                "portal_id": obj.get("portalId"),
                "secret_key": obj.get("secretKey"),
                "sync_filters": [
                    HubspotSyncFilter.from_dict(_item)
                    for _item in obj.get("syncFilters")
                ]
                if obj.get("syncFilters") is not None
                else None,
            }
        )
        return _obj
