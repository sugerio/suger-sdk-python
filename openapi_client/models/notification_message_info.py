# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist


class NotificationMessageInfo(BaseModel):
    """
    NotificationMessageInfo
    """

    cc_recipients: Optional[conlist(StrictStr)] = Field(None, alias="ccRecipients")
    custom_fields: Optional[Dict[str, StrictStr]] = Field(
        None,
        alias="customFields",
        description="The custom fields to render the email content.",
    )
    html_content: Optional[StrictStr] = Field(
        None, alias="htmlContent", description="The HTML content of the email."
    )
    rcc_recipients: Optional[conlist(StrictStr)] = Field(None, alias="rccRecipients")
    subject: Optional[StrictStr] = None
    text_content: Optional[StrictStr] = Field(
        None,
        alias="textContent",
        description="The text content of the email in case the recipient's email client does not support HTML.",
    )
    __properties = [
        "ccRecipients",
        "customFields",
        "htmlContent",
        "rccRecipients",
        "subject",
        "textContent",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationMessageInfo:
        """Create an instance of NotificationMessageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationMessageInfo:
        """Create an instance of NotificationMessageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationMessageInfo.parse_obj(obj)

        _obj = NotificationMessageInfo.parse_obj(
            {
                "cc_recipients": obj.get("ccRecipients"),
                "custom_fields": obj.get("customFields"),
                "html_content": obj.get("htmlContent"),
                "rcc_recipients": obj.get("rccRecipients"),
                "subject": obj.get("subject"),
                "text_content": obj.get("textContent"),
            }
        )
        return _obj
