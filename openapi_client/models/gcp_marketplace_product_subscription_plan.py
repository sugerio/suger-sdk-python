# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.gcp_price_value import GcpPriceValue

class GcpMarketplaceProductSubscriptionPlan(BaseModel):
    """
    GcpMarketplaceProductSubscriptionPlan
    """
    period: Optional[StrictStr] = Field(None, description="such as \"ONE_YEAR\", \"TWO_YEAR\", \"THREE_YEAR\"")
    price: Optional[GcpPriceValue] = None
    __properties = ["period", "price"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplaceProductSubscriptionPlan:
        """Create an instance of GcpMarketplaceProductSubscriptionPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplaceProductSubscriptionPlan:
        """Create an instance of GcpMarketplaceProductSubscriptionPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplaceProductSubscriptionPlan.parse_obj(obj)

        _obj = GcpMarketplaceProductSubscriptionPlan.parse_obj({
            "period": obj.get("period"),
            "price": GcpPriceValue.from_dict(obj.get("price")) if obj.get("price") is not None else None
        })
        return _obj


