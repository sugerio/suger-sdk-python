# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.gcp_marketplace_product_derived_discovery_state import (
    GcpMarketplaceProductDerivedDiscoveryState,
)
from openapi_client.models.gcp_marketplace_product_listing_spec import (
    GcpMarketplaceProductListingSpec,
)
from openapi_client.models.gcp_marketplace_product_service_config import (
    GcpMarketplaceProductServiceConfig,
)


class GcpMarketplaceProduct(BaseModel):
    """
    GcpMarketplaceProduct
    """

    create_time: Optional[datetime] = Field(None, alias="createTime")
    derived_discovery_state: Optional[
        GcpMarketplaceProductDerivedDiscoveryState
    ] = Field(None, alias="derivedDiscoveryState")
    id: Optional[StrictStr] = Field(
        None, description="Nullable, GCP Marketplace Product UUID"
    )
    last_publish_time: Optional[datetime] = Field(None, alias="lastPublishTime")
    listing_spec: Optional[GcpMarketplaceProductListingSpec] = Field(
        None, alias="listingSpec"
    )
    marketplace: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(
        None,
        description='In format of "projects/{project-number}/listings/{product-name}.endpoints.{provider-id}.cloud.goog"',
    )
    revision_create_time: Optional[datetime] = Field(None, alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(None, alias="revisionId")
    service: Optional[StrictStr] = Field(
        None,
        description='In format of "services/{product-name}.endpoints.{provider-id}.cloud.goog"',
    )
    service_config: Optional[GcpMarketplaceProductServiceConfig] = Field(
        None, alias="serviceConfig"
    )
    validation_summary: Optional[Dict[str, Any]] = Field(
        None, alias="validationSummary", description="TODO: add type"
    )
    __properties = [
        "createTime",
        "derivedDiscoveryState",
        "id",
        "lastPublishTime",
        "listingSpec",
        "marketplace",
        "name",
        "revisionCreateTime",
        "revisionId",
        "service",
        "serviceConfig",
        "validationSummary",
    ]

    @validator("marketplace")
    def marketplace_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("marketplaces/google-cloud"):
            raise ValueError("must be one of enum values ('marketplaces/google-cloud')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplaceProduct:
        """Create an instance of GcpMarketplaceProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of derived_discovery_state
        if self.derived_discovery_state:
            _dict["derivedDiscoveryState"] = self.derived_discovery_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of listing_spec
        if self.listing_spec:
            _dict["listingSpec"] = self.listing_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_config
        if self.service_config:
            _dict["serviceConfig"] = self.service_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplaceProduct:
        """Create an instance of GcpMarketplaceProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplaceProduct.parse_obj(obj)

        _obj = GcpMarketplaceProduct.parse_obj(
            {
                "create_time": obj.get("createTime"),
                "derived_discovery_state": GcpMarketplaceProductDerivedDiscoveryState.from_dict(
                    obj.get("derivedDiscoveryState")
                )
                if obj.get("derivedDiscoveryState") is not None
                else None,
                "id": obj.get("id"),
                "last_publish_time": obj.get("lastPublishTime"),
                "listing_spec": GcpMarketplaceProductListingSpec.from_dict(
                    obj.get("listingSpec")
                )
                if obj.get("listingSpec") is not None
                else None,
                "marketplace": obj.get("marketplace"),
                "name": obj.get("name"),
                "revision_create_time": obj.get("revisionCreateTime"),
                "revision_id": obj.get("revisionId"),
                "service": obj.get("service"),
                "service_config": GcpMarketplaceProductServiceConfig.from_dict(
                    obj.get("serviceConfig")
                )
                if obj.get("serviceConfig") is not None
                else None,
                "validation_summary": obj.get("validationSummary"),
            }
        )
        return _obj
