# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr


class UpdateBuyerParams(BaseModel):
    """
    UpdateBuyerParams
    """

    customer_id: Optional[StrictStr] = Field(
        None,
        alias="customerId",
        description="The customer ID to recognize the cloud marketplace buyer in your internal system. This may be used for uploading CSV files for Batch Metering Usage",
    )
    description: Optional[StrictStr] = Field(
        None,
        description="The description of the buyer. If not provided, the description will not be updated.",
    )
    metronome_customer_id: Optional[StrictStr] = Field(
        None,
        alias="metronomeCustomerId",
        description="The Metronome Customer ID of the buyer. If not provided, the Metronome Customer ID will not be updated.",
    )
    name: Optional[StrictStr] = Field(
        None,
        description="The name of the buyer. If not provided, the name will not be updated.",
    )
    orb_customer_id: Optional[StrictStr] = Field(
        None,
        alias="orbCustomerId",
        description="The Orb Customer ID of the buyer. If not provided, the Orb Customer ID will not be updated.",
    )
    __properties = [
        "customerId",
        "description",
        "metronomeCustomerId",
        "name",
        "orbCustomerId",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateBuyerParams:
        """Create an instance of UpdateBuyerParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateBuyerParams:
        """Create an instance of UpdateBuyerParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateBuyerParams.parse_obj(obj)

        _obj = UpdateBuyerParams.parse_obj(
            {
                "customer_id": obj.get("customerId"),
                "description": obj.get("description"),
                "metronome_customer_id": obj.get("metronomeCustomerId"),
                "name": obj.get("name"),
                "orb_customer_id": obj.get("orbCustomerId"),
            }
        )
        return _obj
