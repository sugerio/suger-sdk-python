# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.offer_info import OfferInfo
from openapi_client.models.partner import Partner
from openapi_client.models.partner_service import PartnerService
from openapi_client.models.workload_meta_info import WorkloadMetaInfo

class WorkloadOffer(BaseModel):
    """
    WorkloadOffer
    """
    contact_ids: Optional[conlist(StrictStr)] = Field(None, alias="contactIds")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy")
    creation_time: Optional[datetime] = Field(None, alias="creationTime")
    end_time: Optional[datetime] = Field(None, alias="endTime", description="nullable")
    expire_time: Optional[datetime] = Field(None, alias="expireTime", description="nullable")
    external_id: Optional[StrictStr] = Field(None, alias="externalID")
    id: Optional[StrictStr] = None
    info: Optional[OfferInfo] = None
    last_update_time: Optional[datetime] = Field(None, alias="lastUpdateTime")
    last_updated_by: Optional[StrictStr] = Field(None, alias="lastUpdatedBy")
    meta_info: Optional[WorkloadMetaInfo] = Field(None, alias="metaInfo")
    name: Optional[StrictStr] = None
    offer_type: Optional[StrictStr] = Field(None, alias="offerType")
    organization_id: Optional[StrictStr] = Field(None, alias="organizationID")
    partner: Optional[Partner] = None
    product_id: Optional[StrictStr] = Field(None, alias="productID")
    service: Optional[PartnerService] = None
    status: Optional[StrictStr] = None
    __properties = ["contactIds", "createdBy", "creationTime", "endTime", "expireTime", "externalID", "id", "info", "lastUpdateTime", "lastUpdatedBy", "metaInfo", "name", "offerType", "organizationID", "partner", "productID", "service", "status"]

    @validator('offer_type')
    def offer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DEFAULT', 'CONTRACT', 'SUBSCRIPTION', 'FREE_TRIAL', 'FLAT_RATE', 'PER_USER', 'PRIVATE', 'UNKNOWN'):
            raise ValueError("must be one of enum values ('DEFAULT', 'CONTRACT', 'SUBSCRIPTION', 'FREE_TRIAL', 'FLAT_RATE', 'PER_USER', 'PRIVATE', 'UNKNOWN')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACCEPTED', 'PENDING_CREATE', 'CREATE_FAILED', 'CREATE_SUCCESS', 'DRAFT', 'EXPIRED', 'PENDING_ACCEPTANCE', 'PENDING_CANCEL', 'CANCEL_FAILED', 'CANCEL_SUCCESS'):
            raise ValueError("must be one of enum values ('ACCEPTED', 'PENDING_CREATE', 'CREATE_FAILED', 'CREATE_SUCCESS', 'DRAFT', 'EXPIRED', 'PENDING_ACCEPTANCE', 'PENDING_CANCEL', 'CANCEL_FAILED', 'CANCEL_SUCCESS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkloadOffer:
        """Create an instance of WorkloadOffer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta_info
        if self.meta_info:
            _dict['metaInfo'] = self.meta_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkloadOffer:
        """Create an instance of WorkloadOffer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkloadOffer.parse_obj(obj)

        _obj = WorkloadOffer.parse_obj({
            "contact_ids": obj.get("contactIds"),
            "created_by": obj.get("createdBy"),
            "creation_time": obj.get("creationTime"),
            "end_time": obj.get("endTime"),
            "expire_time": obj.get("expireTime"),
            "external_id": obj.get("externalID"),
            "id": obj.get("id"),
            "info": OfferInfo.from_dict(obj.get("info")) if obj.get("info") is not None else None,
            "last_update_time": obj.get("lastUpdateTime"),
            "last_updated_by": obj.get("lastUpdatedBy"),
            "meta_info": WorkloadMetaInfo.from_dict(obj.get("metaInfo")) if obj.get("metaInfo") is not None else None,
            "name": obj.get("name"),
            "offer_type": obj.get("offerType"),
            "organization_id": obj.get("organizationID"),
            "partner": obj.get("partner"),
            "product_id": obj.get("productID"),
            "service": obj.get("service"),
            "status": obj.get("status")
        })
        return _obj


