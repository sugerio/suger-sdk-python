# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.alibaba_marketplace_product_sku_modules import AlibabaMarketplaceProductSkuModules
from openapi_client.models.alibaba_marketplace_product_sku_order_periods import AlibabaMarketplaceProductSkuOrderPeriods

class AlibabaMarketplaceProductSku(BaseModel):
    """
    AlibabaMarketplaceProductSku
    """
    charge_type: Optional[StrictStr] = Field(None, alias="ChargeType", description="POSTPAY or PREPAY")
    code: Optional[StrictStr] = Field(None, alias="Code")
    constraints: Optional[StrictStr] = Field(None, alias="Constraints")
    hidden: Optional[StrictBool] = Field(None, alias="Hidden")
    modules: Optional[AlibabaMarketplaceProductSkuModules] = Field(None, alias="Modules")
    name: Optional[StrictStr] = Field(None, alias="Name")
    order_periods: Optional[AlibabaMarketplaceProductSkuOrderPeriods] = Field(None, alias="OrderPeriods")
    __properties = ["ChargeType", "Code", "Constraints", "Hidden", "Modules", "Name", "OrderPeriods"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AlibabaMarketplaceProductSku:
        """Create an instance of AlibabaMarketplaceProductSku from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of modules
        if self.modules:
            _dict['Modules'] = self.modules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_periods
        if self.order_periods:
            _dict['OrderPeriods'] = self.order_periods.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AlibabaMarketplaceProductSku:
        """Create an instance of AlibabaMarketplaceProductSku from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AlibabaMarketplaceProductSku.parse_obj(obj)

        _obj = AlibabaMarketplaceProductSku.parse_obj({
            "charge_type": obj.get("ChargeType"),
            "code": obj.get("Code"),
            "constraints": obj.get("Constraints"),
            "hidden": obj.get("Hidden"),
            "modules": AlibabaMarketplaceProductSkuModules.from_dict(obj.get("Modules")) if obj.get("Modules") is not None else None,
            "name": obj.get("Name"),
            "order_periods": AlibabaMarketplaceProductSkuOrderPeriods.from_dict(obj.get("OrderPeriods")) if obj.get("OrderPeriods") is not None else None
        })
        return _obj


