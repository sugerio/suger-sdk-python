# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.gcp_price_tier import GcpPriceTier

class GcpMarketplacePrivateOfferMetricDetail(BaseModel):
    """
    GcpMarketplacePrivateOfferMetricDetail
    """
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="such as \"CPU\"")
    parent_commerce_service: Optional[StrictStr] = Field(None, alias="parentCommerceService", description="in format of \"projects/{projectNumber}/services/service-name.endpoints.gcp-project-id.cloud.goog\"")
    sku_id: Optional[StrictStr] = Field(None, alias="skuId", description="such as \"BC1B-6259-BF57\"")
    tiers: Optional[conlist(GcpPriceTier)] = Field(None, description="Price tiers for this metric.")
    unit_description: Optional[StrictStr] = Field(None, alias="unitDescription", description="such as \"minute\"")
    __properties = ["displayName", "parentCommerceService", "skuId", "tiers", "unitDescription"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplacePrivateOfferMetricDetail:
        """Create an instance of GcpMarketplacePrivateOfferMetricDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplacePrivateOfferMetricDetail:
        """Create an instance of GcpMarketplacePrivateOfferMetricDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplacePrivateOfferMetricDetail.parse_obj(obj)

        _obj = GcpMarketplacePrivateOfferMetricDetail.parse_obj({
            "display_name": obj.get("displayName"),
            "parent_commerce_service": obj.get("parentCommerceService"),
            "sku_id": obj.get("skuId"),
            "tiers": [GcpPriceTier.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None,
            "unit_description": obj.get("unitDescription")
        })
        return _obj


