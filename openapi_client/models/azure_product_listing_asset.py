# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class AzureProductListingAsset(BaseModel):
    """
    AzureProductListingAsset
    """
    description: Optional[StrictStr] = None
    file_name: Optional[StrictStr] = Field(None, alias="fileName")
    file_sas_uri: Optional[StrictStr] = Field(None, alias="fileSasUri")
    friendly_name: Optional[StrictStr] = Field(None, alias="friendlyName")
    id: Optional[StrictStr] = None
    order: Optional[StrictInt] = None
    publisher_defined_sas_uri: Optional[StrictStr] = Field(None, alias="publisherDefinedSasUri")
    resource_type: Optional[StrictStr] = Field(None, alias="resourceType")
    state: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties = ["description", "fileName", "fileSasUri", "friendlyName", "id", "order", "publisherDefinedSasUri", "resourceType", "state", "type"]

    @validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ListingAsset', 'ListingImage', 'ListingVideo'):
            raise ValueError("must be one of enum values ('ListingAsset', 'ListingImage', 'ListingVideo')")
        return value

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PendingUpload', 'Uploaded', 'InProcessing', 'Processed', 'ProcessFailed'):
            raise ValueError("must be one of enum values ('PendingUpload', 'Uploaded', 'InProcessing', 'Processed', 'ProcessFailed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureProductListingAsset:
        """Create an instance of AzureProductListingAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureProductListingAsset:
        """Create an instance of AzureProductListingAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureProductListingAsset.parse_obj(obj)

        _obj = AzureProductListingAsset.parse_obj({
            "description": obj.get("description"),
            "file_name": obj.get("fileName"),
            "file_sas_uri": obj.get("fileSasUri"),
            "friendly_name": obj.get("friendlyName"),
            "id": obj.get("id"),
            "order": obj.get("order"),
            "publisher_defined_sas_uri": obj.get("publisherDefinedSasUri"),
            "resource_type": obj.get("resourceType"),
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj


