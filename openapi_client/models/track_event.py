# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.track_event_action_type import TrackEventActionType


class TrackEvent(BaseModel):
    """
    TrackEvent
    """

    action: Optional[TrackEventActionType] = None
    contact_id: Optional[StrictStr] = Field(
        None,
        alias="contactId",
        description="The ID of the contact who triggered the track event if applicable.",
    )
    timestamp: Optional[datetime] = Field(
        None, description="timestamp of the track event happened."
    )
    __properties = ["action", "contactId", "timestamp"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrackEvent:
        """Create an instance of TrackEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrackEvent:
        """Create an instance of TrackEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrackEvent.parse_obj(obj)

        _obj = TrackEvent.parse_obj(
            {
                "action": obj.get("action"),
                "contact_id": obj.get("contactId"),
                "timestamp": obj.get("timestamp"),
            }
        )
        return _obj
