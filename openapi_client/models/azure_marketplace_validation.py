# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class AzureMarketplaceValidation(BaseModel):
    """
    AzureMarketplaceValidation
    """
    var_schema: Optional[StrictStr] = Field(None, alias="$schema")
    code: Optional[StrictStr] = None
    level: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    resource_id: Optional[StrictStr] = Field(None, alias="resourceId")
    __properties = ["$schema", "code", "level", "message", "resourceId"]

    @validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('businessValidationError', 'collectionLimitExceeded', 'invalidId', 'invalidEntityStatus', 'invalidRequest', 'invalidResource', 'invalidState', 'notDeployed', 'notSupported', 'operationCanceled', 'productLocked', 'resourceNotFound', 'schemaValidationError'):
            raise ValueError("must be one of enum values ('businessValidationError', 'collectionLimitExceeded', 'invalidId', 'invalidEntityStatus', 'invalidRequest', 'invalidResource', 'invalidState', 'notDeployed', 'notSupported', 'operationCanceled', 'productLocked', 'resourceNotFound', 'schemaValidationError')")
        return value

    @validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('informational', 'warning'):
            raise ValueError("must be one of enum values ('informational', 'warning')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketplaceValidation:
        """Create an instance of AzureMarketplaceValidation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketplaceValidation:
        """Create an instance of AzureMarketplaceValidation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketplaceValidation.parse_obj(obj)

        _obj = AzureMarketplaceValidation.parse_obj({
            "var_schema": obj.get("$schema"),
            "code": obj.get("code"),
            "level": obj.get("level"),
            "message": obj.get("message"),
            "resource_id": obj.get("resourceId")
        })
        return _obj


