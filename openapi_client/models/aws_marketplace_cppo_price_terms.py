# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.aws_marketplace_cppo_price_term_detailed_view import (
    AwsMarketplaceCppoPriceTermDetailedView,
)
from openapi_client.models.aws_marketplace_cppo_price_term_entry import (
    AwsMarketplaceCppoPriceTermEntry,
)


class AwsMarketplaceCppoPriceTerms(BaseModel):
    """
    AwsMarketplaceCppoPriceTerms
    """

    all_consumption_unit_column_names: Optional[conlist(StrictStr)] = Field(
        None, alias="allConsumptionUnitColumnNames"
    )
    detailed_view: Optional[AwsMarketplaceCppoPriceTermDetailedView] = Field(
        None, alias="detailedView"
    )
    entries: Optional[conlist(AwsMarketplaceCppoPriceTermEntry)] = None
    __properties = ["allConsumptionUnitColumnNames", "detailedView", "entries"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AwsMarketplaceCppoPriceTerms:
        """Create an instance of AwsMarketplaceCppoPriceTerms from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of detailed_view
        if self.detailed_view:
            _dict["detailedView"] = self.detailed_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item in self.entries:
                if _item:
                    _items.append(_item.to_dict())
            _dict["entries"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AwsMarketplaceCppoPriceTerms:
        """Create an instance of AwsMarketplaceCppoPriceTerms from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AwsMarketplaceCppoPriceTerms.parse_obj(obj)

        _obj = AwsMarketplaceCppoPriceTerms.parse_obj(
            {
                "all_consumption_unit_column_names": obj.get(
                    "allConsumptionUnitColumnNames"
                ),
                "detailed_view": AwsMarketplaceCppoPriceTermDetailedView.from_dict(
                    obj.get("detailedView")
                )
                if obj.get("detailedView") is not None
                else None,
                "entries": [
                    AwsMarketplaceCppoPriceTermEntry.from_dict(_item)
                    for _item in obj.get("entries")
                ]
                if obj.get("entries") is not None
                else None,
            }
        )
        return _obj
