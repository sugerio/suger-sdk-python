# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.microsoft_partner_referral_contact_preference import (
    MicrosoftPartnerReferralContactPreference,
)


class MicrosoftPartnerReferralPerson(BaseModel):
    """
    MicrosoftPartnerReferralPerson
    """

    contact_preference: Optional[MicrosoftPartnerReferralContactPreference] = Field(
        None, alias="contactPreference"
    )
    email: Optional[StrictStr] = None
    email_validation_status: Optional[StrictStr] = Field(
        None, alias="emailValidationStatus"
    )
    first_name: Optional[StrictStr] = Field(None, alias="firstName")
    last_name: Optional[StrictStr] = Field(None, alias="lastName")
    linked_in_profile_url: Optional[StrictStr] = Field(None, alias="linkedInProfileUrl")
    phone_number: Optional[StrictStr] = Field(None, alias="phoneNumber")
    phone_validation_status: Optional[StrictStr] = Field(
        None, alias="phoneValidationStatus"
    )
    title: Optional[StrictStr] = None
    __properties = [
        "contactPreference",
        "email",
        "emailValidationStatus",
        "firstName",
        "lastName",
        "linkedInProfileUrl",
        "phoneNumber",
        "phoneValidationStatus",
        "title",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MicrosoftPartnerReferralPerson:
        """Create an instance of MicrosoftPartnerReferralPerson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of contact_preference
        if self.contact_preference:
            _dict["contactPreference"] = self.contact_preference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MicrosoftPartnerReferralPerson:
        """Create an instance of MicrosoftPartnerReferralPerson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MicrosoftPartnerReferralPerson.parse_obj(obj)

        _obj = MicrosoftPartnerReferralPerson.parse_obj(
            {
                "contact_preference": MicrosoftPartnerReferralContactPreference.from_dict(
                    obj.get("contactPreference")
                )
                if obj.get("contactPreference") is not None
                else None,
                "email": obj.get("email"),
                "email_validation_status": obj.get("emailValidationStatus"),
                "first_name": obj.get("firstName"),
                "last_name": obj.get("lastName"),
                "linked_in_profile_url": obj.get("linkedInProfileUrl"),
                "phone_number": obj.get("phoneNumber"),
                "phone_validation_status": obj.get("phoneValidationStatus"),
                "title": obj.get("title"),
            }
        )
        return _obj
