# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class MicrosoftPartnerReferralSolution(BaseModel):
    """
    MicrosoftPartnerReferralSolution
    """
    closing_date_time: Optional[Dict[str, Any]] = Field(None, alias="closingDateTime")
    currency: Optional[Dict[str, Any]] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    price: Optional[Dict[str, Any]] = None
    publisher_name: Optional[StrictStr] = Field(None, alias="publisherName")
    quantity: Optional[Dict[str, Any]] = None
    solution_type: Optional[StrictStr] = Field(None, alias="solutionType")
    type: Optional[StrictStr] = None
    __properties = ["closingDateTime", "currency", "id", "name", "price", "publisherName", "quantity", "solutionType", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MicrosoftPartnerReferralSolution:
        """Create an instance of MicrosoftPartnerReferralSolution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MicrosoftPartnerReferralSolution:
        """Create an instance of MicrosoftPartnerReferralSolution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MicrosoftPartnerReferralSolution.parse_obj(obj)

        _obj = MicrosoftPartnerReferralSolution.parse_obj({
            "closing_date_time": obj.get("closingDateTime"),
            "currency": obj.get("currency"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "price": obj.get("price"),
            "publisher_name": obj.get("publisherName"),
            "quantity": obj.get("quantity"),
            "solution_type": obj.get("solutionType"),
            "type": obj.get("type")
        })
        return _obj


