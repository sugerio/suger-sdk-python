# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from openapi_client.models.microsoft_partner_referral_requirements import (
    MicrosoftPartnerReferralRequirements,
)


class MicrosoftPartnerReferralDetail(BaseModel):
    """
    MicrosoftPartnerReferralDetail
    """

    closing_date_time: Optional[StrictStr] = Field(
        None, alias="closingDateTime", description="in UTC date time format"
    )
    currency: Optional[StrictStr] = Field(None, description="ISO 4217 currency symbol")
    customer_action: Optional[Dict[str, Any]] = Field(None, alias="customerAction")
    customer_requested_contact: Optional[Dict[str, Any]] = Field(
        None, alias="customerRequestedContact"
    )
    deal_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="dealValue")
    incentive_level: Optional[Dict[str, Any]] = Field(None, alias="incentiveLevel")
    notes: Optional[StrictStr] = None
    requirements: Optional[MicrosoftPartnerReferralRequirements] = None
    __properties = [
        "closingDateTime",
        "currency",
        "customerAction",
        "customerRequestedContact",
        "dealValue",
        "incentiveLevel",
        "notes",
        "requirements",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MicrosoftPartnerReferralDetail:
        """Create an instance of MicrosoftPartnerReferralDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of requirements
        if self.requirements:
            _dict["requirements"] = self.requirements.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MicrosoftPartnerReferralDetail:
        """Create an instance of MicrosoftPartnerReferralDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MicrosoftPartnerReferralDetail.parse_obj(obj)

        _obj = MicrosoftPartnerReferralDetail.parse_obj(
            {
                "closing_date_time": obj.get("closingDateTime"),
                "currency": obj.get("currency"),
                "customer_action": obj.get("customerAction"),
                "customer_requested_contact": obj.get("customerRequestedContact"),
                "deal_value": obj.get("dealValue"),
                "incentive_level": obj.get("incentiveLevel"),
                "notes": obj.get("notes"),
                "requirements": MicrosoftPartnerReferralRequirements.from_dict(
                    obj.get("requirements")
                )
                if obj.get("requirements") is not None
                else None,
            }
        )
        return _obj
