# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from openapi_client.models.alibaba_marketplace_product_extras import (
    AlibabaMarketplaceProductExtras,
)
from openapi_client.models.alibaba_marketplace_product_shop_info import (
    AlibabaMarketplaceProductShopInfo,
)
from openapi_client.models.alibaba_marketplace_product_skus import (
    AlibabaMarketplaceProductSkus,
)


class AlibabaMarketplaceProduct(BaseModel):
    """
    AlibabaMarketplaceProduct
    """

    audit_fail_msg: Optional[StrictStr] = Field(None, alias="AuditFailMsg")
    audit_status: Optional[StrictStr] = Field(None, alias="AuditStatus")
    audit_time: Optional[StrictInt] = Field(None, alias="AuditTime")
    code: Optional[StrictStr] = Field(None, alias="Code")
    description: Optional[StrictStr] = Field(None, alias="Description")
    front_category_id: Optional[StrictInt] = Field(None, alias="FrontCategoryId")
    gmt_created: Optional[StrictInt] = Field(None, alias="GmtCreated")
    gmt_modified: Optional[StrictInt] = Field(None, alias="GmtModified")
    name: Optional[StrictStr] = Field(None, alias="Name")
    pic_url: Optional[StrictStr] = Field(None, alias="PicUrl")
    product_extras: Optional[AlibabaMarketplaceProductExtras] = Field(
        None, alias="ProductExtras"
    )
    product_skus: Optional[AlibabaMarketplaceProductSkus] = Field(
        None, alias="ProductSkus"
    )
    request_id: Optional[StrictStr] = Field(None, alias="RequestId")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Score")
    shop_info: Optional[AlibabaMarketplaceProductShopInfo] = Field(
        None, alias="ShopInfo"
    )
    short_description: Optional[StrictStr] = Field(None, alias="ShortDescription")
    status: Optional[StrictStr] = Field(None, alias="Status")
    supplier_pk: Optional[StrictInt] = Field(None, alias="SupplierPk")
    type: Optional[StrictStr] = Field(None, alias="Type")
    use_count: Optional[StrictInt] = Field(None, alias="UseCount")
    __properties = [
        "AuditFailMsg",
        "AuditStatus",
        "AuditTime",
        "Code",
        "Description",
        "FrontCategoryId",
        "GmtCreated",
        "GmtModified",
        "Name",
        "PicUrl",
        "ProductExtras",
        "ProductSkus",
        "RequestId",
        "Score",
        "ShopInfo",
        "ShortDescription",
        "Status",
        "SupplierPk",
        "Type",
        "UseCount",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AlibabaMarketplaceProduct:
        """Create an instance of AlibabaMarketplaceProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of product_extras
        if self.product_extras:
            _dict["ProductExtras"] = self.product_extras.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_skus
        if self.product_skus:
            _dict["ProductSkus"] = self.product_skus.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shop_info
        if self.shop_info:
            _dict["ShopInfo"] = self.shop_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AlibabaMarketplaceProduct:
        """Create an instance of AlibabaMarketplaceProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AlibabaMarketplaceProduct.parse_obj(obj)

        _obj = AlibabaMarketplaceProduct.parse_obj(
            {
                "audit_fail_msg": obj.get("AuditFailMsg"),
                "audit_status": obj.get("AuditStatus"),
                "audit_time": obj.get("AuditTime"),
                "code": obj.get("Code"),
                "description": obj.get("Description"),
                "front_category_id": obj.get("FrontCategoryId"),
                "gmt_created": obj.get("GmtCreated"),
                "gmt_modified": obj.get("GmtModified"),
                "name": obj.get("Name"),
                "pic_url": obj.get("PicUrl"),
                "product_extras": AlibabaMarketplaceProductExtras.from_dict(
                    obj.get("ProductExtras")
                )
                if obj.get("ProductExtras") is not None
                else None,
                "product_skus": AlibabaMarketplaceProductSkus.from_dict(
                    obj.get("ProductSkus")
                )
                if obj.get("ProductSkus") is not None
                else None,
                "request_id": obj.get("RequestId"),
                "score": obj.get("Score"),
                "shop_info": AlibabaMarketplaceProductShopInfo.from_dict(
                    obj.get("ShopInfo")
                )
                if obj.get("ShopInfo") is not None
                else None,
                "short_description": obj.get("ShortDescription"),
                "status": obj.get("Status"),
                "supplier_pk": obj.get("SupplierPk"),
                "type": obj.get("Type"),
                "use_count": obj.get("UseCount"),
            }
        )
        return _obj
