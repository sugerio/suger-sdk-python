# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr


class TypesEntitlement(BaseModel):
    """
    TypesEntitlement
    """

    customer_identifier: Optional[StrictStr] = Field(
        None,
        alias="customerIdentifier",
        description="The customer identifier is a handle to each unique customer in an application. Customer identifiers are obtained through the ResolveCustomer operation in AWS Marketplace Metering Service.",
    )
    dimension: Optional[StrictStr] = Field(
        None,
        description="The dimension for which the given entitlement applies. Dimensions represent categories of capacity in a product and are specified when the product is listed in AWS Marketplace.",
    )
    expiration_date: Optional[StrictStr] = Field(
        None,
        alias="expirationDate",
        description="The expiration date represents the minimum date through which this entitlement is expected to remain valid. For contractual products listed on AWS Marketplace, the expiration date is the date at which the customer will renew or cancel their contract. Customers who are opting to renew their contract will still have entitlements with an expiration date.",
    )
    product_code: Optional[StrictStr] = Field(
        None,
        alias="productCode",
        description="The product code for which the given entitlement applies. Product codes are provided by AWS Marketplace when the product listing is created.",
    )
    value: Optional[Dict[str, Any]] = Field(
        None,
        description="The EntitlementValue represents the amount of capacity that the customer is entitled to for the product.",
    )
    __properties = [
        "customerIdentifier",
        "dimension",
        "expirationDate",
        "productCode",
        "value",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TypesEntitlement:
        """Create an instance of TypesEntitlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TypesEntitlement:
        """Create an instance of TypesEntitlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TypesEntitlement.parse_obj(obj)

        _obj = TypesEntitlement.parse_obj(
            {
                "customer_identifier": obj.get("customerIdentifier"),
                "dimension": obj.get("dimension"),
                "expiration_date": obj.get("expirationDate"),
                "product_code": obj.get("productCode"),
                "value": obj.get("value"),
            }
        )
        return _obj
