# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.azure_marketplace_deprecation_schedule_alternative import (
    AzureMarketplaceDeprecationScheduleAlternative,
)


class AzureMarketplaceDeprecationSchedule(BaseModel):
    """
    AzureMarketplaceDeprecationSchedule
    """

    var_schema: Optional[StrictStr] = Field(None, alias="$schema")
    alternative: Optional[AzureMarketplaceDeprecationScheduleAlternative] = None
    var_date: Optional[StrictStr] = Field(
        None, alias="date", description="format: date-time"
    )
    date_offset: Optional[StrictStr] = Field(
        None, alias="dateOffset", description="format: duration"
    )
    reason: Optional[StrictStr] = None
    __properties = ["$schema", "alternative", "date", "dateOffset", "reason"]

    @validator("reason")
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("criticalSecurityIssue", "endOfSupport", "other"):
            raise ValueError(
                "must be one of enum values ('criticalSecurityIssue', 'endOfSupport', 'other')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketplaceDeprecationSchedule:
        """Create an instance of AzureMarketplaceDeprecationSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of alternative
        if self.alternative:
            _dict["alternative"] = self.alternative.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketplaceDeprecationSchedule:
        """Create an instance of AzureMarketplaceDeprecationSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketplaceDeprecationSchedule.parse_obj(obj)

        _obj = AzureMarketplaceDeprecationSchedule.parse_obj(
            {
                "var_schema": obj.get("$schema"),
                "alternative": AzureMarketplaceDeprecationScheduleAlternative.from_dict(
                    obj.get("alternative")
                )
                if obj.get("alternative") is not None
                else None,
                "var_date": obj.get("date"),
                "date_offset": obj.get("dateOffset"),
                "reason": obj.get("reason"),
            }
        )
        return _obj
