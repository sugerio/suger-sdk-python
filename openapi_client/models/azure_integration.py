# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.azure_integration_credential import (
    AzureIntegrationCredential,
)


class AzureIntegration(BaseModel):
    """
    AzureIntegration
    """

    cma_full_sync_done: Optional[StrictBool] = Field(
        None,
        alias="cmaFullSyncDone",
        description="Is Azure Commercial Marketplace Analytics (CMA) full-sync done.",
    )
    credential: Optional[AzureIntegrationCredential] = None
    partner_center_referral_sync_paused: Optional[StrictBool] = Field(
        None,
        alias="partnerCenterReferralSyncPaused",
        description="Is Microsoft Partner Center referral sync paused.",
    )
    revenue_record_full_sync_done: Optional[StrictBool] = Field(
        None,
        alias="revenueRecordFullSyncDone",
        description="Is AZURE Marketplace Revenue Record full-sync done.",
    )
    secret_key: Optional[StrictStr] = Field(
        None,
        alias="secretKey",
        description="The secret key used to store the AzureIntegrationCredential in AWS Secret manager. for internal usage only.",
    )
    __properties = [
        "cmaFullSyncDone",
        "credential",
        "partnerCenterReferralSyncPaused",
        "revenueRecordFullSyncDone",
        "secretKey",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureIntegration:
        """Create an instance of AzureIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of credential
        if self.credential:
            _dict["credential"] = self.credential.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureIntegration:
        """Create an instance of AzureIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureIntegration.parse_obj(obj)

        _obj = AzureIntegration.parse_obj(
            {
                "cma_full_sync_done": obj.get("cmaFullSyncDone"),
                "credential": AzureIntegrationCredential.from_dict(
                    obj.get("credential")
                )
                if obj.get("credential") is not None
                else None,
                "partner_center_referral_sync_paused": obj.get(
                    "partnerCenterReferralSyncPaused"
                ),
                "revenue_record_full_sync_done": obj.get("revenueRecordFullSyncDone"),
                "secret_key": obj.get("secretKey"),
            }
        )
        return _obj
