# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.company_info import CompanyInfo


class AwsAccountIdentifier(BaseModel):
    """
    AwsAccountIdentifier
    """

    aws_account_id: Optional[StrictStr] = Field(
        None,
        alias="awsAccountID",
        description="The AWS Account ID of the buyer in AWS Marketplace",
    )
    aws_customer_id: Optional[StrictStr] = Field(
        None,
        alias="awsCustomerID",
        description="The AWS Customer ID of the buyer in AWS Marketplace",
    )
    company_info: Optional[CompanyInfo] = Field(None, alias="companyInfo")
    data_feed_account_id: Optional[StrictStr] = Field(
        None,
        alias="dataFeedAccountID",
        description="The Account ID in AWS Marketplace Data Feed service",
    )
    __properties = ["awsAccountID", "awsCustomerID", "companyInfo", "dataFeedAccountID"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AwsAccountIdentifier:
        """Create an instance of AwsAccountIdentifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of company_info
        if self.company_info:
            _dict["companyInfo"] = self.company_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AwsAccountIdentifier:
        """Create an instance of AwsAccountIdentifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AwsAccountIdentifier.parse_obj(obj)

        _obj = AwsAccountIdentifier.parse_obj(
            {
                "aws_account_id": obj.get("awsAccountID"),
                "aws_customer_id": obj.get("awsCustomerID"),
                "company_info": CompanyInfo.from_dict(obj.get("companyInfo"))
                if obj.get("companyInfo") is not None
                else None,
                "data_feed_account_id": obj.get("dataFeedAccountID"),
            }
        )
        return _obj
