# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.slack_o_auth_response_incoming_webhook import SlackOAuthResponseIncomingWebhook
from openapi_client.models.slack_o_auth_v2_response_authed_user import SlackOAuthV2ResponseAuthedUser
from openapi_client.models.slack_o_auth_v2_response_enterprise import SlackOAuthV2ResponseEnterprise
from openapi_client.models.slack_o_auth_v2_response_team import SlackOAuthV2ResponseTeam

class SlackIntegration(BaseModel):
    """
    SlackIntegration
    """
    access_token: Optional[StrictStr] = Field(None, alias="accessToken")
    app_id: Optional[StrictStr] = Field(None, alias="appId")
    authed_user: Optional[SlackOAuthV2ResponseAuthedUser] = Field(None, alias="authedUser")
    bot_user_id: Optional[StrictStr] = Field(None, alias="botUserId")
    enterprise: Optional[SlackOAuthV2ResponseEnterprise] = None
    expires_in: Optional[StrictInt] = Field(None, alias="expiresIn")
    incoming_webhook: Optional[SlackOAuthResponseIncomingWebhook] = Field(None, alias="incomingWebhook")
    redirect_url: Optional[StrictStr] = Field(None, alias="redirectUrl")
    refresh_token: Optional[StrictStr] = Field(None, alias="refreshToken")
    scope: Optional[StrictStr] = Field(None, description="The scope of the access token. multiple scopes are separated by comma.")
    team: Optional[SlackOAuthV2ResponseTeam] = None
    token_type: Optional[StrictStr] = Field(None, alias="tokenType")
    __properties = ["accessToken", "appId", "authedUser", "botUserId", "enterprise", "expiresIn", "incomingWebhook", "redirectUrl", "refreshToken", "scope", "team", "tokenType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SlackIntegration:
        """Create an instance of SlackIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of authed_user
        if self.authed_user:
            _dict['authedUser'] = self.authed_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise
        if self.enterprise:
            _dict['enterprise'] = self.enterprise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incoming_webhook
        if self.incoming_webhook:
            _dict['incomingWebhook'] = self.incoming_webhook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SlackIntegration:
        """Create an instance of SlackIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SlackIntegration.parse_obj(obj)

        _obj = SlackIntegration.parse_obj({
            "access_token": obj.get("accessToken"),
            "app_id": obj.get("appId"),
            "authed_user": SlackOAuthV2ResponseAuthedUser.from_dict(obj.get("authedUser")) if obj.get("authedUser") is not None else None,
            "bot_user_id": obj.get("botUserId"),
            "enterprise": SlackOAuthV2ResponseEnterprise.from_dict(obj.get("enterprise")) if obj.get("enterprise") is not None else None,
            "expires_in": obj.get("expiresIn"),
            "incoming_webhook": SlackOAuthResponseIncomingWebhook.from_dict(obj.get("incomingWebhook")) if obj.get("incomingWebhook") is not None else None,
            "redirect_url": obj.get("redirectUrl"),
            "refresh_token": obj.get("refreshToken"),
            "scope": obj.get("scope"),
            "team": SlackOAuthV2ResponseTeam.from_dict(obj.get("team")) if obj.get("team") is not None else None,
            "token_type": obj.get("tokenType")
        })
        return _obj


