# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from openapi_client.models.gcp_price_value import GcpPriceValue


class GcpPriceTier(BaseModel):
    """
    GcpPriceTier
    """

    from_amount: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="fromAmount", description="such as 0"
    )
    price: Optional[GcpPriceValue] = None
    starting_usage_amount: Optional[StrictStr] = Field(
        None, alias="startingUsageAmount", description='such as "0"'
    )
    __properties = ["fromAmount", "price", "startingUsageAmount"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpPriceTier:
        """Create an instance of GcpPriceTier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict["price"] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpPriceTier:
        """Create an instance of GcpPriceTier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpPriceTier.parse_obj(obj)

        _obj = GcpPriceTier.parse_obj(
            {
                "from_amount": obj.get("fromAmount"),
                "price": GcpPriceValue.from_dict(obj.get("price"))
                if obj.get("price") is not None
                else None,
                "starting_usage_amount": obj.get("startingUsageAmount"),
            }
        )
        return _obj
