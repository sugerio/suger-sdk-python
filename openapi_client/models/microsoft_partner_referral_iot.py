# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool


class MicrosoftPartnerReferralIot(BaseModel):
    """
    MicrosoftPartnerReferralIot
    """

    attach_services: Optional[StrictBool] = Field(None, alias="attachServices")
    azure_certified_device: Optional[StrictBool] = Field(
        None, alias="azureCertifiedDevice"
    )
    customer_license_agreement_number: Optional[Dict[str, Any]] = Field(
        None, alias="customerLicenseAgreementNumber"
    )
    device_category: Optional[Dict[str, Any]] = Field(None, alias="deviceCategory")
    silicon_type: Optional[Dict[str, Any]] = Field(None, alias="siliconType")
    __properties = [
        "attachServices",
        "azureCertifiedDevice",
        "customerLicenseAgreementNumber",
        "deviceCategory",
        "siliconType",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MicrosoftPartnerReferralIot:
        """Create an instance of MicrosoftPartnerReferralIot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MicrosoftPartnerReferralIot:
        """Create an instance of MicrosoftPartnerReferralIot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MicrosoftPartnerReferralIot.parse_obj(obj)

        _obj = MicrosoftPartnerReferralIot.parse_obj(
            {
                "attach_services": obj.get("attachServices"),
                "azure_certified_device": obj.get("azureCertifiedDevice"),
                "customer_license_agreement_number": obj.get(
                    "customerLicenseAgreementNumber"
                ),
                "device_category": obj.get("deviceCategory"),
                "silicon_type": obj.get("siliconType"),
            }
        )
        return _obj
