# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.entitlement_info import EntitlementInfo
from openapi_client.models.entitlement_status import EntitlementStatus
from openapi_client.models.partner import Partner
from openapi_client.models.partner_service import PartnerService
from openapi_client.models.workload_meta_info import WorkloadMetaInfo


class WorkloadEntitlement(BaseModel):
    """
    WorkloadEntitlement
    """

    buyer_id: Optional[StrictStr] = Field(None, alias="buyerID")
    creation_time: Optional[datetime] = Field(None, alias="creationTime")
    end_time: Optional[datetime] = Field(None, alias="endTime", description="nullable")
    entitlement_term_id: Optional[StrictStr] = Field(None, alias="entitlementTermID")
    external_buyer_id: Optional[StrictStr] = Field(None, alias="externalBuyerID")
    external_id: Optional[StrictStr] = Field(None, alias="externalID")
    external_product_id: Optional[StrictStr] = Field(None, alias="externalProductID")
    id: Optional[StrictStr] = None
    info: Optional[EntitlementInfo] = None
    last_update_time: Optional[datetime] = Field(None, alias="lastUpdateTime")
    meta_info: Optional[WorkloadMetaInfo] = Field(None, alias="metaInfo")
    name: Optional[StrictStr] = None
    offer_id: Optional[StrictStr] = Field(None, alias="offerID")
    organization_id: Optional[StrictStr] = Field(None, alias="organizationID")
    partner: Optional[Partner] = None
    product_id: Optional[StrictStr] = Field(None, alias="productID")
    service: Optional[PartnerService] = None
    start_time: Optional[datetime] = Field(None, alias="startTime")
    status: Optional[EntitlementStatus] = None
    type: Optional[StrictStr] = None
    __properties = [
        "buyerID",
        "creationTime",
        "endTime",
        "entitlementTermID",
        "externalBuyerID",
        "externalID",
        "externalProductID",
        "id",
        "info",
        "lastUpdateTime",
        "metaInfo",
        "name",
        "offerID",
        "organizationID",
        "partner",
        "productID",
        "service",
        "startTime",
        "status",
        "type",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkloadEntitlement:
        """Create an instance of WorkloadEntitlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict["info"] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta_info
        if self.meta_info:
            _dict["metaInfo"] = self.meta_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkloadEntitlement:
        """Create an instance of WorkloadEntitlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkloadEntitlement.parse_obj(obj)

        _obj = WorkloadEntitlement.parse_obj(
            {
                "buyer_id": obj.get("buyerID"),
                "creation_time": obj.get("creationTime"),
                "end_time": obj.get("endTime"),
                "entitlement_term_id": obj.get("entitlementTermID"),
                "external_buyer_id": obj.get("externalBuyerID"),
                "external_id": obj.get("externalID"),
                "external_product_id": obj.get("externalProductID"),
                "id": obj.get("id"),
                "info": EntitlementInfo.from_dict(obj.get("info"))
                if obj.get("info") is not None
                else None,
                "last_update_time": obj.get("lastUpdateTime"),
                "meta_info": WorkloadMetaInfo.from_dict(obj.get("metaInfo"))
                if obj.get("metaInfo") is not None
                else None,
                "name": obj.get("name"),
                "offer_id": obj.get("offerID"),
                "organization_id": obj.get("organizationID"),
                "partner": obj.get("partner"),
                "product_id": obj.get("productID"),
                "service": obj.get("service"),
                "start_time": obj.get("startTime"),
                "status": obj.get("status"),
                "type": obj.get("type"),
            }
        )
        return _obj
