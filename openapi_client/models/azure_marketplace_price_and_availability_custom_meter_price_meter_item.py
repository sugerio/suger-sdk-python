# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from openapi_client.models.azure_marketplace_price_and_availability_custom_meter_price_included_quantity_item import AzureMarketplacePriceAndAvailabilityCustomMeterPriceIncludedQuantityItem
from openapi_client.models.azure_marketplace_price_and_availability_custom_meter_price_meter_item_price_item import AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItemPriceItem
from openapi_client.models.azure_marketplace_term import AzureMarketplaceTerm

class AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem(BaseModel):
    """
    AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem
    """
    billing_term: Optional[AzureMarketplaceTerm] = Field(None, alias="billingTerm")
    included_quantities: Optional[conlist(AzureMarketplacePriceAndAvailabilityCustomMeterPriceIncludedQuantityItem)] = Field(None, alias="includedQuantities")
    payment_option: Optional[AzureMarketplaceTerm] = Field(None, alias="paymentOption")
    price_per_payment_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="pricePerPaymentInUsd")
    prices: Optional[conlist(AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItemPriceItem)] = None
    __properties = ["billingTerm", "includedQuantities", "paymentOption", "pricePerPaymentInUsd", "prices"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem:
        """Create an instance of AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing_term
        if self.billing_term:
            _dict['billingTerm'] = self.billing_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in included_quantities (list)
        _items = []
        if self.included_quantities:
            for _item in self.included_quantities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['includedQuantities'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_option
        if self.payment_option:
            _dict['paymentOption'] = self.payment_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item in self.prices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['prices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem:
        """Create an instance of AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem.parse_obj(obj)

        _obj = AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem.parse_obj({
            "billing_term": AzureMarketplaceTerm.from_dict(obj.get("billingTerm")) if obj.get("billingTerm") is not None else None,
            "included_quantities": [AzureMarketplacePriceAndAvailabilityCustomMeterPriceIncludedQuantityItem.from_dict(_item) for _item in obj.get("includedQuantities")] if obj.get("includedQuantities") is not None else None,
            "payment_option": AzureMarketplaceTerm.from_dict(obj.get("paymentOption")) if obj.get("paymentOption") is not None else None,
            "price_per_payment_in_usd": obj.get("pricePerPaymentInUsd"),
            "prices": [AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItemPriceItem.from_dict(_item) for _item in obj.get("prices")] if obj.get("prices") is not None else None
        })
        return _obj


