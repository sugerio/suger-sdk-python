# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.revenue_record import RevenueRecord
from openapi_client.models.revenue_report_type import RevenueReportType


class RevenueReport(BaseModel):
    """
    RevenueReport
    """

    buyer_id: Optional[StrictStr] = Field(None, alias="buyerID")
    entitlement_id: Optional[StrictStr] = Field(None, alias="entitlementID")
    organization_id: Optional[StrictStr] = Field(None, alias="organizationID")
    partner: Optional[StrictStr] = None
    product_id: Optional[StrictStr] = Field(None, alias="productID")
    report_date: Optional[datetime] = Field(None, alias="reportDate")
    report_type: Optional[RevenueReportType] = Field(None, alias="reportType")
    revenue_records: Optional[conlist(RevenueRecord)] = Field(
        None, alias="revenueRecords"
    )
    service: Optional[StrictStr] = None
    __properties = [
        "buyerID",
        "entitlementID",
        "organizationID",
        "partner",
        "productID",
        "reportDate",
        "reportType",
        "revenueRecords",
        "service",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RevenueReport:
        """Create an instance of RevenueReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in revenue_records (list)
        _items = []
        if self.revenue_records:
            for _item in self.revenue_records:
                if _item:
                    _items.append(_item.to_dict())
            _dict["revenueRecords"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RevenueReport:
        """Create an instance of RevenueReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RevenueReport.parse_obj(obj)

        _obj = RevenueReport.parse_obj(
            {
                "buyer_id": obj.get("buyerID"),
                "entitlement_id": obj.get("entitlementID"),
                "organization_id": obj.get("organizationID"),
                "partner": obj.get("partner"),
                "product_id": obj.get("productID"),
                "report_date": obj.get("reportDate"),
                "report_type": obj.get("reportType"),
                "revenue_records": [
                    RevenueRecord.from_dict(_item)
                    for _item in obj.get("revenueRecords")
                ]
                if obj.get("revenueRecords") is not None
                else None,
                "service": obj.get("service"),
            }
        )
        return _obj
