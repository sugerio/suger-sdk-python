# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.azure_marketplace_price_and_availability_custom_meter_price_meter_item import AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem

class AzureMarketplacePriceAndAvailabilityCustomMeterPrice(BaseModel):
    """
    AzureMarketplacePriceAndAvailabilityCustomMeterPrice
    """
    meters: Optional[Dict[str, AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem]] = None
    price_input_option: Optional[StrictStr] = Field(None, alias="priceInputOption", description="default \"usd\"")
    __properties = ["meters", "priceInputOption"]

    @validator('price_input_option')
    def price_input_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('perMarket', 'usd'):
            raise ValueError("must be one of enum values ('perMarket', 'usd')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketplacePriceAndAvailabilityCustomMeterPrice:
        """Create an instance of AzureMarketplacePriceAndAvailabilityCustomMeterPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in meters (dict)
        _field_dict = {}
        if self.meters:
            for _key in self.meters:
                if self.meters[_key]:
                    _field_dict[_key] = self.meters[_key].to_dict()
            _dict['meters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketplacePriceAndAvailabilityCustomMeterPrice:
        """Create an instance of AzureMarketplacePriceAndAvailabilityCustomMeterPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketplacePriceAndAvailabilityCustomMeterPrice.parse_obj(obj)

        _obj = AzureMarketplacePriceAndAvailabilityCustomMeterPrice.parse_obj({
            "meters": dict(
                (_k, AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem.from_dict(_v))
                for _k, _v in obj.get("meters").items()
            )
            if obj.get("meters") is not None
            else None,
            "price_input_option": obj.get("priceInputOption")
        })
        return _obj


