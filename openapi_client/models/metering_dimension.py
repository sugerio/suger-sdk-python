# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from openapi_client.models.azure_included_base_quantity import AzureIncludedBaseQuantity
from openapi_client.models.gcp_price_tier import GcpPriceTier
from openapi_client.models.usage_count import UsageCount
from openapi_client.models.value_type import ValueType

class MeteringDimension(BaseModel):
    """
    The dimension to meter usage in entitlement.  # noqa: E501
    """
    category: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    included_base_quantities: Optional[conlist(AzureIncludedBaseQuantity)] = Field(None, alias="includedBaseQuantities", description="how many quantities of this dimension are included in the commit.")
    key: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(None, description="Display name of the dimension. For GCP Marketplace, it is the metering metric ID without plan prefix.")
    plan_id: Optional[StrictStr] = Field(None, alias="planId", description="The plan ID of the metering dimension. Applicable to GCP Marketplace only. No ISO duration suffix.")
    plan_name: Optional[StrictStr] = Field(None, alias="planName", description="The name of the plan for the metering dimension. Applicable to GCP Marketplace only. It may contains the ISO duration suffix, such as P1Y.")
    price_tiers: Optional[conlist(GcpPriceTier)] = Field(None, alias="priceTiers", description="The price tiers of the metering dimension. Applicable to GCP Marketplace only.")
    rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The unit price of this usage metering dimension.")
    sku_id: Optional[StrictStr] = Field(None, alias="skuId", description="The SKU ID of the metering dimension. Applicable to GCP Marketplace only.")
    types: Optional[conlist(StrictStr)] = None
    usage_count: Optional[UsageCount] = Field(None, alias="usageCount")
    value_type: Optional[ValueType] = Field(None, alias="valueType")
    __properties = ["category", "description", "includedBaseQuantities", "key", "name", "planId", "planName", "priceTiers", "rate", "skuId", "types", "usageCount", "valueType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeteringDimension:
        """Create an instance of MeteringDimension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in included_base_quantities (list)
        _items = []
        if self.included_base_quantities:
            for _item in self.included_base_quantities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['includedBaseQuantities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in price_tiers (list)
        _items = []
        if self.price_tiers:
            for _item in self.price_tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['priceTiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of usage_count
        if self.usage_count:
            _dict['usageCount'] = self.usage_count.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeteringDimension:
        """Create an instance of MeteringDimension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MeteringDimension.parse_obj(obj)

        _obj = MeteringDimension.parse_obj({
            "category": obj.get("category"),
            "description": obj.get("description"),
            "included_base_quantities": [AzureIncludedBaseQuantity.from_dict(_item) for _item in obj.get("includedBaseQuantities")] if obj.get("includedBaseQuantities") is not None else None,
            "key": obj.get("key"),
            "name": obj.get("name"),
            "plan_id": obj.get("planId"),
            "plan_name": obj.get("planName"),
            "price_tiers": [GcpPriceTier.from_dict(_item) for _item in obj.get("priceTiers")] if obj.get("priceTiers") is not None else None,
            "rate": obj.get("rate"),
            "sku_id": obj.get("skuId"),
            "types": obj.get("types"),
            "usage_count": UsageCount.from_dict(obj.get("usageCount")) if obj.get("usageCount") is not None else None,
            "value_type": obj.get("valueType")
        })
        return _obj


