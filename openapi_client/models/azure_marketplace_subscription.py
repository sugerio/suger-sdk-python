# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    conlist,
    validator,
)
from openapi_client.models.azure_ad_identifier import AzureADIdentifier
from openapi_client.models.azure_marketplace_subscription_status import (
    AzureMarketplaceSubscriptionStatus,
)
from openapi_client.models.azure_term import AzureTerm


class AzureMarketplaceSubscription(BaseModel):
    """
    AzureMarketplaceSubscription
    """

    allowed_customer_operations: Optional[conlist(StrictStr)] = Field(
        None, alias="allowedCustomerOperations"
    )
    auto_renew: Optional[StrictBool] = Field(None, alias="autoRenew")
    beneficiary: Optional[AzureADIdentifier] = None
    created: Optional[datetime] = None
    fulfillment_id: Optional[StrictStr] = Field(None, alias="fulfillmentId")
    id: Optional[StrictStr] = None
    is_free_trial: Optional[StrictBool] = Field(None, alias="isFreeTrial")
    is_test: Optional[StrictBool] = Field(None, alias="isTest")
    last_modified: Optional[StrictStr] = Field(None, alias="lastModified")
    name: Optional[StrictStr] = None
    offer_id: Optional[StrictStr] = Field(None, alias="offerId")
    plan_id: Optional[StrictStr] = Field(None, alias="planId")
    publisher_id: Optional[StrictStr] = Field(None, alias="publisherId")
    purchaser: Optional[AzureADIdentifier] = None
    quantity: Optional[StrictInt] = None
    saas_subscription_status: Optional[AzureMarketplaceSubscriptionStatus] = Field(
        None, alias="saasSubscriptionStatus"
    )
    sandbox_type: Optional[StrictStr] = Field(None, alias="sandboxType")
    session_id: Optional[StrictStr] = Field(None, alias="sessionId")
    session_mode: Optional[StrictStr] = Field(None, alias="sessionMode")
    store_front: Optional[StrictStr] = Field(None, alias="storeFront")
    term: Optional[AzureTerm] = None
    __properties = [
        "allowedCustomerOperations",
        "autoRenew",
        "beneficiary",
        "created",
        "fulfillmentId",
        "id",
        "isFreeTrial",
        "isTest",
        "lastModified",
        "name",
        "offerId",
        "planId",
        "publisherId",
        "purchaser",
        "quantity",
        "saasSubscriptionStatus",
        "sandboxType",
        "sessionId",
        "sessionMode",
        "storeFront",
        "term",
    ]

    @validator("allowed_customer_operations")
    def allowed_customer_operations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ("Read", "Update", "Delete"):
                raise ValueError(
                    "each list item must be one of ('Read', 'Update', 'Delete')"
                )
        return value

    @validator("sandbox_type")
    def sandbox_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("None", "Csp"):
            raise ValueError("must be one of enum values ('None', 'Csp')")
        return value

    @validator("session_mode")
    def session_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("None", "DryRun"):
            raise ValueError("must be one of enum values ('None', 'DryRun')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketplaceSubscription:
        """Create an instance of AzureMarketplaceSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of beneficiary
        if self.beneficiary:
            _dict["beneficiary"] = self.beneficiary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchaser
        if self.purchaser:
            _dict["purchaser"] = self.purchaser.to_dict()
        # override the default output from pydantic by calling `to_dict()` of term
        if self.term:
            _dict["term"] = self.term.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketplaceSubscription:
        """Create an instance of AzureMarketplaceSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketplaceSubscription.parse_obj(obj)

        _obj = AzureMarketplaceSubscription.parse_obj(
            {
                "allowed_customer_operations": obj.get("allowedCustomerOperations"),
                "auto_renew": obj.get("autoRenew"),
                "beneficiary": AzureADIdentifier.from_dict(obj.get("beneficiary"))
                if obj.get("beneficiary") is not None
                else None,
                "created": obj.get("created"),
                "fulfillment_id": obj.get("fulfillmentId"),
                "id": obj.get("id"),
                "is_free_trial": obj.get("isFreeTrial"),
                "is_test": obj.get("isTest"),
                "last_modified": obj.get("lastModified"),
                "name": obj.get("name"),
                "offer_id": obj.get("offerId"),
                "plan_id": obj.get("planId"),
                "publisher_id": obj.get("publisherId"),
                "purchaser": AzureADIdentifier.from_dict(obj.get("purchaser"))
                if obj.get("purchaser") is not None
                else None,
                "quantity": obj.get("quantity"),
                "saas_subscription_status": obj.get("saasSubscriptionStatus"),
                "sandbox_type": obj.get("sandboxType"),
                "session_id": obj.get("sessionId"),
                "session_mode": obj.get("sessionMode"),
                "store_front": obj.get("storeFront"),
                "term": AzureTerm.from_dict(obj.get("term"))
                if obj.get("term") is not None
                else None,
            }
        )
        return _obj
