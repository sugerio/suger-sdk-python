# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator


class AzureMarketState(BaseModel):
    """
    AzureMarketState
    """

    market_code: Optional[StrictStr] = Field(
        None, alias="marketCode", description="ISO Country Code"
    )
    state: Optional[StrictStr] = None
    __properties = ["marketCode", "state"]

    @validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Disabled", "Enabled", "StopSelling", "Terminated"):
            raise ValueError(
                "must be one of enum values ('Disabled', 'Enabled', 'StopSelling', 'Terminated')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketState:
        """Create an instance of AzureMarketState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketState:
        """Create an instance of AzureMarketState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketState.parse_obj(obj)

        _obj = AzureMarketState.parse_obj(
            {"market_code": obj.get("marketCode"), "state": obj.get("state")}
        )
        return _obj
