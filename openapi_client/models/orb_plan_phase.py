# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr
from openapi_client.models.orb_cadence import OrbCadence
from openapi_client.models.orb_price_discount import OrbPriceDiscount
from openapi_client.models.orb_price_maximum import OrbPriceMaximum
from openapi_client.models.orb_price_minimum import OrbPriceMinimum


class OrbPlanPhase(BaseModel):
    """
    OrbPlanPhase
    """

    description: Optional[StrictStr] = None
    discount: Optional[OrbPriceDiscount] = None
    duration: Optional[StrictInt] = None
    duration_unit: Optional[OrbCadence] = None
    maximum: Optional[OrbPriceMaximum] = None
    minimum: Optional[OrbPriceMinimum] = None
    name: Optional[StrictStr] = None
    order: Optional[StrictInt] = None
    __properties = [
        "description",
        "discount",
        "duration",
        "duration_unit",
        "maximum",
        "minimum",
        "name",
        "order",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrbPlanPhase:
        """Create an instance of OrbPlanPhase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict["discount"] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximum
        if self.maximum:
            _dict["maximum"] = self.maximum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimum
        if self.minimum:
            _dict["minimum"] = self.minimum.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrbPlanPhase:
        """Create an instance of OrbPlanPhase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrbPlanPhase.parse_obj(obj)

        _obj = OrbPlanPhase.parse_obj(
            {
                "description": obj.get("description"),
                "discount": OrbPriceDiscount.from_dict(obj.get("discount"))
                if obj.get("discount") is not None
                else None,
                "duration": obj.get("duration"),
                "duration_unit": obj.get("duration_unit"),
                "maximum": OrbPriceMaximum.from_dict(obj.get("maximum"))
                if obj.get("maximum") is not None
                else None,
                "minimum": OrbPriceMinimum.from_dict(obj.get("minimum"))
                if obj.get("minimum") is not None
                else None,
                "name": obj.get("name"),
                "order": obj.get("order"),
            }
        )
        return _obj
