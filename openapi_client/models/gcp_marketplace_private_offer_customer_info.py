# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr


class GcpMarketplacePrivateOfferCustomerInfo(BaseModel):
    """
    GcpMarketplacePrivateOfferCustomerInfo
    """

    address: Optional[StrictStr] = Field(
        None, description="The address of the customer"
    )
    contact: Optional[StrictStr] = Field(
        None, description="The contact name of the customer"
    )
    email: Optional[StrictStr] = Field(
        None, description="The email address of the customer"
    )
    organization: Optional[StrictStr] = Field(
        None, description="The company name of the customer"
    )
    unverified_billing_account: Optional[StrictStr] = Field(
        None,
        alias="unverifiedBillingAccount",
        description="The GCP billing account ID of the customer",
    )
    __properties = [
        "address",
        "contact",
        "email",
        "organization",
        "unverifiedBillingAccount",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplacePrivateOfferCustomerInfo:
        """Create an instance of GcpMarketplacePrivateOfferCustomerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplacePrivateOfferCustomerInfo:
        """Create an instance of GcpMarketplacePrivateOfferCustomerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplacePrivateOfferCustomerInfo.parse_obj(obj)

        _obj = GcpMarketplacePrivateOfferCustomerInfo.parse_obj(
            {
                "address": obj.get("address"),
                "contact": obj.get("contact"),
                "email": obj.get("email"),
                "organization": obj.get("organization"),
                "unverified_billing_account": obj.get("unverifiedBillingAccount"),
            }
        )
        return _obj
