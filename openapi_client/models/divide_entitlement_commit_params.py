# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist


class DivideEntitlementCommitParams(BaseModel):
    """
    DivideEntitlementCommitParams
    """

    commit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(
        None,
        alias="commitAmount",
        description="The amount of the commit to be divided. If it is less or equal to 0.0, the total commit of the entitlement will be divided into multiple sub entitlement terms with credit.",
    )
    start_dates: Optional[conlist(datetime)] = Field(
        None,
        alias="startDates",
        description="The start dates of the sub entitlement terms. The end date of the last sub entitlement term is the end date of the parent entitlement term. The first start date must be the same as the start date of the parent entitlement term.",
    )
    __properties = ["commitAmount", "startDates"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DivideEntitlementCommitParams:
        """Create an instance of DivideEntitlementCommitParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DivideEntitlementCommitParams:
        """Create an instance of DivideEntitlementCommitParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DivideEntitlementCommitParams.parse_obj(obj)

        _obj = DivideEntitlementCommitParams.parse_obj(
            {
                "commit_amount": obj.get("commitAmount"),
                "start_dates": obj.get("startDates"),
            }
        )
        return _obj
