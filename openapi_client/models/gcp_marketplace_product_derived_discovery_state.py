# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.gcp_marketplace_product_access_state import (
    GcpMarketplaceProductAccessState,
)


class GcpMarketplaceProductDerivedDiscoveryState(BaseModel):
    """
    GcpMarketplaceProductDerivedDiscoveryState
    """

    access_state: Optional[GcpMarketplaceProductAccessState] = Field(
        None, alias="accessState"
    )
    search_state: Optional[StrictStr] = Field(None, alias="searchState")
    __properties = ["accessState", "searchState"]

    @validator("search_state")
    def search_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("ADMIN_OVERRIDE_UNSEARCHABLE", "SEARCHABLE"):
            raise ValueError(
                "must be one of enum values ('ADMIN_OVERRIDE_UNSEARCHABLE', 'SEARCHABLE')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplaceProductDerivedDiscoveryState:
        """Create an instance of GcpMarketplaceProductDerivedDiscoveryState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplaceProductDerivedDiscoveryState:
        """Create an instance of GcpMarketplaceProductDerivedDiscoveryState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplaceProductDerivedDiscoveryState.parse_obj(obj)

        _obj = GcpMarketplaceProductDerivedDiscoveryState.parse_obj(
            {
                "access_state": obj.get("accessState"),
                "search_state": obj.get("searchState"),
            }
        )
        return _obj
