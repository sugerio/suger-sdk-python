# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_client.models.gcp_marketplace_document import GcpMarketplaceDocument
from openapi_client.models.gcp_marketplace_entitlement import GcpMarketplaceEntitlement
from openapi_client.models.gcp_marketplace_existing_offer_data import (
    GcpMarketplaceExistingOfferData,
)
from openapi_client.models.gcp_marketplace_payment_schedule_type import (
    GcpMarketplacePaymentScheduleType,
)
from openapi_client.models.gcp_marketplace_private_offer_customer_info import (
    GcpMarketplacePrivateOfferCustomerInfo,
)
from openapi_client.models.gcp_marketplace_private_offer_installment_timeline import (
    GcpMarketplacePrivateOfferInstallmentTimeline,
)
from openapi_client.models.gcp_marketplace_private_offer_metric_information import (
    GcpMarketplacePrivateOfferMetricInformation,
)
from openapi_client.models.gcp_marketplace_private_offer_migration_metadata import (
    GcpMarketplacePrivateOfferMigrationMetadata,
)
from openapi_client.models.gcp_marketplace_private_offer_price_model import (
    GcpMarketplacePrivateOfferPriceModel,
)
from openapi_client.models.gcp_marketplace_private_offer_price_model_type import (
    GcpMarketplacePrivateOfferPriceModelType,
)
from openapi_client.models.gcp_marketplace_private_offer_provider_info import (
    GcpMarketplacePrivateOfferProviderInfo,
)
from openapi_client.models.gcp_marketplace_private_offer_replacement_metadata import (
    GcpMarketplacePrivateOfferReplacementMetadata,
)
from openapi_client.models.gcp_marketplace_private_offer_state import (
    GcpMarketplacePrivateOfferState,
)
from openapi_client.models.gcp_marketplace_private_offer_term import (
    GcpMarketplacePrivateOfferTerm,
)
from openapi_client.models.gcp_marketplace_product_feature_value import (
    GcpMarketplaceProductFeatureValue,
)
from openapi_client.models.gcp_marketplace_purchase_channel import (
    GcpMarketplacePurchaseChannel,
)


class GcpMarketplacePrivateOffer(BaseModel):
    """
    GcpMarketplacePrivateOffer
    """

    active_entitlement: Optional[GcpMarketplaceEntitlement] = Field(
        None, alias="activeEntitlement"
    )
    agency_enabled: Optional[StrictBool] = Field(None, alias="agencyEnabled")
    agreement: Optional[StrictStr] = Field(
        None,
        description='The resource name of agreement(entitlement) In format of "projects/{projectNumber}/agreements/{agreementId}"',
    )
    cancel_time: Optional[datetime] = Field(None, alias="cancelTime")
    custom_eula: Optional[GcpMarketplaceDocument] = Field(None, alias="customEula")
    customer_info: Optional[GcpMarketplacePrivateOfferCustomerInfo] = Field(
        None, alias="customerInfo"
    )
    eula_agreement_document: Optional[GcpMarketplaceDocument] = Field(
        None, alias="eulaAgreementDocument"
    )
    existing_offer_data: Optional[GcpMarketplaceExistingOfferData] = Field(
        None, alias="existingOfferData"
    )
    expire_time: Optional[datetime] = Field(None, alias="expireTime")
    features: Optional[conlist(GcpMarketplaceProductFeatureValue)] = None
    installment_timeline: Optional[
        GcpMarketplacePrivateOfferInstallmentTimeline
    ] = Field(None, alias="installmentTimeline")
    lifecycle_state: Optional[StrictStr] = Field(
        None, alias="lifecycleState", description='such as "PUBLISHED"'
    )
    metric_information: Optional[GcpMarketplacePrivateOfferMetricInformation] = Field(
        None, alias="metricInformation"
    )
    migration_metadata: Optional[GcpMarketplacePrivateOfferMigrationMetadata] = Field(
        None, alias="migrationMetadata"
    )
    name: Optional[StrictStr] = Field(
        None,
        description='In format of "projects/{projectNumber}/services/{serviceName, such as service-name.endpoints.gcp-project-id.cloud.goog}/privateOffers/{privateOfferId}"',
    )
    offer_id: Optional[StrictStr] = Field(
        None, alias="offerId", description="GCP private offer ID"
    )
    offer_source: Optional[StrictStr] = Field(
        None, alias="offerSource", description='such as "OFFER"'
    )
    offer_state: Optional[GcpMarketplacePrivateOfferState] = Field(
        None, alias="offerState"
    )
    offer_term: Optional[GcpMarketplacePrivateOfferTerm] = Field(
        None, alias="offerTerm"
    )
    payment_schedule: Optional[GcpMarketplacePaymentScheduleType] = Field(
        None, alias="paymentSchedule"
    )
    policies: Optional[Dict[str, StrictStr]] = None
    price_model: Optional[GcpMarketplacePrivateOfferPriceModel] = Field(
        None, alias="priceModel"
    )
    price_model_type: Optional[GcpMarketplacePrivateOfferPriceModelType] = Field(
        None, alias="priceModelType"
    )
    provider_cancellation_internal_note: Optional[StrictStr] = Field(
        None, alias="providerCancellationInternalNote"
    )
    provider_info: Optional[GcpMarketplacePrivateOfferProviderInfo] = Field(
        None, alias="providerInfo"
    )
    provider_internal_note: Optional[StrictStr] = Field(
        None, alias="providerInternalNote"
    )
    provider_public_note: Optional[StrictStr] = Field(None, alias="providerPublicNote")
    purchase_channel: Optional[GcpMarketplacePurchaseChannel] = Field(
        None, alias="purchaseChannel"
    )
    purchase_time: Optional[datetime] = Field(None, alias="purchaseTime")
    replacement_metadata: Optional[
        GcpMarketplacePrivateOfferReplacementMetadata
    ] = Field(None, alias="replacementMetadata")
    service_level: Optional[StrictStr] = Field(
        None, alias="serviceLevel", description="The Plan of the offer."
    )
    update_time: Optional[datetime] = Field(None, alias="updateTime")
    use_legacy_partner_eula: Optional[StrictBool] = Field(
        None, alias="useLegacyPartnerEula"
    )
    user_labels: Optional[conlist(StrictStr)] = Field(None, alias="userLabels")
    __properties = [
        "activeEntitlement",
        "agencyEnabled",
        "agreement",
        "cancelTime",
        "customEula",
        "customerInfo",
        "eulaAgreementDocument",
        "existingOfferData",
        "expireTime",
        "features",
        "installmentTimeline",
        "lifecycleState",
        "metricInformation",
        "migrationMetadata",
        "name",
        "offerId",
        "offerSource",
        "offerState",
        "offerTerm",
        "paymentSchedule",
        "policies",
        "priceModel",
        "priceModelType",
        "providerCancellationInternalNote",
        "providerInfo",
        "providerInternalNote",
        "providerPublicNote",
        "purchaseChannel",
        "purchaseTime",
        "replacementMetadata",
        "serviceLevel",
        "updateTime",
        "useLegacyPartnerEula",
        "userLabels",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplacePrivateOffer:
        """Create an instance of GcpMarketplacePrivateOffer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of active_entitlement
        if self.active_entitlement:
            _dict["activeEntitlement"] = self.active_entitlement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_eula
        if self.custom_eula:
            _dict["customEula"] = self.custom_eula.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_info
        if self.customer_info:
            _dict["customerInfo"] = self.customer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eula_agreement_document
        if self.eula_agreement_document:
            _dict["eulaAgreementDocument"] = self.eula_agreement_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of existing_offer_data
        if self.existing_offer_data:
            _dict["existingOfferData"] = self.existing_offer_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item in self.features:
                if _item:
                    _items.append(_item.to_dict())
            _dict["features"] = _items
        # override the default output from pydantic by calling `to_dict()` of installment_timeline
        if self.installment_timeline:
            _dict["installmentTimeline"] = self.installment_timeline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric_information
        if self.metric_information:
            _dict["metricInformation"] = self.metric_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of migration_metadata
        if self.migration_metadata:
            _dict["migrationMetadata"] = self.migration_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer_term
        if self.offer_term:
            _dict["offerTerm"] = self.offer_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_model
        if self.price_model:
            _dict["priceModel"] = self.price_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider_info
        if self.provider_info:
            _dict["providerInfo"] = self.provider_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchase_channel
        if self.purchase_channel:
            _dict["purchaseChannel"] = self.purchase_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replacement_metadata
        if self.replacement_metadata:
            _dict["replacementMetadata"] = self.replacement_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplacePrivateOffer:
        """Create an instance of GcpMarketplacePrivateOffer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplacePrivateOffer.parse_obj(obj)

        _obj = GcpMarketplacePrivateOffer.parse_obj(
            {
                "active_entitlement": GcpMarketplaceEntitlement.from_dict(
                    obj.get("activeEntitlement")
                )
                if obj.get("activeEntitlement") is not None
                else None,
                "agency_enabled": obj.get("agencyEnabled"),
                "agreement": obj.get("agreement"),
                "cancel_time": obj.get("cancelTime"),
                "custom_eula": GcpMarketplaceDocument.from_dict(obj.get("customEula"))
                if obj.get("customEula") is not None
                else None,
                "customer_info": GcpMarketplacePrivateOfferCustomerInfo.from_dict(
                    obj.get("customerInfo")
                )
                if obj.get("customerInfo") is not None
                else None,
                "eula_agreement_document": GcpMarketplaceDocument.from_dict(
                    obj.get("eulaAgreementDocument")
                )
                if obj.get("eulaAgreementDocument") is not None
                else None,
                "existing_offer_data": GcpMarketplaceExistingOfferData.from_dict(
                    obj.get("existingOfferData")
                )
                if obj.get("existingOfferData") is not None
                else None,
                "expire_time": obj.get("expireTime"),
                "features": [
                    GcpMarketplaceProductFeatureValue.from_dict(_item)
                    for _item in obj.get("features")
                ]
                if obj.get("features") is not None
                else None,
                "installment_timeline": GcpMarketplacePrivateOfferInstallmentTimeline.from_dict(
                    obj.get("installmentTimeline")
                )
                if obj.get("installmentTimeline") is not None
                else None,
                "lifecycle_state": obj.get("lifecycleState"),
                "metric_information": GcpMarketplacePrivateOfferMetricInformation.from_dict(
                    obj.get("metricInformation")
                )
                if obj.get("metricInformation") is not None
                else None,
                "migration_metadata": GcpMarketplacePrivateOfferMigrationMetadata.from_dict(
                    obj.get("migrationMetadata")
                )
                if obj.get("migrationMetadata") is not None
                else None,
                "name": obj.get("name"),
                "offer_id": obj.get("offerId"),
                "offer_source": obj.get("offerSource"),
                "offer_state": obj.get("offerState"),
                "offer_term": GcpMarketplacePrivateOfferTerm.from_dict(
                    obj.get("offerTerm")
                )
                if obj.get("offerTerm") is not None
                else None,
                "payment_schedule": obj.get("paymentSchedule"),
                "policies": obj.get("policies"),
                "price_model": GcpMarketplacePrivateOfferPriceModel.from_dict(
                    obj.get("priceModel")
                )
                if obj.get("priceModel") is not None
                else None,
                "price_model_type": obj.get("priceModelType"),
                "provider_cancellation_internal_note": obj.get(
                    "providerCancellationInternalNote"
                ),
                "provider_info": GcpMarketplacePrivateOfferProviderInfo.from_dict(
                    obj.get("providerInfo")
                )
                if obj.get("providerInfo") is not None
                else None,
                "provider_internal_note": obj.get("providerInternalNote"),
                "provider_public_note": obj.get("providerPublicNote"),
                "purchase_channel": GcpMarketplacePurchaseChannel.from_dict(
                    obj.get("purchaseChannel")
                )
                if obj.get("purchaseChannel") is not None
                else None,
                "purchase_time": obj.get("purchaseTime"),
                "replacement_metadata": GcpMarketplacePrivateOfferReplacementMetadata.from_dict(
                    obj.get("replacementMetadata")
                )
                if obj.get("replacementMetadata") is not None
                else None,
                "service_level": obj.get("serviceLevel"),
                "update_time": obj.get("updateTime"),
                "use_legacy_partner_eula": obj.get("useLegacyPartnerEula"),
                "user_labels": obj.get("userLabels"),
            }
        )
        return _obj
