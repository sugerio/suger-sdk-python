# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr


class AzureIntegrationCredential(BaseModel):
    """
    AzureIntegrationCredential
    """

    access_token: Optional[StrictStr] = Field(None, alias="accessToken")
    client_id: Optional[StrictStr] = Field(None, alias="clientID")
    client_secret: Optional[StrictStr] = Field(None, alias="clientSecret")
    expires_on: Optional[StrictStr] = Field(
        None, alias="expiresOn", description="The time when the access token expires."
    )
    refresh_token: Optional[StrictStr] = Field(
        None,
        alias="refreshToken",
        description="The refresh token used to refresh the access token.",
    )
    tenant_id: Optional[StrictStr] = Field(None, alias="tenantID")
    token_scope: Optional[StrictStr] = Field(None, alias="tokenScope")
    token_type: Optional[StrictStr] = Field(None, alias="tokenType")
    __properties = [
        "accessToken",
        "clientID",
        "clientSecret",
        "expiresOn",
        "refreshToken",
        "tenantID",
        "tokenScope",
        "tokenType",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureIntegrationCredential:
        """Create an instance of AzureIntegrationCredential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureIntegrationCredential:
        """Create an instance of AzureIntegrationCredential from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureIntegrationCredential.parse_obj(obj)

        _obj = AzureIntegrationCredential.parse_obj(
            {
                "access_token": obj.get("accessToken"),
                "client_id": obj.get("clientID"),
                "client_secret": obj.get("clientSecret"),
                "expires_on": obj.get("expiresOn"),
                "refresh_token": obj.get("refreshToken"),
                "tenant_id": obj.get("tenantID"),
                "token_scope": obj.get("tokenScope"),
                "token_type": obj.get("tokenType"),
            }
        )
        return _obj
