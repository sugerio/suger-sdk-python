# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.microsoft_partner_referral import MicrosoftPartnerReferral

class CosellOppInfo(BaseModel):
    """
    CosellOppInfo
    """
    account: Optional[Dict[str, Any]] = None
    contact: Optional[Dict[str, Any]] = None
    creation_time: Optional[StrictStr] = Field(None, alias="creationTime")
    last_modified_time: Optional[StrictStr] = Field(None, alias="lastModifiedTime")
    microsoft_partner_referral: Optional[MicrosoftPartnerReferral] = Field(None, alias="microsoftPartnerReferral")
    opportunity: Optional[Dict[str, Any]] = None
    owner: Optional[Dict[str, Any]] = None
    __properties = ["account", "contact", "creationTime", "lastModifiedTime", "microsoftPartnerReferral", "opportunity", "owner"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CosellOppInfo:
        """Create an instance of CosellOppInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of microsoft_partner_referral
        if self.microsoft_partner_referral:
            _dict['microsoftPartnerReferral'] = self.microsoft_partner_referral.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CosellOppInfo:
        """Create an instance of CosellOppInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CosellOppInfo.parse_obj(obj)

        _obj = CosellOppInfo.parse_obj({
            "account": obj.get("account"),
            "contact": obj.get("contact"),
            "creation_time": obj.get("creationTime"),
            "last_modified_time": obj.get("lastModifiedTime"),
            "microsoft_partner_referral": MicrosoftPartnerReferral.from_dict(obj.get("microsoftPartnerReferral")) if obj.get("microsoftPartnerReferral") is not None else None,
            "opportunity": obj.get("opportunity"),
            "owner": obj.get("owner")
        })
        return _obj


