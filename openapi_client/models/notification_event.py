# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.entity_type import EntityType
from openapi_client.models.notification_event_action import NotificationEventAction
from openapi_client.models.notification_event_status import NotificationEventStatus
from openapi_client.models.partner import Partner
from openapi_client.models.track_event import TrackEvent

class NotificationEvent(BaseModel):
    """
    NotificationEvent
    """
    action: Optional[NotificationEventAction] = None
    cc_contact_ids: Optional[conlist(StrictStr)] = Field(None, alias="ccContactIds", description="Cc contactIds that will receive this notification")
    contact_ids: Optional[conlist(StrictStr)] = Field(None, alias="contactIds", description="ContactIds that will receive this notification")
    entity_id: Optional[StrictStr] = Field(None, alias="entityID")
    entity_status: Optional[StrictStr] = Field(None, alias="entityStatus")
    entity_type: Optional[EntityType] = Field(None, alias="entityType")
    event_id: Optional[StrictStr] = Field(None, alias="eventID", description="notification event id.")
    event_status: Optional[NotificationEventStatus] = Field(None, alias="eventStatus")
    last_update_time: Optional[datetime] = Field(None, alias="lastUpdateTime", description="timestamp of the event when it is updated.")
    message: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = Field(None, alias="organizationID", description="suger organization id.")
    partner: Optional[Partner] = None
    timestamp: Optional[datetime] = Field(None, description="timestamp of the event when it is scheduled or created.")
    title: Optional[StrictStr] = Field(None, description="The title of the notification event such as email subject.")
    track_events: Optional[conlist(TrackEvent)] = Field(None, alias="trackEvents", description="The track events of the notification event.")
    __properties = ["action", "ccContactIds", "contactIds", "entityID", "entityStatus", "entityType", "eventID", "eventStatus", "lastUpdateTime", "message", "organizationID", "partner", "timestamp", "title", "trackEvents"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationEvent:
        """Create an instance of NotificationEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in track_events (list)
        _items = []
        if self.track_events:
            for _item in self.track_events:
                if _item:
                    _items.append(_item.to_dict())
            _dict['trackEvents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationEvent:
        """Create an instance of NotificationEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationEvent.parse_obj(obj)

        _obj = NotificationEvent.parse_obj({
            "action": obj.get("action"),
            "cc_contact_ids": obj.get("ccContactIds"),
            "contact_ids": obj.get("contactIds"),
            "entity_id": obj.get("entityID"),
            "entity_status": obj.get("entityStatus"),
            "entity_type": obj.get("entityType"),
            "event_id": obj.get("eventID"),
            "event_status": obj.get("eventStatus"),
            "last_update_time": obj.get("lastUpdateTime"),
            "message": obj.get("message"),
            "organization_id": obj.get("organizationID"),
            "partner": obj.get("partner"),
            "timestamp": obj.get("timestamp"),
            "title": obj.get("title"),
            "track_events": [TrackEvent.from_dict(_item) for _item in obj.get("trackEvents")] if obj.get("trackEvents") is not None else None
        })
        return _obj


