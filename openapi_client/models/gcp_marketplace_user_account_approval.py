# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.gcp_marketplace_user_account_approval_state import GcpMarketplaceUserAccountApprovalState

class GcpMarketplaceUserAccountApproval(BaseModel):
    """
    GcpMarketplaceUserAccountApproval
    """
    name: Optional[StrictStr] = None
    reason: Optional[StrictStr] = Field(None, description="An explanation for the state of the approval.")
    state: Optional[GcpMarketplaceUserAccountApprovalState] = None
    update_time: Optional[StrictStr] = Field(None, alias="updateTime", description="RFC3339 UTC timestamp")
    __properties = ["name", "reason", "state", "updateTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplaceUserAccountApproval:
        """Create an instance of GcpMarketplaceUserAccountApproval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplaceUserAccountApproval:
        """Create an instance of GcpMarketplaceUserAccountApproval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplaceUserAccountApproval.parse_obj(obj)

        _obj = GcpMarketplaceUserAccountApproval.parse_obj({
            "name": obj.get("name"),
            "reason": obj.get("reason"),
            "state": obj.get("state"),
            "update_time": obj.get("updateTime")
        })
        return _obj


