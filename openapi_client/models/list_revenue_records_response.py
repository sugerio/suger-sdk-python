# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from openapi_client.models.revenue_record import RevenueRecord

class ListRevenueRecordsResponse(BaseModel):
    """
    ListRevenueRecordsResponse
    """
    next_offset: Optional[StrictInt] = Field(None, alias="nextOffset")
    revenue_records: Optional[conlist(RevenueRecord)] = Field(None, alias="revenueRecords")
    __properties = ["nextOffset", "revenueRecords"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListRevenueRecordsResponse:
        """Create an instance of ListRevenueRecordsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in revenue_records (list)
        _items = []
        if self.revenue_records:
            for _item in self.revenue_records:
                if _item:
                    _items.append(_item.to_dict())
            _dict['revenueRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListRevenueRecordsResponse:
        """Create an instance of ListRevenueRecordsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListRevenueRecordsResponse.parse_obj(obj)

        _obj = ListRevenueRecordsResponse.parse_obj({
            "next_offset": obj.get("nextOffset"),
            "revenue_records": [RevenueRecord.from_dict(_item) for _item in obj.get("revenueRecords")] if obj.get("revenueRecords") is not None else None
        })
        return _obj


