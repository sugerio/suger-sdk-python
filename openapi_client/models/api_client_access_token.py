# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ApiClientAccessToken(BaseModel):
    """
    ApiClientAccessToken
    """
    access_token: Optional[StrictStr] = None
    expires_in: Optional[StrictInt] = Field(None, description="The token expires in 1 hour")
    expires_on: Optional[datetime] = Field(None, description="The UTC timestamp when the token expires")
    token_type: Optional[StrictStr] = 'Bearer'
    __properties = ["access_token", "expires_in", "expires_on", "token_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiClientAccessToken:
        """Create an instance of ApiClientAccessToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiClientAccessToken:
        """Create an instance of ApiClientAccessToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiClientAccessToken.parse_obj(obj)

        _obj = ApiClientAccessToken.parse_obj({
            "access_token": obj.get("access_token"),
            "expires_in": obj.get("expires_in"),
            "expires_on": obj.get("expires_on"),
            "token_type": obj.get("token_type") if obj.get("token_type") is not None else 'Bearer'
        })
        return _obj


