# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_client.models.azure_marketplace_offer_pricing_type import (
    AzureMarketplaceOfferPricingType,
)
from openapi_client.models.azure_marketplace_private_offer_acceptance_link import (
    AzureMarketplacePrivateOfferAcceptanceLink,
)
from openapi_client.models.azure_marketplace_private_offer_beneficiary import (
    AzureMarketplacePrivateOfferBeneficiary,
)
from openapi_client.models.azure_marketplace_private_offer_partner import (
    AzureMarketplacePrivateOfferPartner,
)
from openapi_client.models.azure_marketplace_private_offer_pricing import (
    AzureMarketplacePrivateOfferPricing,
)
from openapi_client.models.azure_marketplace_private_offer_promotion_reference import (
    AzureMarketplacePrivateOfferPromotionReference,
)
from openapi_client.models.azure_marketplace_private_offer_state import (
    AzureMarketplacePrivateOfferState,
)
from openapi_client.models.azure_marketplace_private_offer_sub_state import (
    AzureMarketplacePrivateOfferSubState,
)
from openapi_client.models.azure_marketplace_private_offer_terms_doc import (
    AzureMarketplacePrivateOfferTermsDoc,
)
from openapi_client.models.azure_marketplace_private_offer_type import (
    AzureMarketplacePrivateOfferType,
)
from openapi_client.models.azure_marketplace_validation import (
    AzureMarketplaceValidation,
)


class AzureMarketplacePrivateOffer(BaseModel):
    """
    AzureMarketplacePrivateOffer
    """

    var_schema: Optional[StrictStr] = Field(None, alias="$schema")
    accept_by: Optional[datetime] = Field(
        None, alias="acceptBy", description="in format YYYY-MM-DD"
    )
    acceptance_links: Optional[
        conlist(AzureMarketplacePrivateOfferAcceptanceLink)
    ] = Field(None, alias="acceptanceLinks")
    beneficiaries: Optional[conlist(AzureMarketplacePrivateOfferBeneficiary)] = None
    e_tag: Optional[StrictStr] = Field(None, alias="eTag")
    end: Optional[datetime] = Field(None, description="in format YYYY-MM-DD")
    id: Optional[StrictStr] = Field(
        None, description='in format of "private-offer/private-offer-durable-id"'
    )
    last_modified: Optional[datetime] = Field(
        None, alias="lastModified", description="in format YYYY-MM-DD"
    )
    name: Optional[StrictStr] = None
    notification_contacts: Optional[conlist(StrictStr)] = Field(
        None,
        alias="notificationContacts",
        description="array of email addresses of the users to be notified of any changes in the private offer status.",
    )
    offer_pricing_type: Optional[AzureMarketplaceOfferPricingType] = Field(
        None, alias="offerPricingType"
    )
    partners: Optional[conlist(AzureMarketplacePrivateOfferPartner)] = None
    prepared_by: Optional[StrictStr] = Field(None, alias="preparedBy")
    pricing: Optional[conlist(AzureMarketplacePrivateOfferPricing)] = Field(
        None, description="Up to 10 pricing entries are allowed."
    )
    private_offer_type: Optional[AzureMarketplacePrivateOfferType] = Field(
        None, alias="privateOfferType"
    )
    resource_name: Optional[StrictStr] = Field(None, alias="resourceName")
    start: Optional[datetime] = Field(
        None,
        description="in format YYYY-MM-DD, if VariableStartDate = true, this field should be empty.",
    )
    state: Optional[AzureMarketplacePrivateOfferState] = None
    sub_state: Optional[AzureMarketplacePrivateOfferSubState] = Field(
        None, alias="subState"
    )
    terms_and_conditions_doc_sas_url: Optional[StrictStr] = Field(
        None,
        alias="termsAndConditionsDocSasUrl",
        description="Only applicable to private offers with privateOfferType = customerPromotion || cspPromotion",
    )
    terms_and_conditions_docs: Optional[
        conlist(AzureMarketplacePrivateOfferTermsDoc)
    ] = Field(
        None,
        alias="termsAndConditionsDocs",
        description="Only applicable to private offers with privateOfferType = multipartyPromotionOriginator || multipartyPromotionChannelPartner",
    )
    upgraded_from: Optional[AzureMarketplacePrivateOfferPromotionReference] = Field(
        None, alias="upgradedFrom"
    )
    validations: Optional[conlist(AzureMarketplaceValidation)] = None
    variable_start_date: Optional[StrictBool] = Field(None, alias="variableStartDate")
    __properties = [
        "$schema",
        "acceptBy",
        "acceptanceLinks",
        "beneficiaries",
        "eTag",
        "end",
        "id",
        "lastModified",
        "name",
        "notificationContacts",
        "offerPricingType",
        "partners",
        "preparedBy",
        "pricing",
        "privateOfferType",
        "resourceName",
        "start",
        "state",
        "subState",
        "termsAndConditionsDocSasUrl",
        "termsAndConditionsDocs",
        "upgradedFrom",
        "validations",
        "variableStartDate",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureMarketplacePrivateOffer:
        """Create an instance of AzureMarketplacePrivateOffer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in acceptance_links (list)
        _items = []
        if self.acceptance_links:
            for _item in self.acceptance_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict["acceptanceLinks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in beneficiaries (list)
        _items = []
        if self.beneficiaries:
            for _item in self.beneficiaries:
                if _item:
                    _items.append(_item.to_dict())
            _dict["beneficiaries"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in partners (list)
        _items = []
        if self.partners:
            for _item in self.partners:
                if _item:
                    _items.append(_item.to_dict())
            _dict["partners"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pricing (list)
        _items = []
        if self.pricing:
            for _item in self.pricing:
                if _item:
                    _items.append(_item.to_dict())
            _dict["pricing"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms_and_conditions_docs (list)
        _items = []
        if self.terms_and_conditions_docs:
            for _item in self.terms_and_conditions_docs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["termsAndConditionsDocs"] = _items
        # override the default output from pydantic by calling `to_dict()` of upgraded_from
        if self.upgraded_from:
            _dict["upgradedFrom"] = self.upgraded_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validations (list)
        _items = []
        if self.validations:
            for _item in self.validations:
                if _item:
                    _items.append(_item.to_dict())
            _dict["validations"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureMarketplacePrivateOffer:
        """Create an instance of AzureMarketplacePrivateOffer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AzureMarketplacePrivateOffer.parse_obj(obj)

        _obj = AzureMarketplacePrivateOffer.parse_obj(
            {
                "var_schema": obj.get("$schema"),
                "accept_by": obj.get("acceptBy"),
                "acceptance_links": [
                    AzureMarketplacePrivateOfferAcceptanceLink.from_dict(_item)
                    for _item in obj.get("acceptanceLinks")
                ]
                if obj.get("acceptanceLinks") is not None
                else None,
                "beneficiaries": [
                    AzureMarketplacePrivateOfferBeneficiary.from_dict(_item)
                    for _item in obj.get("beneficiaries")
                ]
                if obj.get("beneficiaries") is not None
                else None,
                "e_tag": obj.get("eTag"),
                "end": obj.get("end"),
                "id": obj.get("id"),
                "last_modified": obj.get("lastModified"),
                "name": obj.get("name"),
                "notification_contacts": obj.get("notificationContacts"),
                "offer_pricing_type": obj.get("offerPricingType"),
                "partners": [
                    AzureMarketplacePrivateOfferPartner.from_dict(_item)
                    for _item in obj.get("partners")
                ]
                if obj.get("partners") is not None
                else None,
                "prepared_by": obj.get("preparedBy"),
                "pricing": [
                    AzureMarketplacePrivateOfferPricing.from_dict(_item)
                    for _item in obj.get("pricing")
                ]
                if obj.get("pricing") is not None
                else None,
                "private_offer_type": obj.get("privateOfferType"),
                "resource_name": obj.get("resourceName"),
                "start": obj.get("start"),
                "state": obj.get("state"),
                "sub_state": obj.get("subState"),
                "terms_and_conditions_doc_sas_url": obj.get(
                    "termsAndConditionsDocSasUrl"
                ),
                "terms_and_conditions_docs": [
                    AzureMarketplacePrivateOfferTermsDoc.from_dict(_item)
                    for _item in obj.get("termsAndConditionsDocs")
                ]
                if obj.get("termsAndConditionsDocs") is not None
                else None,
                "upgraded_from": AzureMarketplacePrivateOfferPromotionReference.from_dict(
                    obj.get("upgradedFrom")
                )
                if obj.get("upgradedFrom") is not None
                else None,
                "validations": [
                    AzureMarketplaceValidation.from_dict(_item)
                    for _item in obj.get("validations")
                ]
                if obj.get("validations") is not None
                else None,
                "variable_start_date": obj.get("variableStartDate"),
            }
        )
        return _obj
