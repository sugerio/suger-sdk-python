# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.company_info import CompanyInfo
from openapi_client.models.gcp_marketplace_user_account_approval import (
    GcpMarketplaceUserAccountApproval,
)
from openapi_client.models.gcp_marketplace_user_account_state import (
    GcpMarketplaceUserAccountState,
)
from openapi_client.models.gcp_user_info import GcpUserInfo


class GcpMarketplaceUserAccount(BaseModel):
    """
    GcpMarketplaceUserAccount
    """

    approvals: Optional[conlist(GcpMarketplaceUserAccountApproval)] = Field(
        None,
        description="The approvals for this account, that are permitted or have been completed.",
    )
    billing_account_id: Optional[StrictStr] = Field(
        None,
        alias="billingAccountId",
        description="The buyer's GCP billing account ID.",
    )
    company_info: Optional[CompanyInfo] = Field(None, alias="companyInfo")
    create_time: Optional[datetime] = Field(
        None, alias="createTime", description="RFC3339 UTC timestamp"
    )
    id: Optional[StrictStr] = Field(
        None, description="GCP Marketplace User Account ID."
    )
    input_properties: Optional[conlist(StrictInt)] = Field(
        None, alias="inputProperties"
    )
    name: Optional[StrictStr] = Field(
        None,
        description="The resource name of the account. Account names have the form providers/{provider_id}/accounts/{account_id}.",
    )
    provider: Optional[StrictStr] = Field(
        None,
        description="The identifier of the service provider (SaaS Seller) that this account was created against.",
    )
    state: Optional[GcpMarketplaceUserAccountState] = None
    update_time: Optional[datetime] = Field(
        None, alias="updateTime", description="RFC3339 UTC timestamp"
    )
    user_info: Optional[GcpUserInfo] = Field(None, alias="userInfo")
    __properties = [
        "approvals",
        "billingAccountId",
        "companyInfo",
        "createTime",
        "id",
        "inputProperties",
        "name",
        "provider",
        "state",
        "updateTime",
        "userInfo",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GcpMarketplaceUserAccount:
        """Create an instance of GcpMarketplaceUserAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in approvals (list)
        _items = []
        if self.approvals:
            for _item in self.approvals:
                if _item:
                    _items.append(_item.to_dict())
            _dict["approvals"] = _items
        # override the default output from pydantic by calling `to_dict()` of company_info
        if self.company_info:
            _dict["companyInfo"] = self.company_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_info
        if self.user_info:
            _dict["userInfo"] = self.user_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GcpMarketplaceUserAccount:
        """Create an instance of GcpMarketplaceUserAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GcpMarketplaceUserAccount.parse_obj(obj)

        _obj = GcpMarketplaceUserAccount.parse_obj(
            {
                "approvals": [
                    GcpMarketplaceUserAccountApproval.from_dict(_item)
                    for _item in obj.get("approvals")
                ]
                if obj.get("approvals") is not None
                else None,
                "billing_account_id": obj.get("billingAccountId"),
                "company_info": CompanyInfo.from_dict(obj.get("companyInfo"))
                if obj.get("companyInfo") is not None
                else None,
                "create_time": obj.get("createTime"),
                "id": obj.get("id"),
                "input_properties": obj.get("inputProperties"),
                "name": obj.get("name"),
                "provider": obj.get("provider"),
                "state": obj.get("state"),
                "update_time": obj.get("updateTime"),
                "user_info": GcpUserInfo.from_dict(obj.get("userInfo"))
                if obj.get("userInfo") is not None
                else None,
            }
        )
        return _obj
