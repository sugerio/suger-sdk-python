# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.microsoft_partner_referral_invited_info import MicrosoftPartnerReferralInvitedInfo

class MicrosoftPartnerReferralInviteContext(BaseModel):
    """
    MicrosoftPartnerReferralInviteContext
    """
    assistance_request_code: Optional[StrictStr] = Field(None, alias="assistanceRequestCode")
    invited_by: Optional[MicrosoftPartnerReferralInvitedInfo] = Field(None, alias="invitedBy")
    invited_mpn_id: Optional[StrictStr] = Field(None, alias="invitedMpnId")
    notes: Optional[Dict[str, Any]] = None
    __properties = ["assistanceRequestCode", "invitedBy", "invitedMpnId", "notes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MicrosoftPartnerReferralInviteContext:
        """Create an instance of MicrosoftPartnerReferralInviteContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of invited_by
        if self.invited_by:
            _dict['invitedBy'] = self.invited_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MicrosoftPartnerReferralInviteContext:
        """Create an instance of MicrosoftPartnerReferralInviteContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MicrosoftPartnerReferralInviteContext.parse_obj(obj)

        _obj = MicrosoftPartnerReferralInviteContext.parse_obj({
            "assistance_request_code": obj.get("assistanceRequestCode"),
            "invited_by": MicrosoftPartnerReferralInvitedInfo.from_dict(obj.get("invitedBy")) if obj.get("invitedBy") is not None else None,
            "invited_mpn_id": obj.get("invitedMpnId"),
            "notes": obj.get("notes")
        })
        return _obj


