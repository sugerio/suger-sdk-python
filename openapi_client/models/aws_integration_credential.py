# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class AwsIntegrationCredential(BaseModel):
    """
    AwsIntegrationCredential
    """
    access_key_id: Optional[StrictStr] = Field(None, alias="accessKeyId", description="The access key ID of the IAM user for Suger service to access the client's AWS services.")
    iam_user_arn: Optional[StrictStr] = Field(None, alias="iamUserArn", description="The ARN of the IAM user for Suger service to access the client's AWS services.")
    secret_access_key: Optional[StrictStr] = Field(None, alias="secretAccessKey", description="The secret access key of the IAM user for Suger service to access the client's AWS services.")
    __properties = ["accessKeyId", "iamUserArn", "secretAccessKey"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AwsIntegrationCredential:
        """Create an instance of AwsIntegrationCredential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AwsIntegrationCredential:
        """Create an instance of AwsIntegrationCredential from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AwsIntegrationCredential.parse_obj(obj)

        _obj = AwsIntegrationCredential.parse_obj({
            "access_key_id": obj.get("accessKeyId"),
            "iam_user_arn": obj.get("iamUserArn"),
            "secret_access_key": obj.get("secretAccessKey")
        })
        return _obj


