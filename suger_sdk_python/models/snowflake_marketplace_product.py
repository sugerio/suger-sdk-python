# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from suger_sdk_python.models.snowflake_marketplace_product_default_pricing_plan import SnowflakeMarketplaceProductDefaultPricingPlan
from suger_sdk_python.models.snowflake_marketplace_product_detailed_target_account import SnowflakeMarketplaceProductDetailedTargetAccount
from suger_sdk_python.models.snowflake_marketplace_product_metadata import SnowflakeMarketplaceProductMetadata
from suger_sdk_python.models.snowflake_marketplace_product_pricing_plan import SnowflakeMarketplaceProductPricingPlan
from suger_sdk_python.models.snowflake_marketplace_trial_details import SnowflakeMarketplaceTrialDetails
from typing import Optional, Set
from typing_extensions import Self

class SnowflakeMarketplaceProduct(BaseModel):
    """
    SnowflakeMarketplaceProduct
    """ # noqa: E501
    additional_regions: Optional[StrictStr] = Field(default=None, alias="additionalRegions")
    application_package_name: Optional[StrictStr] = Field(default=None, alias="applicationPackageName")
    attached_share: Optional[StrictStr] = Field(default=None, alias="attachedShare")
    autofulfillment: Optional[StrictBool] = None
    comment: Optional[StrictStr] = None
    created_on: Optional[StrictStr] = Field(default=None, alias="createdOn")
    customized_contact_info: Optional[StrictStr] = Field(default=None, alias="customizedContactInfo")
    default_pricing_plan: Optional[SnowflakeMarketplaceProductDefaultPricingPlan] = Field(default=None, alias="defaultPricingPlan")
    detailed_target_accounts: Optional[List[SnowflakeMarketplaceProductDetailedTargetAccount]] = Field(default=None, alias="detailedTargetAccounts")
    distribution: Optional[StrictStr] = None
    evaluation_plan: Optional[StrictStr] = Field(default=None, alias="evaluationPlan")
    first_published_on: Optional[StrictStr] = Field(default=None, alias="firstPublishedOn")
    flags: Optional[StrictStr] = None
    fulfillment_type: Optional[StrictStr] = Field(default=None, alias="fulfillmentType")
    global_name: Optional[StrictStr] = Field(default=None, alias="globalName")
    is_mountless_queryable: Optional[StrictBool] = Field(default=None, alias="isMountlessQueryable")
    last_approved_on: Optional[StrictStr] = Field(default=None, alias="lastApprovedOn")
    last_published_on: Optional[StrictStr] = Field(default=None, alias="lastPublishedOn")
    last_submitted_on: Optional[StrictStr] = Field(default=None, alias="lastSubmittedOn")
    listing_type: Optional[StrictStr] = Field(default=None, alias="listingType")
    metadata: Optional[SnowflakeMarketplaceProductMetadata] = None
    name: Optional[StrictStr] = None
    pricing_plans: Optional[List[SnowflakeMarketplaceProductPricingPlan]] = Field(default=None, alias="pricingPlans")
    private: Optional[StrictBool] = None
    profile_name: Optional[StrictStr] = Field(default=None, alias="profileName")
    publish_on_approval: Optional[StrictBool] = Field(default=None, alias="publishOnApproval")
    regions: Optional[StrictStr] = None
    rejected_on: Optional[StrictStr] = Field(default=None, alias="rejectedOn")
    rejected_reason: Optional[StrictStr] = Field(default=None, alias="rejectedReason")
    replication_schedule: Optional[StrictStr] = Field(default=None, alias="replicationSchedule")
    retired_on: Optional[StrictStr] = Field(default=None, alias="retiredOn")
    scheduled_drop_time: Optional[StrictStr] = Field(default=None, alias="scheduledDropTime")
    share_type: Optional[StrictStr] = Field(default=None, alias="shareType")
    state: Optional[StrictStr] = None
    target_accounts: Optional[StrictStr] = Field(default=None, alias="targetAccounts")
    trial_details: Optional[SnowflakeMarketplaceTrialDetails] = Field(default=None, alias="trialDetails")
    unpublished_by_admin_reason: Optional[StrictStr] = Field(default=None, alias="unpublishedByAdminReason")
    updated_on: Optional[StrictStr] = Field(default=None, alias="updatedOn")
    __properties: ClassVar[List[str]] = ["additionalRegions", "applicationPackageName", "attachedShare", "autofulfillment", "comment", "createdOn", "customizedContactInfo", "defaultPricingPlan", "detailedTargetAccounts", "distribution", "evaluationPlan", "firstPublishedOn", "flags", "fulfillmentType", "globalName", "isMountlessQueryable", "lastApprovedOn", "lastPublishedOn", "lastSubmittedOn", "listingType", "metadata", "name", "pricingPlans", "private", "profileName", "publishOnApproval", "regions", "rejectedOn", "rejectedReason", "replicationSchedule", "retiredOn", "scheduledDropTime", "shareType", "state", "targetAccounts", "trialDetails", "unpublishedByAdminReason", "updatedOn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnowflakeMarketplaceProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_pricing_plan
        if self.default_pricing_plan:
            _dict['defaultPricingPlan'] = self.default_pricing_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in detailed_target_accounts (list)
        _items = []
        if self.detailed_target_accounts:
            for _item_detailed_target_accounts in self.detailed_target_accounts:
                if _item_detailed_target_accounts:
                    _items.append(_item_detailed_target_accounts.to_dict())
            _dict['detailedTargetAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pricing_plans (list)
        _items = []
        if self.pricing_plans:
            for _item_pricing_plans in self.pricing_plans:
                if _item_pricing_plans:
                    _items.append(_item_pricing_plans.to_dict())
            _dict['pricingPlans'] = _items
        # override the default output from pydantic by calling `to_dict()` of trial_details
        if self.trial_details:
            _dict['trialDetails'] = self.trial_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnowflakeMarketplaceProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalRegions": obj.get("additionalRegions"),
            "applicationPackageName": obj.get("applicationPackageName"),
            "attachedShare": obj.get("attachedShare"),
            "autofulfillment": obj.get("autofulfillment"),
            "comment": obj.get("comment"),
            "createdOn": obj.get("createdOn"),
            "customizedContactInfo": obj.get("customizedContactInfo"),
            "defaultPricingPlan": SnowflakeMarketplaceProductDefaultPricingPlan.from_dict(obj["defaultPricingPlan"]) if obj.get("defaultPricingPlan") is not None else None,
            "detailedTargetAccounts": [SnowflakeMarketplaceProductDetailedTargetAccount.from_dict(_item) for _item in obj["detailedTargetAccounts"]] if obj.get("detailedTargetAccounts") is not None else None,
            "distribution": obj.get("distribution"),
            "evaluationPlan": obj.get("evaluationPlan"),
            "firstPublishedOn": obj.get("firstPublishedOn"),
            "flags": obj.get("flags"),
            "fulfillmentType": obj.get("fulfillmentType"),
            "globalName": obj.get("globalName"),
            "isMountlessQueryable": obj.get("isMountlessQueryable"),
            "lastApprovedOn": obj.get("lastApprovedOn"),
            "lastPublishedOn": obj.get("lastPublishedOn"),
            "lastSubmittedOn": obj.get("lastSubmittedOn"),
            "listingType": obj.get("listingType"),
            "metadata": SnowflakeMarketplaceProductMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "pricingPlans": [SnowflakeMarketplaceProductPricingPlan.from_dict(_item) for _item in obj["pricingPlans"]] if obj.get("pricingPlans") is not None else None,
            "private": obj.get("private"),
            "profileName": obj.get("profileName"),
            "publishOnApproval": obj.get("publishOnApproval"),
            "regions": obj.get("regions"),
            "rejectedOn": obj.get("rejectedOn"),
            "rejectedReason": obj.get("rejectedReason"),
            "replicationSchedule": obj.get("replicationSchedule"),
            "retiredOn": obj.get("retiredOn"),
            "scheduledDropTime": obj.get("scheduledDropTime"),
            "shareType": obj.get("shareType"),
            "state": obj.get("state"),
            "targetAccounts": obj.get("targetAccounts"),
            "trialDetails": SnowflakeMarketplaceTrialDetails.from_dict(obj["trialDetails"]) if obj.get("trialDetails") is not None else None,
            "unpublishedByAdminReason": obj.get("unpublishedByAdminReason"),
            "updatedOn": obj.get("updatedOn")
        })
        return _obj


