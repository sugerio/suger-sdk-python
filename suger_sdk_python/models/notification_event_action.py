# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class NotificationEventAction(str, Enum):
    """
    NotificationEventAction
    """

    """
    allowed enum values
    """
    NotificationEventAction_UNKNOWN = ''
    NotificationEventAction_ABNORMAL_ALERT = 'ABNORMAL_ALERT'
    NotificationEventAction_ACCEPT = 'ACCEPT'
    NotificationEventAction_ADD = 'ADD'
    NotificationEventAction_APPROVE = 'APPROVE'
    NotificationEventAction_CANCEL = 'CANCEL'
    NotificationEventAction_CLOSE = 'CLOSE'
    NotificationEventAction_CREATE = 'CREATE'
    NotificationEventAction_DELETE = 'DELETE'
    NotificationEventAction_ARCHIVE = 'ARCHIVE'
    NotificationEventAction_DISBURSE = 'DISBURSE'
    NotificationEventAction_END_SOON = 'END_SOON'
    NotificationEventAction_EXPIRE = 'EXPIRE'
    NotificationEventAction_EXPIRE_SOON = 'EXPIRE_SOON'
    NotificationEventAction_MERGE = 'MERGE'
    NotificationEventAction_METER = 'METER'
    NotificationEventAction_NEW_CLIENT_SIGNUP = 'NEW_CLIENT_SIGNUP'
    NotificationEventAction_NOTIFY = 'NOTIFY'
    NotificationEventAction_NOTIFY_CONTACTS = 'NOTIFY_CONTACTS'
    NotificationEventAction_OPEN_EMAIL = 'OPEN_EMAIL'
    NotificationEventAction_PENDING_CANCEL = 'PENDING_CANCEL'
    NotificationEventAction_PENDING_ACCEPTANCE = 'PENDING_ACCEPTANCE'
    NotificationEventAction_REINSTATE = 'REINSTATE'
    NotificationEventAction_REJECT = 'REJECT'
    NotificationEventAction_REOPEN = 'REOPEN'
    NotificationEventAction_CHARGE = 'CHARGE'
    NotificationEventAction_REFUND = 'REFUND'
    NotificationEventAction_ISSUE = 'ISSUE'
    NotificationEventAction_SIGN = 'SIGN'
    NotificationEventAction_ROTATE_SECRET = 'ROTATE_SECRET'
    NotificationEventAction_SUSPEND = 'SUSPEND'
    NotificationEventAction_TEST = 'TEST'
    NotificationEventAction_UPDATE = 'UPDATE'
    NotificationEventAction_ACE_ENGAGEMENT_SCORE_UPDATE = 'ACE_ENGAGEMENT_SCORE_UPDATE'
    NotificationEventAction_ACE_SALES_REP_UPDATE = 'ACE_SALES_REP_UPDATE'
    NotificationEventAction_ACE_CUSTOMER_EMAIL_UPDATE = 'ACE_CUSTOMER_EMAIL_UPDATE'
    NotificationEventAction_AZURE_STATUS_UPDATE = 'AZURE_STATUS_UPDATE'
    NotificationEventAction_SUBMIT_APPROVAL_REQUEST = 'SUBMIT_APPROVAL_REQUEST'
    NotificationEventAction_REVIEW_APPROVAL_REQUEST = 'REVIEW_APPROVAL_REQUEST'
    NotificationEventAction_COMPLETE = 'COMPLETE'
    NotificationEventAction_FAIL = 'FAIL'
    NotificationEventAction_WEBHOOK = 'WEBHOOK'
    NotificationEventAction_MARKETPLACE_CONTACT_EMAIL_UPDATE = 'MARKETPLACE_CONTACT_EMAIL_UPDATE'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NotificationEventAction from a JSON string"""
        return cls(json.loads(json_str))


