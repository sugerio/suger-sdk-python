# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from suger_sdk_python.models.snowflake_marketplace_pricing_plan_usage_details import SnowflakeMarketplacePricingPlanUsageDetails
from typing import Optional, Set
from typing_extensions import Self

class SnowflakeMarketplaceProductPricingPlan(BaseModel):
    """
    SnowflakeMarketplaceProductPricingPlan
    """ # noqa: E501
    base_fee: Optional[Union[StrictFloat, StrictInt]] = None
    billing_duration_months: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    contract_duration_months: Optional[StrictStr] = None
    contract_type: Optional[StrictStr] = Field(default=None, description="PAY_AS_YOU_GO, LIMITED_TIME")
    currency: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="For pricing display purpose. eg: {\"price\":\"10\",\"button_text\":\"starter plan\"}")
    name: Optional[StrictStr] = None
    pricing_model: Optional[StrictStr] = Field(default=None, description="pricing model: USAGE_BASED, FLAT_FEE")
    sales_motion: Optional[StrictStr] = Field(default=None, description="SELF_SERVE, PROACTIVE")
    state: Optional[StrictStr] = Field(default=None, description="state of pricing plan")
    updated_on: Optional[StrictStr] = None
    usage_details: Optional[SnowflakeMarketplacePricingPlanUsageDetails] = None
    visibility: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["base_fee", "billing_duration_months", "comment", "contract_duration_months", "contract_type", "currency", "display_name", "metadata", "name", "pricing_model", "sales_motion", "state", "updated_on", "usage_details", "visibility"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnowflakeMarketplaceProductPricingPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of usage_details
        if self.usage_details:
            _dict['usage_details'] = self.usage_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnowflakeMarketplaceProductPricingPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_fee": obj.get("base_fee"),
            "billing_duration_months": obj.get("billing_duration_months"),
            "comment": obj.get("comment"),
            "contract_duration_months": obj.get("contract_duration_months"),
            "contract_type": obj.get("contract_type"),
            "currency": obj.get("currency"),
            "display_name": obj.get("display_name"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "pricing_model": obj.get("pricing_model"),
            "sales_motion": obj.get("sales_motion"),
            "state": obj.get("state"),
            "updated_on": obj.get("updated_on"),
            "usage_details": SnowflakeMarketplacePricingPlanUsageDetails.from_dict(obj["usage_details"]) if obj.get("usage_details") is not None else None,
            "visibility": obj.get("visibility")
        })
        return _obj


