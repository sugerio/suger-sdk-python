# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from suger_sdk_python.models.snowflake_marketplace_plan_installment_schedule import SnowflakeMarketplacePlanInstallmentSchedule
from typing import Optional, Set
from typing_extensions import Self

class SnowflakeMarketplaceProductDefaultPricingPlan(BaseModel):
    """
    SnowflakeMarketplaceProductDefaultPricingPlan
    """ # noqa: E501
    allow_early_access: Optional[StrictBool] = Field(default=None, description="If true, consumers can access the listing before making a payment. You'll need to remind them to pay.")
    base_fee: Optional[Union[StrictFloat, StrictInt]] = None
    billing_duration: Optional[StrictInt] = None
    currency: Optional[StrictStr] = None
    free_unit_kind: Optional[StrictStr] = None
    free_units: Optional[Union[StrictFloat, StrictInt]] = None
    installment_schedule: Optional[SnowflakeMarketplacePlanInstallmentSchedule] = None
    is_auto_renewable: Optional[StrictBool] = Field(default=None, description="IsAutoRenewable is true if the product is auto renewable.")
    max_fee: Optional[Union[StrictFloat, StrictInt]] = None
    payment_type: Optional[StrictStr] = None
    trial_usage_limit: Optional[Union[StrictFloat, StrictInt]] = None
    trial_usage_unit: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    usage_unit_kind: Optional[StrictStr] = None
    usage_unit_price: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["allow_early_access", "base_fee", "billing_duration", "currency", "free_unit_kind", "free_units", "installment_schedule", "is_auto_renewable", "max_fee", "payment_type", "trial_usage_limit", "trial_usage_unit", "type", "usage_unit_kind", "usage_unit_price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnowflakeMarketplaceProductDefaultPricingPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of installment_schedule
        if self.installment_schedule:
            _dict['installment_schedule'] = self.installment_schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnowflakeMarketplaceProductDefaultPricingPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_early_access": obj.get("allow_early_access"),
            "base_fee": obj.get("base_fee"),
            "billing_duration": obj.get("billing_duration"),
            "currency": obj.get("currency"),
            "free_unit_kind": obj.get("free_unit_kind"),
            "free_units": obj.get("free_units"),
            "installment_schedule": SnowflakeMarketplacePlanInstallmentSchedule.from_dict(obj["installment_schedule"]) if obj.get("installment_schedule") is not None else None,
            "is_auto_renewable": obj.get("is_auto_renewable"),
            "max_fee": obj.get("max_fee"),
            "payment_type": obj.get("payment_type"),
            "trial_usage_limit": obj.get("trial_usage_limit"),
            "trial_usage_unit": obj.get("trial_usage_unit"),
            "type": obj.get("type"),
            "usage_unit_kind": obj.get("usage_unit_kind"),
            "usage_unit_price": obj.get("usage_unit_price")
        })
        return _obj


