# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from suger_sdk_python.models.snowflake_marketplace_offer_payment_terms import SnowflakeMarketplaceOfferPaymentTerms
from suger_sdk_python.models.snowflake_marketplace_offer_terms_of_service import SnowflakeMarketplaceOfferTermsOfService
from typing import Optional, Set
from typing_extensions import Self

class SnowflakeMarketplaceOffer(BaseModel):
    """
    SnowflakeMarketplaceOffer
    """ # noqa: E501
    access_end_time: Optional[StrictStr] = None
    access_start_date_preference: Optional[StrictStr] = None
    access_start_time: Optional[StrictStr] = None
    additional_information: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    contract_duration_months: Optional[StrictInt] = None
    contract_type: Optional[StrictStr] = None
    contract_value: Optional[StrictStr] = None
    discount: Optional[Union[StrictFloat, StrictInt]] = None
    display_name: Optional[StrictStr] = None
    expiration_time: Optional[StrictStr] = None
    invoice_start_date_preference: Optional[StrictStr] = Field(default=None, description="invoice start date preference: FIRST_DAY_NEXT_MONTH, OFFER_ACCEPTED_DATE")
    invoice_start_time: Optional[StrictStr] = None
    is_default: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    payment_terms: Optional[SnowflakeMarketplaceOfferPaymentTerms] = None
    pricing_plan_name: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    state_updated_on: Optional[StrictStr] = None
    target_consumer: Optional[StrictStr] = None
    terms_of_service: Optional[SnowflakeMarketplaceOfferTermsOfService] = Field(default=None, description="terms of service: {\"type\":\"DEFAULT\"}")
    updated_on: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["access_end_time", "access_start_date_preference", "access_start_time", "additional_information", "comment", "contract_duration_months", "contract_type", "contract_value", "discount", "display_name", "expiration_time", "invoice_start_date_preference", "invoice_start_time", "is_default", "name", "payment_terms", "pricing_plan_name", "state", "state_updated_on", "target_consumer", "terms_of_service", "updated_on"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnowflakeMarketplaceOffer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_terms
        if self.payment_terms:
            _dict['payment_terms'] = self.payment_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms_of_service
        if self.terms_of_service:
            _dict['terms_of_service'] = self.terms_of_service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnowflakeMarketplaceOffer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_end_time": obj.get("access_end_time"),
            "access_start_date_preference": obj.get("access_start_date_preference"),
            "access_start_time": obj.get("access_start_time"),
            "additional_information": obj.get("additional_information"),
            "comment": obj.get("comment"),
            "contract_duration_months": obj.get("contract_duration_months"),
            "contract_type": obj.get("contract_type"),
            "contract_value": obj.get("contract_value"),
            "discount": obj.get("discount"),
            "display_name": obj.get("display_name"),
            "expiration_time": obj.get("expiration_time"),
            "invoice_start_date_preference": obj.get("invoice_start_date_preference"),
            "invoice_start_time": obj.get("invoice_start_time"),
            "is_default": obj.get("is_default"),
            "name": obj.get("name"),
            "payment_terms": SnowflakeMarketplaceOfferPaymentTerms.from_dict(obj["payment_terms"]) if obj.get("payment_terms") is not None else None,
            "pricing_plan_name": obj.get("pricing_plan_name"),
            "state": obj.get("state"),
            "state_updated_on": obj.get("state_updated_on"),
            "target_consumer": obj.get("target_consumer"),
            "terms_of_service": SnowflakeMarketplaceOfferTermsOfService.from_dict(obj["terms_of_service"]) if obj.get("terms_of_service") is not None else None,
            "updated_on": obj.get("updated_on")
        })
        return _obj


