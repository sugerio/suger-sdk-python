# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from suger_sdk_python.models.github_com_sugerio_marketplace_service_pkg_legacy_rds_db_lib_billing_aws_billing_event import GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingAwsBillingEvent
from suger_sdk_python.models.github_com_sugerio_marketplace_service_pkg_legacy_rds_db_lib_billing_azure_cma_revenue import GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingAzureCmaRevenue
from suger_sdk_python.models.github_com_sugerio_marketplace_service_pkg_legacy_rds_db_lib_billing_gcp_charge_usage import GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingGcpChargeUsage
from suger_sdk_python.models.revenue_billing_model import RevenueBillingModel
from suger_sdk_python.models.revenue_channel import RevenueChannel
from typing import Optional, Set
from typing_extensions import Self

class RevenueRecordInfo(BaseModel):
    """
    RevenueRecordInfo
    """ # noqa: E501
    aws_revenue_records: Optional[List[GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingAwsBillingEvent]] = Field(default=None, description="For raw revenue records in AWS Marketplace", alias="awsRevenueRecords")
    azure_revenue_records: Optional[List[GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingAzureCmaRevenue]] = Field(default=None, description="For raw revenue records in Azure Marketplace", alias="azureRevenueRecords")
    bank_trace_id: Optional[StrictStr] = Field(default=None, description="The bank trace ID of the revenue record if applicable", alias="bankTraceId")
    billing_model: Optional[RevenueBillingModel] = Field(default=None, description="The billing model of the revenue record if applicable The value is one of the following: - SubscriptionBased: The revenue record is from a subscription or recurring commitment. - UsageBased: The revenue record is from a usage-based metering.", alias="billingModel")
    channel: Optional[RevenueChannel] = Field(default=None, description="The channel of revenue record.")
    credit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The credit amount used in the revenue record.", alias="creditAmount")
    disbursement_billing_event_id: Optional[StrictStr] = Field(default=None, description="The disbursement ID of the revenue record if applicable", alias="disbursementBillingEventId")
    disbursement_notification_sent: Optional[StrictBool] = Field(default=None, description="Whether the disbursement notification has been sent to the seller/ISV.", alias="disbursementNotificationSent")
    earning_id: Optional[StrictStr] = Field(default=None, description="The earning ID of the revenue record if applicable", alias="earningId")
    gcp_revenue_records: Optional[List[GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingGcpChargeUsage]] = Field(default=None, description="For raw revenue records in GCP Marketplace", alias="gcpRevenueRecords")
    id_source: Optional[StrictStr] = Field(default=None, description="Source of the revenue record ID.", alias="idSource")
    invoice_id: Optional[StrictStr] = Field(default=None, description="The invoice ID of the revenue record if applicable", alias="invoiceId")
    payment_id: Optional[StrictStr] = Field(default=None, description="The payment  ID of the revenue record if applicable", alias="paymentId")
    reseller_id: Optional[StrictStr] = Field(default=None, description="The reseller ID of the revenue record if applicable", alias="resellerId")
    reseller_name: Optional[StrictStr] = Field(default=None, description="The reseller name of the revenue record if application", alias="resellerName")
    resource: Optional[StrictStr] = Field(default=None, description="Resource name for the revenue record. Applicable only to GCP Marketplace.")
    __properties: ClassVar[List[str]] = ["awsRevenueRecords", "azureRevenueRecords", "bankTraceId", "billingModel", "channel", "creditAmount", "disbursementBillingEventId", "disbursementNotificationSent", "earningId", "gcpRevenueRecords", "idSource", "invoiceId", "paymentId", "resellerId", "resellerName", "resource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RevenueRecordInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aws_revenue_records (list)
        _items = []
        if self.aws_revenue_records:
            for _item_aws_revenue_records in self.aws_revenue_records:
                if _item_aws_revenue_records:
                    _items.append(_item_aws_revenue_records.to_dict())
            _dict['awsRevenueRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in azure_revenue_records (list)
        _items = []
        if self.azure_revenue_records:
            for _item_azure_revenue_records in self.azure_revenue_records:
                if _item_azure_revenue_records:
                    _items.append(_item_azure_revenue_records.to_dict())
            _dict['azureRevenueRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gcp_revenue_records (list)
        _items = []
        if self.gcp_revenue_records:
            for _item_gcp_revenue_records in self.gcp_revenue_records:
                if _item_gcp_revenue_records:
                    _items.append(_item_gcp_revenue_records.to_dict())
            _dict['gcpRevenueRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RevenueRecordInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsRevenueRecords": [GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingAwsBillingEvent.from_dict(_item) for _item in obj["awsRevenueRecords"]] if obj.get("awsRevenueRecords") is not None else None,
            "azureRevenueRecords": [GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingAzureCmaRevenue.from_dict(_item) for _item in obj["azureRevenueRecords"]] if obj.get("azureRevenueRecords") is not None else None,
            "bankTraceId": obj.get("bankTraceId"),
            "billingModel": obj.get("billingModel"),
            "channel": obj.get("channel"),
            "creditAmount": obj.get("creditAmount"),
            "disbursementBillingEventId": obj.get("disbursementBillingEventId"),
            "disbursementNotificationSent": obj.get("disbursementNotificationSent"),
            "earningId": obj.get("earningId"),
            "gcpRevenueRecords": [GithubComSugerioMarketplaceServicePkgLegacyRdsDbLibBillingGcpChargeUsage.from_dict(_item) for _item in obj["gcpRevenueRecords"]] if obj.get("gcpRevenueRecords") is not None else None,
            "idSource": obj.get("idSource"),
            "invoiceId": obj.get("invoiceId"),
            "paymentId": obj.get("paymentId"),
            "resellerId": obj.get("resellerId"),
            "resellerName": obj.get("resellerName"),
            "resource": obj.get("resource")
        })
        return _obj


