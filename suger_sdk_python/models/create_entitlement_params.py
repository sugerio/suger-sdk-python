# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateEntitlementParams(BaseModel):
    """
    CreateEntitlementParams
    """ # noqa: E501
    buyer_id: Optional[StrictStr] = Field(default=None, alias="buyerId")
    end_date: Optional[StrictStr] = Field(default=None, description="The end date of the entitlement. If it is null, the entitlement will ends based on the offer. If it is in the past, the entitlement will be created as CANCELLED status.", alias="endDate")
    offer_id: Optional[StrictStr] = Field(default=None, alias="offerId")
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    start_date: Optional[StrictStr] = Field(default=None, description="The start date of the entitlement. If it is null, the entitlement starts immediately. It can be in the future or in the past.", alias="startDate")
    __properties: ClassVar[List[str]] = ["buyerId", "endDate", "offerId", "organizationId", "startDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateEntitlementParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateEntitlementParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buyerId": obj.get("buyerId"),
            "endDate": obj.get("endDate"),
            "offerId": obj.get("offerId"),
            "organizationId": obj.get("organizationId"),
            "startDate": obj.get("startDate")
        })
        return _obj


