# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.billable_dimension import BillableDimension

class TestBillableDimension(unittest.TestCase):
    """BillableDimension unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillableDimension:
        """Test BillableDimension
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillableDimension`
        """
        model = BillableDimension()
        if include_optional:
            return BillableDimension(
                billable_metric_id = '',
                category = 'basic',
                description = '',
                discount = {"discountType":"PERCENTAGE","value":1.4658129805029452},
                length = 56,
                minimum_commit = 1.337,
                minimum_commit_prorata = True,
                minimum_commit_scope = '',
                name = '',
                price_model_basic = suger_sdk_python.models.price_model_basic.PriceModelBasic(
                    unit_amount = 1.337, ),
                price_model_bulk = suger_sdk_python.models.price_model_bulk.PriceModelBulk(
                    bulk_amount = 1.337, 
                    bulk_size = 56, ),
                price_model_matrix = suger_sdk_python.models.price_model_matrix.PriceModelMatrix(
                    default_unit_amount = 1.337, 
                    matrix = [
                        suger_sdk_python.models.price_model_matrix_config_group.PriceModelMatrixConfigGroup(
                            properties = [
                                suger_sdk_python.models.price_model_matrix_property.PriceModelMatrixProperty(
                                    name = '', 
                                    value = '', )
                                ], 
                            unit_amount = 1.337, )
                        ], ),
                price_model_percentage = suger_sdk_python.models.price_model_percentage.PriceModelPercentage(
                    flat_fee = 1.337, 
                    percentage_rate = 1.337, ),
                price_model_tiered = suger_sdk_python.models.price_model_tiered.PriceModelTiered(
                    tiers = [
                        suger_sdk_python.models.price_model_tiered_config.PriceModelTieredConfig(
                            first_unit = 1.337, 
                            flat_fee = 1.337, 
                            last_unit = 1.337, 
                            unit_amount = 1.337, )
                        ], ),
                price_model_tiered_percentage = suger_sdk_python.models.price_model_tiered_percentage.PriceModelTieredPercentage(
                    tiers = [
                        suger_sdk_python.models.price_model_tiered_percentage_config.PriceModelTieredPercentageConfig(
                            first_unit = 1.337, 
                            flat_fee = 1.337, 
                            last_unit = 1.337, 
                            percentage_rate = 1.337, )
                        ], ),
                price_model_volume = suger_sdk_python.models.price_model_volume.PriceModelVolume(
                    tiers = [
                        suger_sdk_python.models.price_model_volume_config.PriceModelVolumeConfig(
                            flat_fee = 1.337, 
                            maximum_units = 1.337, 
                            unit_amount = 1.337, )
                        ], ),
                time_unit = 'DAY'
            )
        else:
            return BillableDimension(
        )
        """

    def testBillableDimension(self):
        """Test BillableDimension"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
