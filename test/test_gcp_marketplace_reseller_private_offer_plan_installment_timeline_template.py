# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.gcp_marketplace_reseller_private_offer_plan_installment_timeline_template import GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate

class TestGcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate(unittest.TestCase):
    """GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate:
        """Test GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate`
        """
        model = GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate()
        if include_optional:
            return GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate(
                installment_templates = [
                    {"priceModelTemplate":{"baseOffer":"baseOffer","commitment":{"commitmentAmountPerPeriodTemplate":{"decimalAmountConstraint":{"minAmount":{"nanos":1,"units":"units"},"defaultAmount":{"nanos":1,"units":"units"},"maxAmount":{"nanos":1,"units":"units"}},"currencyCode":"currencyCode"},"period":{"unit":"MONTHLY_PERIOD","count":4},"discountTemplate":{"discountPercentage":{"minAmount":{"nanos":1,"units":"units"},"defaultAmount":{"nanos":1,"units":"units"},"maxAmount":{"nanos":1,"units":"units"}},"discountEconomics":"discountEconomics","hideDiscountPercentage":true,"discountedPrice":{"nanos":1,"units":"units","currencyCode":"currencyCode"}}},"consumption":"overage","payg":{"period":{"unit":"MONTHLY_PERIOD","count":4},"discountTemplate":{"discountPercentage":{"minAmount":{"nanos":1,"units":"units"},"defaultAmount":{"nanos":1,"units":"units"},"maxAmount":{"nanos":1,"units":"units"}},"discountEconomics":"discountEconomics","hideDiscountPercentage":true,"discountedPrice":{"nanos":1,"units":"units","currencyCode":"currencyCode"}},"skuDiscountTemplates":["{}","{}"],"skuRepresentation":{"skuList":{"skus":["skus","skus"]},"skus":"skus","skuGroupList":"{}"}},"subscription":"fixedPrice","fixedPrice":{"period":{"unit":"MONTHLY_PERIOD","count":4},"discountTemplate":{"discountPercentage":{"minAmount":{"nanos":1,"units":"units"},"defaultAmount":{"nanos":1,"units":"units"},"maxAmount":{"nanos":1,"units":"units"}},"discountEconomics":"discountEconomics","hideDiscountPercentage":true,"discountedPrice":{"nanos":1,"units":"units","currencyCode":"currencyCode"}}},"overage":{"discountTemplate":{"discountPercentage":{"minAmount":{"nanos":1,"units":"units"},"defaultAmount":{"nanos":1,"units":"units"},"maxAmount":{"nanos":1,"units":"units"}},"discountEconomics":"discountEconomics","hideDiscountPercentage":true,"discountedPrice":{"nanos":1,"units":"units","currencyCode":"currencyCode"}},"skuDiscountTemplates":["{}","{}"],"skuRepresentation":{"skuList":{"skus":["skus","skus"]},"skus":"skus","skuGroupList":"{}"}}},"startTime":"2000-01-23T04:56:07.000+00:00"}
                    ]
            )
        else:
            return GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate(
        )
        """

    def testGcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate(self):
        """Test GcpMarketplaceResellerPrivateOfferPlanInstallmentTimelineTemplate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
