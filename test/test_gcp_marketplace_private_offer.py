# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.gcp_marketplace_private_offer import (
    GcpMarketplacePrivateOffer,
)  # noqa: E501


class TestGcpMarketplacePrivateOffer(unittest.TestCase):
    """GcpMarketplacePrivateOffer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GcpMarketplacePrivateOffer:
        """Test GcpMarketplacePrivateOffer
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `GcpMarketplacePrivateOffer`
        """
        model = GcpMarketplacePrivateOffer()  # noqa: E501
        if include_optional:
            return GcpMarketplacePrivateOffer(
                active_entitlement = openapi_client.models.gcp_marketplace_entitlement.GcpMarketplaceEntitlement(
                    account = '', 
                    consumers = [
                        openapi_client.models.gcp_marketplace_consumer.GcpMarketplaceConsumer(
                            project = '', )
                        ], 
                    create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    input_properties = [
                        56
                        ], 
                    message_to_user = '', 
                    name = '', 
                    new_offer_duration = '', 
                    new_offer_end_time = '', 
                    new_offer_start_time = '', 
                    new_pending_offer = '', 
                    new_pending_offer_duration = '', 
                    new_pending_plan = '', 
                    new_plan = '', 
                    offer = '', 
                    offer_duration = '', 
                    offer_effective_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    offer_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    plan = '', 
                    product = '', 
                    product_external_name = '', 
                    provider = '', 
                    quote_external_name = '', 
                    state = openapi_client.models.state.state(), 
                    subscription_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    usage_reporting_id = '', ),
                agency_enabled = True,
                agreement = '',
                cancel_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                custom_eula = openapi_client.models.gcp_marketplace_document.GcpMarketplaceDocument(
                    description = '', 
                    document_type = '', 
                    external_google_link = openapi_client.models.external_google_link.externalGoogleLink(), 
                    name = '', 
                    unstructured_document = openapi_client.models.gcp_marketplace_unstructured_document.GcpMarketplaceUnstructuredDocument(
                        content = '', ), 
                    update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                customer_info = openapi_client.models.gcp_marketplace_private_offer_customer_info.GcpMarketplacePrivateOfferCustomerInfo(
                    address = '', 
                    contact = '', 
                    email = '', 
                    organization = '', 
                    unverified_billing_account = '', ),
                eula_agreement_document = openapi_client.models.gcp_marketplace_document.GcpMarketplaceDocument(
                    description = '', 
                    document_type = '', 
                    external_google_link = openapi_client.models.external_google_link.externalGoogleLink(), 
                    name = '', 
                    unstructured_document = openapi_client.models.gcp_marketplace_unstructured_document.GcpMarketplaceUnstructuredDocument(
                        content = '', ), 
                    update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                existing_offer_data = openapi_client.models.gcp_marketplace_existing_offer_data.GcpMarketplaceExistingOfferData(
                    entitlement = openapi_client.models.gcp_marketplace_entitlement.GcpMarketplaceEntitlement(
                        account = '', 
                        consumers = [
                            openapi_client.models.gcp_marketplace_consumer.GcpMarketplaceConsumer(
                                project = '', )
                            ], 
                        create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        input_properties = [
                            56
                            ], 
                        message_to_user = '', 
                        name = '', 
                        new_offer_duration = '', 
                        new_offer_end_time = '', 
                        new_offer_start_time = '', 
                        new_pending_offer = '', 
                        new_pending_offer_duration = '', 
                        new_pending_plan = '', 
                        new_plan = '', 
                        offer = '', 
                        offer_duration = '', 
                        offer_effective_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        offer_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        plan = '', 
                        product = '', 
                        product_external_name = '', 
                        provider = '', 
                        quote_external_name = '', 
                        state = openapi_client.models.state.state(), 
                        subscription_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        usage_reporting_id = '', ), 
                    existing_price_model_type = '', 
                    has_entitlement_changed = True, 
                    private_offer = openapi_client.models.gcp_marketplace_existing_private_offer.GcpMarketplaceExistingPrivateOffer(
                        agreement = '', 
                        custom_eula = openapi_client.models.gcp_marketplace_document.GcpMarketplaceDocument(
                            description = '', 
                            document_type = '', 
                            external_google_link = openapi_client.models.external_google_link.externalGoogleLink(), 
                            name = '', 
                            unstructured_document = openapi_client.models.gcp_marketplace_unstructured_document.GcpMarketplaceUnstructuredDocument(
                                content = '', ), 
                            update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        installment_timeline = openapi_client.models.gcp_marketplace_private_offer_installment_timeline.GcpMarketplacePrivateOfferInstallmentTimeline(
                            installments = [
                                openapi_client.models.gcp_marketplace_private_offer_installment.GcpMarketplacePrivateOfferInstallment(
                                    price_model = openapi_client.models.gcp_marketplace_private_offer_price_model.GcpMarketplacePrivateOfferPriceModel(
                                        base_offer = '', 
                                        commitment = openapi_client.models.gcp_marketplace_private_offer_price_model_commitment.GcpMarketplacePrivateOfferPriceModelCommitment(
                                            commitment_amount_per_period = openapi_client.models.gcp_price_value.GcpPriceValue(
                                                currency_code = '', 
                                                nanos = 56, 
                                                units = '', ), 
                                            discount = openapi_client.models.gcp_marketplace_private_offer_price_model_discount.GcpMarketplacePrivateOfferPriceModelDiscount(
                                                discount_percentage = openapi_client.models.discount_percentage.discountPercentage(), 
                                                discounted_price = openapi_client.models.discounted_price.discountedPrice(), ), 
                                            period = openapi_client.models.gcp_period_duration.GcpPeriodDuration(
                                                count = 56, 
                                                unit = 'MONTHLY_PERIOD', ), ), 
                                        fixed_price = openapi_client.models.gcp_marketplace_private_offer_price_model_fixed.GcpMarketplacePrivateOfferPriceModelFixed(), 
                                        one_time_credit = openapi_client.models.one_time_credit.oneTimeCredit(), 
                                        overage = openapi_client.models.gcp_marketplace_private_offer_price_model_overage.GcpMarketplacePrivateOfferPriceModelOverage(
                                            sku_discounts = [
                                                None
                                                ], ), 
                                        payg = openapi_client.models.payg.payg(), 
                                        previous_credit_balance_policy = '', ), 
                                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], ), 
                        name = '', 
                        offer_term = openapi_client.models.gcp_marketplace_private_offer_term.GcpMarketplacePrivateOfferTerm(
                            enable_scheduled_start_times = True, 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            start_policy = '', 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            term_duration = openapi_client.models.gcp_period_duration.GcpPeriodDuration(
                                count = 56, ), ), 
                        payment_schedule = '', 
                        price_model = openapi_client.models.price_model.priceModel(), 
                        service_level = '', ), 
                    standard_offer = openapi_client.models.standard_offer.standardOffer(), ),
                expire_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                features = [
                    openapi_client.models.gcp_marketplace_product_feature_value.GcpMarketplaceProductFeatureValue(
                        feature_description = '', 
                        feature_name = '', 
                        feature_title = '', 
                        feature_value = '', )
                    ],
                installment_timeline = openapi_client.models.gcp_marketplace_private_offer_installment_timeline.GcpMarketplacePrivateOfferInstallmentTimeline(
                    installments = [
                        openapi_client.models.gcp_marketplace_private_offer_installment.GcpMarketplacePrivateOfferInstallment(
                            price_model = openapi_client.models.gcp_marketplace_private_offer_price_model.GcpMarketplacePrivateOfferPriceModel(
                                base_offer = '', 
                                commitment = openapi_client.models.gcp_marketplace_private_offer_price_model_commitment.GcpMarketplacePrivateOfferPriceModelCommitment(
                                    commitment_amount_per_period = openapi_client.models.gcp_price_value.GcpPriceValue(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), 
                                    discount = openapi_client.models.gcp_marketplace_private_offer_price_model_discount.GcpMarketplacePrivateOfferPriceModelDiscount(
                                        discount_percentage = openapi_client.models.discount_percentage.discountPercentage(), 
                                        discounted_price = openapi_client.models.discounted_price.discountedPrice(), ), 
                                    period = openapi_client.models.gcp_period_duration.GcpPeriodDuration(
                                        count = 56, 
                                        unit = 'MONTHLY_PERIOD', ), ), 
                                fixed_price = openapi_client.models.gcp_marketplace_private_offer_price_model_fixed.GcpMarketplacePrivateOfferPriceModelFixed(), 
                                one_time_credit = openapi_client.models.one_time_credit.oneTimeCredit(), 
                                overage = openapi_client.models.gcp_marketplace_private_offer_price_model_overage.GcpMarketplacePrivateOfferPriceModelOverage(
                                    sku_discounts = [
                                        None
                                        ], ), 
                                payg = openapi_client.models.payg.payg(), 
                                previous_credit_balance_policy = '', ), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                lifecycle_state = '',
                metric_information = openapi_client.models.gcp_marketplace_private_offer_metric_information.GcpMarketplacePrivateOfferMetricInformation(
                    metric_details = [
                        openapi_client.models.gcp_marketplace_private_offer_metric_detail.GcpMarketplacePrivateOfferMetricDetail(
                            display_name = '', 
                            parent_commerce_service = '', 
                            sku_id = '', 
                            tiers = [
                                openapi_client.models.gcp_price_tier.GcpPriceTier(
                                    from_amount = 1.337, 
                                    price = openapi_client.models.gcp_price_value.GcpPriceValue(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), 
                                    starting_usage_amount = '', )
                                ], 
                            unit_description = '', )
                        ], ),
                migration_metadata = openapi_client.models.gcp_marketplace_private_offer_migration_metadata.GcpMarketplacePrivateOfferMigrationMetadata(
                    inventory_flavor_external_name = '', 
                    product_external_name = '', 
                    provider_id = '', ),
                name = '',
                offer_id = '',
                offer_source = '',
                offer_state = 'OFFER_PUBLISHED',
                offer_term = openapi_client.models.gcp_marketplace_private_offer_term.GcpMarketplacePrivateOfferTerm(
                    enable_scheduled_start_times = True, 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    start_policy = '', 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    term_duration = openapi_client.models.gcp_period_duration.GcpPeriodDuration(
                        count = 56, 
                        unit = 'MONTHLY_PERIOD', ), ),
                payment_schedule = '',
                policies = {
                    'key' : ''
                    },
                price_model = openapi_client.models.gcp_marketplace_private_offer_price_model.GcpMarketplacePrivateOfferPriceModel(
                    base_offer = '', 
                    commitment = openapi_client.models.gcp_marketplace_private_offer_price_model_commitment.GcpMarketplacePrivateOfferPriceModelCommitment(
                        commitment_amount_per_period = openapi_client.models.gcp_price_value.GcpPriceValue(
                            currency_code = '', 
                            nanos = 56, 
                            units = '', ), 
                        discount = openapi_client.models.gcp_marketplace_private_offer_price_model_discount.GcpMarketplacePrivateOfferPriceModelDiscount(
                            discount_percentage = openapi_client.models.discount_percentage.discountPercentage(), 
                            discounted_price = openapi_client.models.discounted_price.discountedPrice(), ), 
                        period = openapi_client.models.gcp_period_duration.GcpPeriodDuration(
                            count = 56, 
                            unit = 'MONTHLY_PERIOD', ), ), 
                    fixed_price = openapi_client.models.gcp_marketplace_private_offer_price_model_fixed.GcpMarketplacePrivateOfferPriceModelFixed(), 
                    one_time_credit = openapi_client.models.one_time_credit.oneTimeCredit(), 
                    overage = openapi_client.models.gcp_marketplace_private_offer_price_model_overage.GcpMarketplacePrivateOfferPriceModelOverage(
                        sku_discounts = [
                            None
                            ], ), 
                    payg = openapi_client.models.payg.payg(), 
                    previous_credit_balance_policy = '', ),
                price_model_type = '',
                provider_cancellation_internal_note = '',
                provider_info = openapi_client.models.gcp_marketplace_private_offer_provider_info.GcpMarketplacePrivateOfferProviderInfo(
                    creator_email_address = '', 
                    sales_contact_email = '', 
                    sales_contact_name = '', ),
                provider_internal_note = '',
                provider_public_note = '',
                purchase_channel = openapi_client.models.gcp_marketplace_purchase_channel.GcpMarketplacePurchaseChannel(
                    marketplace = True, 
                    reseller = True, ),
                purchase_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                replacement_metadata = openapi_client.models.gcp_marketplace_private_offer_replacement_metadata.GcpMarketplacePrivateOfferReplacementMetadata(
                    coterm_alignment = '', 
                    replaced_offer = '', 
                    replaced_offer_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    replacement_policy = '', ),
                service_level = '',
                update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                use_legacy_partner_eula = True,
                user_labels = [
                    ''
                    ]
            )
        else:
            return GcpMarketplacePrivateOffer(
        )
        """

    def testGcpMarketplacePrivateOffer(self):
        """Test GcpMarketplacePrivateOffer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
