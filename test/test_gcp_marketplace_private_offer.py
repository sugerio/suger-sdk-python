# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.gcp_marketplace_private_offer import GcpMarketplacePrivateOffer

class TestGcpMarketplacePrivateOffer(unittest.TestCase):
    """GcpMarketplacePrivateOffer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GcpMarketplacePrivateOffer:
        """Test GcpMarketplacePrivateOffer
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GcpMarketplacePrivateOffer`
        """
        model = GcpMarketplacePrivateOffer()
        if include_optional:
            return GcpMarketplacePrivateOffer(
                active_entitlement = {"newPendingOffer":"newPendingOffer","offerEffectiveTime":"2000-01-23T04:56:07.000+00:00","newPlan":"newPlan","offer":"offer","inputProperties":[9,9],"provider":"provider","offerEndTime":"2000-01-23T04:56:07.000+00:00","offerDuration":"offerDuration","consumers":[{"project":"project"},{"project":"project"}],"newOfferEndTime":"newOfferEndTime","subscriptionEndTime":"2000-01-23T04:56:07.000+00:00","id":"id","state":"{}","usageReportingId":"usageReportingId","plan":"plan","messageToUser":"messageToUser","product":"product","updateTime":"2000-01-23T04:56:07.000+00:00","newOfferDuration":"newOfferDuration","quoteExternalName":"quoteExternalName","createTime":"2000-01-23T04:56:07.000+00:00","newPendingPlan":"newPendingPlan","name":"name","newPendingOfferDuration":"newPendingOfferDuration","account":"account","productExternalName":"productExternalName","newOfferStartTime":"newOfferStartTime"},
                agency_enabled = True,
                agreement = '',
                cancel_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                custom_eula = {"documentBody":"documentBody","documentType":"documentType","unstructuredDocument":{"content":"content"},"name":"name","description":"description","updateTime":"2000-01-23T04:56:07.000+00:00","externalGoogleLink":"{}"},
                customer_info = suger_sdk_python.models.gcp_marketplace_private_offer_customer_info.GcpMarketplacePrivateOfferCustomerInfo(
                    address = '', 
                    contact = '', 
                    email = '', 
                    organization = '', 
                    unverified_billing_account = '', ),
                eula_agreement_document = {"documentBody":"documentBody","documentType":"documentType","unstructuredDocument":{"content":"content"},"name":"name","description":"description","updateTime":"2000-01-23T04:56:07.000+00:00","externalGoogleLink":"{}"},
                existing_offer_data = suger_sdk_python.models.gcp_marketplace_existing_offer_data.GcpMarketplaceExistingOfferData(
                    entitlement = {"newPendingOffer":"newPendingOffer","offerEffectiveTime":"2000-01-23T04:56:07.000+00:00","newPlan":"newPlan","offer":"offer","inputProperties":[9,9],"provider":"provider","offerEndTime":"2000-01-23T04:56:07.000+00:00","offerDuration":"offerDuration","consumers":[{"project":"project"},{"project":"project"}],"newOfferEndTime":"newOfferEndTime","subscriptionEndTime":"2000-01-23T04:56:07.000+00:00","id":"id","state":"{}","usageReportingId":"usageReportingId","plan":"plan","messageToUser":"messageToUser","product":"product","updateTime":"2000-01-23T04:56:07.000+00:00","newOfferDuration":"newOfferDuration","quoteExternalName":"quoteExternalName","createTime":"2000-01-23T04:56:07.000+00:00","newPendingPlan":"newPendingPlan","name":"name","newPendingOfferDuration":"newPendingOfferDuration","account":"account","productExternalName":"productExternalName","newOfferStartTime":"newOfferStartTime"}, 
                    existing_price_model_type = '', 
                    has_entitlement_changed = True, 
                    private_offer = suger_sdk_python.models.gcp_marketplace_existing_private_offer.GcpMarketplaceExistingPrivateOffer(
                        agreement = '', 
                        custom_eula = {"documentBody":"documentBody","documentType":"documentType","unstructuredDocument":{"content":"content"},"name":"name","description":"description","updateTime":"2000-01-23T04:56:07.000+00:00","externalGoogleLink":"{}"}, 
                        installment_timeline = suger_sdk_python.models.gcp_marketplace_private_offer_installment_timeline.GcpMarketplacePrivateOfferInstallmentTimeline(
                            installments = [
                                suger_sdk_python.models.gcp_marketplace_private_offer_installment.GcpMarketplacePrivateOfferInstallment(
                                    price_model = suger_sdk_python.models.gcp_marketplace_private_offer_price_model.GcpMarketplacePrivateOfferPriceModel(
                                        base_offer = '', 
                                        commitment = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_commitment.GcpMarketplacePrivateOfferPriceModelCommitment(
                                            commitment_amount_per_period = {"nanos":1,"units":"units","currencyCode":"currencyCode"}, 
                                            discount = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_discount.GcpMarketplacePrivateOfferPriceModelDiscount(
                                                discount_percentage = suger_sdk_python.models.discount_percentage.discountPercentage(), 
                                                discounted_price = suger_sdk_python.models.discounted_price.discountedPrice(), ), 
                                            period = {"unit":"MONTHLY_PERIOD","count":4}, ), 
                                        fixed_price = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_fixed.GcpMarketplacePrivateOfferPriceModelFixed(), 
                                        one_time_credit = suger_sdk_python.models.one_time_credit.oneTimeCredit(), 
                                        overage = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_overage.GcpMarketplacePrivateOfferPriceModelOverage(
                                            sku_discounts = [
                                                None
                                                ], ), 
                                        payg = suger_sdk_python.models.payg.payg(), 
                                        previous_credit_balance_policy = '', ), 
                                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], ), 
                        name = '', 
                        offer_term = suger_sdk_python.models.gcp_marketplace_private_offer_term.GcpMarketplacePrivateOfferTerm(
                            enable_scheduled_start_times = True, 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            start_policy = '', 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            term_duration = {"unit":"MONTHLY_PERIOD","count":4}, ), 
                        payment_schedule = '', 
                        price_model = suger_sdk_python.models.price_model.priceModel(), 
                        service_level = '', ), 
                    standard_offer = suger_sdk_python.models.standard_offer.standardOffer(), ),
                expire_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                features = [
                    {"featureValue":"featureValue","featureTitle":"featureTitle","featureName":"featureName","featureDescription":"featureDescription"}
                    ],
                installment_timeline = suger_sdk_python.models.gcp_marketplace_private_offer_installment_timeline.GcpMarketplacePrivateOfferInstallmentTimeline(
                    installments = [
                        suger_sdk_python.models.gcp_marketplace_private_offer_installment.GcpMarketplacePrivateOfferInstallment(
                            price_model = suger_sdk_python.models.gcp_marketplace_private_offer_price_model.GcpMarketplacePrivateOfferPriceModel(
                                base_offer = '', 
                                commitment = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_commitment.GcpMarketplacePrivateOfferPriceModelCommitment(
                                    commitment_amount_per_period = {"nanos":1,"units":"units","currencyCode":"currencyCode"}, 
                                    discount = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_discount.GcpMarketplacePrivateOfferPriceModelDiscount(
                                        discount_percentage = suger_sdk_python.models.discount_percentage.discountPercentage(), 
                                        discounted_price = suger_sdk_python.models.discounted_price.discountedPrice(), ), 
                                    period = {"unit":"MONTHLY_PERIOD","count":4}, ), 
                                fixed_price = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_fixed.GcpMarketplacePrivateOfferPriceModelFixed(), 
                                one_time_credit = suger_sdk_python.models.one_time_credit.oneTimeCredit(), 
                                overage = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_overage.GcpMarketplacePrivateOfferPriceModelOverage(
                                    sku_discounts = [
                                        None
                                        ], ), 
                                payg = suger_sdk_python.models.payg.payg(), 
                                previous_credit_balance_policy = '', ), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                lifecycle_state = '',
                metric_information = suger_sdk_python.models.gcp_marketplace_private_offer_metric_information.GcpMarketplacePrivateOfferMetricInformation(
                    metric_details = [
                        suger_sdk_python.models.gcp_marketplace_private_offer_metric_detail.GcpMarketplacePrivateOfferMetricDetail(
                            display_name = '', 
                            parent_commerce_service = '', 
                            sku_id = '', 
                            tiers = [
                                {"startingUsageAmount":"startingUsageAmount","price":{"nanos":1,"units":"units","currencyCode":"currencyCode"},"fromAmount":7.386281948385884}
                                ], 
                            unit_description = '', )
                        ], ),
                migration_metadata = suger_sdk_python.models.gcp_marketplace_private_offer_migration_metadata.GcpMarketplacePrivateOfferMigrationMetadata(
                    inventory_flavor_external_name = '', 
                    product_external_name = '', 
                    project_number = '', 
                    provider_id = '', ),
                name = '',
                offer_id = '',
                offer_source = 'OFFER',
                offer_state = 'OFFER_ACTIVE',
                offer_term = suger_sdk_python.models.gcp_marketplace_private_offer_term.GcpMarketplacePrivateOfferTerm(
                    enable_scheduled_start_times = True, 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    start_policy = '', 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    term_duration = {"unit":"MONTHLY_PERIOD","count":4}, ),
                offer_title = '',
                offer_title_auto_generated = True,
                payment_schedule = '',
                policies = {
                    'key' : ''
                    },
                price_model = suger_sdk_python.models.gcp_marketplace_private_offer_price_model.GcpMarketplacePrivateOfferPriceModel(
                    base_offer = '', 
                    commitment = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_commitment.GcpMarketplacePrivateOfferPriceModelCommitment(
                        commitment_amount_per_period = {"nanos":1,"units":"units","currencyCode":"currencyCode"}, 
                        discount = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_discount.GcpMarketplacePrivateOfferPriceModelDiscount(
                            discount_percentage = suger_sdk_python.models.discount_percentage.discountPercentage(), 
                            discounted_price = suger_sdk_python.models.discounted_price.discountedPrice(), ), 
                        period = {"unit":"MONTHLY_PERIOD","count":4}, ), 
                    fixed_price = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_fixed.GcpMarketplacePrivateOfferPriceModelFixed(), 
                    one_time_credit = suger_sdk_python.models.one_time_credit.oneTimeCredit(), 
                    overage = suger_sdk_python.models.gcp_marketplace_private_offer_price_model_overage.GcpMarketplacePrivateOfferPriceModelOverage(
                        sku_discounts = [
                            None
                            ], ), 
                    payg = suger_sdk_python.models.payg.payg(), 
                    previous_credit_balance_policy = '', ),
                price_model_type = '',
                provider_cancellation_internal_note = '',
                provider_info = suger_sdk_python.models.gcp_marketplace_private_offer_provider_info.GcpMarketplacePrivateOfferProviderInfo(
                    creator_email_address = '', 
                    sales_contact_email = '', 
                    sales_contact_name = '', ),
                provider_internal_note = '',
                provider_public_note = '',
                purchase_channel = suger_sdk_python.models.gcp_marketplace_purchase_channel.GcpMarketplacePurchaseChannel(
                    marketplace = True, 
                    reseller = True, ),
                purchase_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                replacement_metadata = suger_sdk_python.models.gcp_marketplace_private_offer_replacement_metadata.GcpMarketplacePrivateOfferReplacementMetadata(
                    coterm_alignment = '', 
                    replaced_offer = '', 
                    replaced_offer_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    replacement_policy = '', ),
                reseller_info = {"billingAccountOrgDisplayName":"billingAccountOrgDisplayName","notesToReseller":"notesToReseller","billingAccountId":"billingAccountId","billingAccountType":"billingAccountType","billingAccountNickname":"billingAccountNickname"},
                service_level = '',
                update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                use_legacy_partner_eula = True,
                user_labels = [
                    ''
                    ]
            )
        else:
            return GcpMarketplacePrivateOffer(
        )
        """

    def testGcpMarketplacePrivateOffer(self):
        """Test GcpMarketplacePrivateOffer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
