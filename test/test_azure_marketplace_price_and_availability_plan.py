# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.azure_marketplace_price_and_availability_plan import AzureMarketplacePriceAndAvailabilityPlan  # noqa: E501

class TestAzureMarketplacePriceAndAvailabilityPlan(unittest.TestCase):
    """AzureMarketplacePriceAndAvailabilityPlan unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AzureMarketplacePriceAndAvailabilityPlan:
        """Test AzureMarketplacePriceAndAvailabilityPlan
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AzureMarketplacePriceAndAvailabilityPlan`
        """
        model = AzureMarketplacePriceAndAvailabilityPlan()  # noqa: E501
        if include_optional:
            return AzureMarketplacePriceAndAvailabilityPlan(
                var_schema = '',
                audience = 'public',
                billing_tag = '',
                id = '',
                markets = [
                    ''
                    ],
                meter_define = '',
                plan = '',
                pricing = openapi_client.models.azure_marketplace_price_and_availability_price.AzureMarketplacePriceAndAvailabilityPrice(
                    core_pricing = openapi_client.models.azure_marketplace_price_and_availability_core_price.AzureMarketplacePriceAndAvailabilityCorePrice(
                        price = 1.337, 
                        price_input_option = 'free', 
                        price_per_core = 1.337, 
                        price_per_core_size = openapi_client.models.price_per_core_size.pricePerCoreSize(), 
                        prices = [
                            openapi_client.models.azure_marketplace_price.AzureMarketplacePrice(
                                currency = '', 
                                markets = [
                                    ''
                                    ], 
                                price = 1.337, )
                            ], ), 
                    custom_meters = openapi_client.models.azure_marketplace_price_and_availability_custom_meter_price.AzureMarketplacePriceAndAvailabilityCustomMeterPrice(
                        meters = {
                            'key' : openapi_client.models.azure_marketplace_price_and_availability_custom_meter_price_meter_item.AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem(
                                billing_term = openapi_client.models.azure_marketplace_term.AzureMarketplaceTerm(
                                    type = 'day', 
                                    value = 1.337, ), 
                                included_quantities = [
                                    openapi_client.models.azure_marketplace_price_and_availability_custom_meter_price_included_quantity_item.AzureMarketplacePriceAndAvailabilityCustomMeterPriceIncludedQuantityItem(
                                        is_infinite = True, 
                                        quantity = 1.337, )
                                    ], 
                                payment_option = openapi_client.models.azure_marketplace_term.AzureMarketplaceTerm(
                                    type = 'day', 
                                    value = 1.337, ), 
                                price_per_payment_in_usd = 1.337, )
                            }, 
                        price_input_option = 'perMarket', ), 
                    license_model = 'byol', 
                    recurrent_price = openapi_client.models.azure_marketplace_price_and_availability_recurrent_price.AzureMarketplacePriceAndAvailabilityRecurrentPrice(
                        price_input_option = 'perMarket', 
                        recurrent_price_mode = 'flatRate', 
                        user_limits = openapi_client.models.azure_marketplace_price_and_availability_recurrent_price_user_limit.AzureMarketplacePriceAndAvailabilityRecurrentPriceUserLimit(
                            max = 1.337, 
                            min = 1.337, ), ), 
                    system_meter_pricing = openapi_client.models.azure_marketplace_price_and_availability_system_meter_price.AzureMarketplacePriceAndAvailabilitySystemMeterPrice(
                        price = 1.337, 
                        price_input_option = 'perCore', ), ),
                private_audiences = [
                    openapi_client.models.azure_marketplace_price_and_availability_audience.AzureMarketplacePriceAndAvailabilityAudience(
                        id = '', 
                        label = '', 
                        type = 'none', )
                    ],
                product = '',
                resource_name = '',
                software_reservation = [
                    openapi_client.models.azure_marketplace_price_and_availability_software_reservation.AzureMarketplacePriceAndAvailabilitySoftwareReservation(
                        percentage_save = 1.337, 
                        term = 1.337, 
                        type = 'month', )
                    ],
                trial = openapi_client.models.azure_marketplace_term.AzureMarketplaceTerm(
                    type = 'day', 
                    value = 1.337, ),
                validations = [
                    openapi_client.models.azure_marketplace_validation.AzureMarketplaceValidation(
                        __schema = '', 
                        code = 'businessValidationError', 
                        level = 'informational', 
                        message = '', 
                        resource_id = '', )
                    ],
                visibility = 'visible'
            )
        else:
            return AzureMarketplacePriceAndAvailabilityPlan(
        )
        """

    def testAzureMarketplacePriceAndAvailabilityPlan(self):
        """Test AzureMarketplacePriceAndAvailabilityPlan"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
