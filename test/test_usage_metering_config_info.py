# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.usage_metering_config_info import UsageMeteringConfigInfo

class TestUsageMeteringConfigInfo(unittest.TestCase):
    """UsageMeteringConfigInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UsageMeteringConfigInfo:
        """Test UsageMeteringConfigInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UsageMeteringConfigInfo`
        """
        model = UsageMeteringConfigInfo()
        if include_optional:
            return UsageMeteringConfigInfo(
                partner_usage_metering_configs = [
                    {"enableCommitWithAdditionalUsageAtListPrice":true,"enableDimensionMapping":true,"dimensionMapping":{"key":{"convertionMultiplier":0.8008281904610115,"dimensionKey":"dimensionKey","mappingMode":"{}"}},"partner":"{}","enableBillableDimension":true,"enableCommitWithAdditionalUsageMetering":true,"dimensionMappingV2":{"key":[{"convertionMultiplier":0.8008281904610115,"dimensionKey":"dimensionKey","mappingMode":"{}"},{"convertionMultiplier":0.8008281904610115,"dimensionKey":"dimensionKey","mappingMode":"{}"}]}}
                    ]
            )
        else:
            return UsageMeteringConfigInfo(
        )
        """

    def testUsageMeteringConfigInfo(self):
        """Test UsageMeteringConfigInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
