# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.offer_info import OfferInfo  # noqa: E501

class TestOfferInfo(unittest.TestCase):
    """OfferInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OfferInfo:
        """Test OfferInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OfferInfo`
        """
        model = OfferInfo()  # noqa: E501
        if include_optional:
            return OfferInfo(
                attach_eula_type = '',
                auto_renew = True,
                aws_cppo_event_detail = openapi_client.models.aws_marketplace_event_bridge_event_detail.AwsMarketplaceEventBridgeEventDetail(
                    catalog = '', 
                    event_category = '', 
                    event_id = '', 
                    event_name = '', 
                    event_source = '', 
                    event_type = '', 
                    event_version = '', 
                    management_event = True, 
                    manufacturer = openapi_client.models.manufacturer.manufacturer(), 
                    offer = openapi_client.models.aws_marketplace_event_bridge_event_offer.AwsMarketplaceEventBridgeEventOffer(
                        arn = '', 
                        expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        name = '', ), 
                    product = openapi_client.models.aws_marketplace_event_bridge_event_product.AwsMarketplaceEventBridgeEventProduct(
                        arn = '', 
                        id = '', 
                        title = '', ), 
                    request_id = '', 
                    request_parameters = openapi_client.models.request_parameters.requestParameters(), 
                    response_elements = openapi_client.models.response_elements.responseElements(), 
                    seller_of_record = openapi_client.models.seller_of_record.sellerOfRecord(), 
                    targeted_buyer_account_ids = [
                        ''
                        ], ),
                aws_cppo_opportunity = openapi_client.models.aws_marketplace_cppo_opportunity.AwsMarketplaceCppoOpportunity(
                    buyer_ids = [
                        ''
                        ], 
                    buyer_names = [
                        ''
                        ], 
                    contract_duration_in_days = 56, 
                    created_by = '', 
                    created_date = '', 
                    custom_price_terms = openapi_client.models.aws_marketplace_cppo_price_terms.AwsMarketplaceCppoPriceTerms(
                        all_consumption_unit_column_names = [
                            ''
                            ], 
                        detailed_view = openapi_client.models.aws_marketplace_cppo_price_term_detailed_view.AwsMarketplaceCppoPriceTermDetailedView(
                            additional_consumption_unit_column_names = [
                                ''
                                ], 
                            additional_consumption_unit_entries = [
                                openapi_client.models.aws_marketplace_cppo_price_term_entry.AwsMarketplaceCppoPriceTermEntry(
                                    consumption_unit_column_names = [
                                        ''
                                        ], 
                                    description = '', 
                                    display_name = '', 
                                    is_custom_dimension = True, 
                                    is_deleted = True, 
                                    name = '', 
                                    price_per_consumption_unit = {
                                        'key' : ''
                                        }, 
                                    pricing_dimension = '', )
                                ], 
                            consumption_unit_column_names = [
                                ''
                                ], 
                            consumption_unit_entries = [
                                openapi_client.models.aws_marketplace_cppo_price_term_entry.AwsMarketplaceCppoPriceTermEntry(
                                    description = '', 
                                    display_name = '', 
                                    is_custom_dimension = True, 
                                    is_deleted = True, 
                                    name = '', 
                                    pricing_dimension = '', )
                                ], ), 
                        entries = [
                            
                            ], ), 
                    discount = '', 
                    discount_percent = 1.337, 
                    discount_type = 'DISCOUNT_PERCENT', 
                    errors = [
                        None
                        ], 
                    expiration_date = '', 
                    listing_fee_renewal = True, 
                    manufacturer_id = '', 
                    manufacturer_name = '', 
                    offers_count = 56, 
                    opportunity_discription = '', 
                    opportunity_duration_type = 'SPECIFIC_DATES', 
                    opportunity_eula = openapi_client.models.aws_marketplace_cppo_opportunity_eula.AwsMarketplaceCppoOpportunityEula(
                        access_url = '', 
                        key = '', 
                        object_url = '', ), 
                    opportunity_id = '', 
                    opportunity_name = '', 
                    opportunity_rcmp = openapi_client.models.aws_marketplace_cppo_opportunity_eula.AwsMarketplaceCppoOpportunityEula(
                        access_url = '', 
                        key = '', 
                        object_url = '', ), 
                    partner_id = '', 
                    partner_name = '', 
                    payment_terms = openapi_client.models.aws_marketplace_cppo_payment_terms.AwsMarketplaceCppoPaymentTerms(
                        currency_code = '', 
                        entitlement = [
                            openapi_client.models.aws_marketplace_cppo_payment_terms_entitlement.AwsMarketplaceCppoPaymentTermsEntitlement(
                                name = '', 
                                quantity = 56, )
                            ], 
                        schedule = [
                            openapi_client.models.aws_marketplace_cppo_payment_schedule.AwsMarketplaceCppoPaymentSchedule(
                                amount = 1.337, 
                                charge_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        schedule_type = '', 
                        selected_duration = '', ), 
                    product_id = '', 
                    product_name = '', 
                    product_type = '', 
                    sppo = True, 
                    status = 'active', 
                    usage_allowed = 56, ),
                azure_original_plan = openapi_client.models.azure_marketplace_price_and_availability_private_offer_plan.AzureMarketplacePriceAndAvailabilityPrivateOfferPlan(
                    __schema = '', 
                    id = '', 
                    plan = '', 
                    plan_name = '', 
                    pricing = openapi_client.models.azure_marketplace_price_and_availability_private_offer_price.AzureMarketplacePriceAndAvailabilityPrivateOfferPrice(
                        custom_meters = openapi_client.models.azure_marketplace_price_and_availability_private_offer_custom_meters.AzureMarketplacePriceAndAvailabilityPrivateOfferCustomMeters(
                            meters = openapi_client.models.meters.meters(), 
                            price_input_option = 'perMarket', ), 
                        recurrent_price = openapi_client.models.azure_marketplace_price_and_availability_recurrent_price.AzureMarketplacePriceAndAvailabilityRecurrentPrice(
                            price_input_option = 'perMarket', 
                            prices = [
                                openapi_client.models.azure_marketplace_price_and_availability_recurrent_price_item.AzureMarketplacePriceAndAvailabilityRecurrentPriceItem(
                                    billing_term = openapi_client.models.azure_marketplace_term.AzureMarketplaceTerm(
                                        type = 'day', 
                                        value = 1.337, ), 
                                    payment_option = openapi_client.models.azure_marketplace_term.AzureMarketplaceTerm(
                                        type = 'day', 
                                        value = 1.337, ), 
                                    price_per_payment_in_usd = 1.337, )
                                ], ), ), 
                    product = '', 
                    resource_name = '', 
                    validations = [
                        openapi_client.models.azure_marketplace_validation.AzureMarketplaceValidation(
                            __schema = '', 
                            code = 'businessValidationError', 
                            level = 'informational', 
                            message = '', 
                            resource_id = '', )
                        ], ),
                azure_private_offer = openapi_client.models.azure_marketplace_private_offer.AzureMarketplacePrivateOffer(
                    __schema = '', 
                    accept_by = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    acceptance_links = [
                        openapi_client.models.azure_marketplace_private_offer_acceptance_link.AzureMarketplacePrivateOfferAcceptanceLink(
                            beneficiary_id = '', 
                            link = '', )
                        ], 
                    beneficiaries = [
                        openapi_client.models.azure_marketplace_private_offer_beneficiary.AzureMarketplacePrivateOfferBeneficiary(
                            beneficiary_recipients = [
                                openapi_client.models.azure_marketplace_private_offer_beneficiary_recipient.AzureMarketplacePrivateOfferBeneficiaryRecipient(
                                    id = '', 
                                    recipient_type = 'cspCustomer', )
                                ], 
                            description = '', 
                            id = '', )
                        ], 
                    e_tag = '', 
                    end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    name = '', 
                    notification_contacts = [
                        ''
                        ], 
                    offer_pricing_type = '', 
                    partners = [
                        openapi_client.models.azure_marketplace_private_offer_partner.AzureMarketplacePrivateOfferPartner(
                            id = '', 
                            location = '', 
                            partner_name = '', )
                        ], 
                    prepared_by = '', 
                    pricing = [
                        openapi_client.models.azure_marketplace_private_offer_pricing.AzureMarketplacePrivateOfferPricing(
                            discount_percentage = 1.337, 
                            discount_type = 'absolute', 
                            markup_percentage = 1.337, 
                            original_plan = openapi_client.models.original_plan.originalPlan(), 
                            plan = '', 
                            plan_id = '', 
                            plan_name = '', 
                            plan_type = 'FLAT_RATE', 
                            price_details = '', 
                            private_offer_plan = openapi_client.models.private_offer_plan.privateOfferPlan(), 
                            product = '', 
                            product_name = '', 
                            suger_offer_id = '', )
                        ], 
                    private_offer_type = '', 
                    resource_name = '', 
                    start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    state = 'draft', 
                    sub_state = openapi_client.models.sub_state.subState(), 
                    terms_and_conditions_doc_sas_url = '', 
                    terms_and_conditions_docs = [
                        openapi_client.models.azure_marketplace_private_offer_terms_doc.AzureMarketplacePrivateOfferTermsDoc(
                            customer_facing_document_name = '', 
                            file_name = '', 
                            sas_url = '', )
                        ], 
                    upgraded_from = openapi_client.models.azure_marketplace_private_offer_promotion_reference.AzureMarketplacePrivateOfferPromotionReference(
                        id = '', 
                        name = '', ), 
                    validations = [
                        openapi_client.models.azure_marketplace_validation.AzureMarketplaceValidation(
                            __schema = '', 
                            code = 'businessValidationError', 
                            level = 'informational', 
                            message = '', 
                            resource_id = '', )
                        ], 
                    variable_start_date = True, ),
                azure_product_variant = openapi_client.models.azure_product_variant.AzureProductVariant(
                    azure_government_certifications = [
                        openapi_client.models.azure_government_certification.AzureGovernmentCertification(
                            title = '', 
                            uri = '', 
                            validation_results = [
                                openapi_client.models.azure_validation_result.AzureValidationResult(
                                    error_message = '', 
                                    member_names = [
                                        ''
                                        ], )
                                ], )
                        ], 
                    cloud_availabilities = [
                        ''
                        ], 
                    conversion_paths = '', 
                    extended_properties = [
                        openapi_client.models.azure_type_value.AzureTypeValue(
                            type = '', 
                            value = '', )
                        ], 
                    external_id = '', 
                    feature_availabilities = [
                        openapi_client.models.azure_product_feature_availability.AzureProductFeatureAvailability(
                            custom_meters = [
                                openapi_client.models.azure_product_variant_custom_meter.AzureProductVariantCustomMeter(
                                    display_name = '', 
                                    id = '', 
                                    included_base_quantities = [
                                        openapi_client.models.azure_included_base_quantity.AzureIncludedBaseQuantity(
                                            is_infinite = True, 
                                            quantity = 1.337, 
                                            recurring_unit = 'Monthly', )
                                        ], 
                                    is_enabled = True, 
                                    price_in_usd = 1.337, 
                                    unique_id = '', 
                                    unit_of_measure = '', )
                                ], 
                            id = '', 
                            is_hidden = True, 
                            market_states = [
                                openapi_client.models.azure_market_state.AzureMarketState(
                                    market_code = '', 
                                    state = 'Disabled', )
                                ], 
                            markets = [
                                openapi_client.models.azure_market.AzureMarket(
                                    friendly_name = '', 
                                    market_code = '', )
                                ], 
                            price_schedules = [
                                openapi_client.models.azure_product_variant_price_schedule.AzureProductVariantPriceSchedule(
                                    date_time_range = openapi_client.models.azure_localized_time_range.AzureLocalizedTimeRange(
                                        end_at = openapi_client.models.azure_localized_date_time.AzureLocalizedDateTime(
                                            date_time_in_utc = '', 
                                            localize_per_market = True, ), 
                                        start_at = openapi_client.models.azure_localized_date_time.AzureLocalizedDateTime(
                                            date_time_in_utc = '', 
                                            localize_per_market = True, ), ), 
                                    friendly_name = '', 
                                    is_base_schedule = True, 
                                    market_codes = [
                                        ''
                                        ], 
                                    schedules = [
                                        openapi_client.models.azure_price_schedule.AzurePriceSchedule(
                                            price_cadence = openapi_client.models.azure_price_cadence.AzurePriceCadence(
                                                type = 'Month', 
                                                value = 56, ), 
                                            pricing_model = 'Flat', 
                                            pricing_units = [
                                                openapi_client.models.azure_pricing_unit.AzurePricingUnit(
                                                    is_unlimited_unit = True, 
                                                    lower_unit = 56, 
                                                    name = 'sharedcore', 
                                                    unit_type = '', 
                                                    upper_unit = 56, )
                                                ], 
                                            retail_price = openapi_client.models.azure_price.AzurePrice(
                                                currency_code = '', 
                                                open_price = 1.337, 
                                                price_tier_id = '', ), )
                                        ], )
                                ], 
                            properties = [
                                openapi_client.models.azure_type_value.AzureTypeValue(
                                    type = '', 
                                    value = '', )
                                ], 
                            resource_type = '', 
                            subscription_audiences = [
                                openapi_client.models.azure_audience.AzureAudience(
                                    description = '', 
                                    id = '', )
                                ], 
                            tenant_audiences = [
                                openapi_client.models.azure_audience.AzureAudience(
                                    description = '', 
                                    id = '', )
                                ], 
                            trial = openapi_client.models.azure_product_variant_trial.AzureProductVariantTrial(
                                duration = 56, 
                                duration_type = 'Minute', 
                                type = 'NoTrial', ), 
                            visibility = 'Public', )
                        ], 
                    friendly_name = '', 
                    id = '', 
                    lead_gen_id = '', 
                    reference_variant_id = '', 
                    resource_type = 'AzureSkuVariant', 
                    state = 'InActive', ),
                buyer_aws_account_ids = [
                    ''
                    ],
                buyer_azure_tenants = [
                    openapi_client.models.azure_audience.AzureAudience(
                        description = '', 
                        id = '', )
                    ],
                commit_amount = 1.337,
                commits = [
                    openapi_client.models.commit_dimension.CommitDimension(
                        category = '', 
                        description = '', 
                        is_user_created = True, 
                        key = '', 
                        length = 56, 
                        maximum_users = 1, 
                        minimum_users = 1, 
                        name = '', 
                        quantity = 56, 
                        rate = 1.337, 
                        term = '', 
                        term_end_time = '', 
                        time_unit = openapi_client.models.time_unit.timeUnit(), 
                        type = openapi_client.models.type.type(), 
                        types = [
                            ''
                            ], )
                    ],
                currency = '',
                dimensions = [
                    openapi_client.models.metering_dimension.MeteringDimension(
                        category = '', 
                        description = '', 
                        included_base_quantities = [
                            openapi_client.models.azure_included_base_quantity.AzureIncludedBaseQuantity(
                                is_infinite = True, 
                                quantity = 1.337, 
                                recurring_unit = 'Monthly', )
                            ], 
                        key = '', 
                        name = '', 
                        plan_id = '', 
                        plan_name = '', 
                        price_tiers = [
                            openapi_client.models.gcp_price_tier.GcpPriceTier(
                                from_amount = 1.337, 
                                price = openapi_client.models.gcp_price_value.GcpPriceValue(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                starting_usage_amount = '', )
                            ], 
                        rate = 1.337, 
                        sku_id = '', 
                        types = [
                            ''
                            ], 
                        usage_count = openapi_client.models.usage_count.usageCount(), 
                        value_type = openapi_client.models.value_type.valueType(), )
                    ],
                discount_percentage = 1.337,
                eula_type = '',
                eula_url = '',
                gcp_customer_info = openapi_client.models.gcp_marketplace_private_offer_customer_info.GcpMarketplacePrivateOfferCustomerInfo(
                    address = '', 
                    contact = '', 
                    email = '', 
                    organization = '', 
                    unverified_billing_account = '', ),
                gcp_duration = 56,
                gcp_metrics = [
                    openapi_client.models.gcp_marketplace_product_metering_metric.GcpMarketplaceProductMeteringMetric(
                        description = '', 
                        display_name = '', 
                        display_unit = '', 
                        display_unit_description = '', 
                        id = '', 
                        metric_kind = '', 
                        name = '', 
                        price_tiers = [
                            openapi_client.models.gcp_price_tier.GcpPriceTier(
                                from_amount = 1.337, 
                                price = openapi_client.models.gcp_price_value.GcpPriceValue(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                starting_usage_amount = '', )
                            ], 
                        reporting_unit = '', 
                        sku_id = '', 
                        unit = '', 
                        value_type = openapi_client.models.value_type.valueType(), )
                    ],
                gcp_payment_schedule = '',
                gcp_plans = [
                    openapi_client.models.gcp_marketplace_product_purchase_option_spec.GcpMarketplaceProductPurchaseOptionSpec(
                        feature_values = [
                            openapi_client.models.gcp_marketplace_product_feature_value.GcpMarketplaceProductFeatureValue(
                                feature_description = '', 
                                feature_name = '', 
                                feature_title = '', 
                                feature_value = '', )
                            ], 
                        name = '', 
                        price_info = openapi_client.models.gcp_marketplace_product_price_info.GcpMarketplaceProductPriceInfo(
                            description = '', 
                            price_model = 'FREE', 
                            subscription_plans = [
                                openapi_client.models.gcp_marketplace_product_subscription_plan.GcpMarketplaceProductSubscriptionPlan(
                                    period = '', 
                                    price = openapi_client.models.gcp_price_value.GcpPriceValue(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), )
                                ], 
                            usage_fees = [
                                openapi_client.models.gcp_marketplace_product_usage_fee.GcpMarketplaceProductUsageFee(
                                    display_quantity = 56, 
                                    metric_id = '', 
                                    price_tiers = [
                                        openapi_client.models.gcp_price_tier.GcpPriceTier(
                                            from_amount = 1.337, 
                                            starting_usage_amount = '', )
                                        ], )
                                ], ), 
                        purchase_mode = 'PURCHASE_MODE_PRIVATE', 
                        title = '', )
                    ],
                gcp_private_offer = openapi_client.models.gcp_marketplace_private_offer.GcpMarketplacePrivateOffer(
                    active_entitlement = openapi_client.models.gcp_marketplace_entitlement.GcpMarketplaceEntitlement(
                        account = '', 
                        consumers = [
                            openapi_client.models.gcp_marketplace_consumer.GcpMarketplaceConsumer(
                                project = '', )
                            ], 
                        create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        input_properties = [
                            56
                            ], 
                        message_to_user = '', 
                        name = '', 
                        new_offer_duration = '', 
                        new_offer_end_time = '', 
                        new_offer_start_time = '', 
                        new_pending_offer = '', 
                        new_pending_offer_duration = '', 
                        new_pending_plan = '', 
                        new_plan = '', 
                        offer = '', 
                        offer_duration = '', 
                        offer_effective_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        offer_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        plan = '', 
                        product = '', 
                        product_external_name = '', 
                        provider = '', 
                        quote_external_name = '', 
                        state = openapi_client.models.state.state(), 
                        subscription_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        usage_reporting_id = '', ), 
                    agency_enabled = True, 
                    agreement = '', 
                    cancel_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    custom_eula = openapi_client.models.gcp_marketplace_document.GcpMarketplaceDocument(
                        description = '', 
                        document_type = '', 
                        external_google_link = openapi_client.models.external_google_link.externalGoogleLink(), 
                        name = '', 
                        unstructured_document = openapi_client.models.gcp_marketplace_unstructured_document.GcpMarketplaceUnstructuredDocument(
                            content = '', ), 
                        update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    customer_info = openapi_client.models.gcp_marketplace_private_offer_customer_info.GcpMarketplacePrivateOfferCustomerInfo(
                        address = '', 
                        contact = '', 
                        email = '', 
                        organization = '', 
                        unverified_billing_account = '', ), 
                    eula_agreement_document = openapi_client.models.gcp_marketplace_document.GcpMarketplaceDocument(
                        description = '', 
                        document_type = '', 
                        external_google_link = openapi_client.models.external_google_link.externalGoogleLink(), 
                        name = '', 
                        update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    existing_offer_data = openapi_client.models.gcp_marketplace_existing_offer_data.GcpMarketplaceExistingOfferData(
                        entitlement = openapi_client.models.gcp_marketplace_entitlement.GcpMarketplaceEntitlement(
                            account = '', 
                            create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            id = '', 
                            message_to_user = '', 
                            name = '', 
                            new_offer_duration = '', 
                            new_offer_end_time = '', 
                            new_offer_start_time = '', 
                            new_pending_offer = '', 
                            new_pending_offer_duration = '', 
                            new_pending_plan = '', 
                            new_plan = '', 
                            offer = '', 
                            offer_duration = '', 
                            offer_effective_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            offer_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            plan = '', 
                            product = '', 
                            product_external_name = '', 
                            provider = '', 
                            quote_external_name = '', 
                            state = openapi_client.models.state.state(), 
                            subscription_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            usage_reporting_id = '', ), 
                        existing_price_model_type = '', 
                        has_entitlement_changed = True, 
                        private_offer = openapi_client.models.gcp_marketplace_existing_private_offer.GcpMarketplaceExistingPrivateOffer(
                            agreement = '', 
                            installment_timeline = openapi_client.models.gcp_marketplace_private_offer_installment_timeline.GcpMarketplacePrivateOfferInstallmentTimeline(
                                installments = [
                                    openapi_client.models.gcp_marketplace_private_offer_installment.GcpMarketplacePrivateOfferInstallment(
                                        price_model = openapi_client.models.gcp_marketplace_private_offer_price_model.GcpMarketplacePrivateOfferPriceModel(
                                            base_offer = '', 
                                            commitment = openapi_client.models.gcp_marketplace_private_offer_price_model_commitment.GcpMarketplacePrivateOfferPriceModelCommitment(
                                                commitment_amount_per_period = openapi_client.models.gcp_price_value.GcpPriceValue(
                                                    currency_code = '', 
                                                    nanos = 56, 
                                                    units = '', ), 
                                                discount = openapi_client.models.gcp_marketplace_private_offer_price_model_discount.GcpMarketplacePrivateOfferPriceModelDiscount(
                                                    discount_percentage = openapi_client.models.discount_percentage.discountPercentage(), 
                                                    discounted_price = openapi_client.models.discounted_price.discountedPrice(), ), 
                                                period = openapi_client.models.gcp_period_duration.GcpPeriodDuration(
                                                    count = 56, 
                                                    unit = 'MONTHLY_PERIOD', ), ), 
                                            fixed_price = openapi_client.models.gcp_marketplace_private_offer_price_model_fixed.GcpMarketplacePrivateOfferPriceModelFixed(), 
                                            one_time_credit = openapi_client.models.one_time_credit.oneTimeCredit(), 
                                            overage = openapi_client.models.gcp_marketplace_private_offer_price_model_overage.GcpMarketplacePrivateOfferPriceModelOverage(
                                                sku_discounts = [
                                                    None
                                                    ], ), 
                                            payg = openapi_client.models.payg.payg(), 
                                            previous_credit_balance_policy = '', ), 
                                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], ), 
                            name = '', 
                            offer_term = openapi_client.models.gcp_marketplace_private_offer_term.GcpMarketplacePrivateOfferTerm(
                                enable_scheduled_start_times = True, 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                start_policy = '', 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                term_duration = openapi_client.models.gcp_period_duration.GcpPeriodDuration(
                                    count = 56, ), ), 
                            payment_schedule = '', 
                            price_model = openapi_client.models.price_model.priceModel(), 
                            service_level = '', ), 
                        standard_offer = openapi_client.models.standard_offer.standardOffer(), ), 
                    expire_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    features = [
                        openapi_client.models.gcp_marketplace_product_feature_value.GcpMarketplaceProductFeatureValue(
                            feature_description = '', 
                            feature_name = '', 
                            feature_title = '', 
                            feature_value = '', )
                        ], 
                    installment_timeline = openapi_client.models.gcp_marketplace_private_offer_installment_timeline.GcpMarketplacePrivateOfferInstallmentTimeline(), 
                    lifecycle_state = '', 
                    metric_information = openapi_client.models.gcp_marketplace_private_offer_metric_information.GcpMarketplacePrivateOfferMetricInformation(
                        metric_details = [
                            openapi_client.models.gcp_marketplace_private_offer_metric_detail.GcpMarketplacePrivateOfferMetricDetail(
                                display_name = '', 
                                parent_commerce_service = '', 
                                sku_id = '', 
                                tiers = [
                                    openapi_client.models.gcp_price_tier.GcpPriceTier(
                                        from_amount = 1.337, 
                                        price = openapi_client.models.gcp_price_value.GcpPriceValue(
                                            currency_code = '', 
                                            nanos = 56, 
                                            units = '', ), 
                                        starting_usage_amount = '', )
                                    ], 
                                unit_description = '', )
                            ], ), 
                    migration_metadata = openapi_client.models.gcp_marketplace_private_offer_migration_metadata.GcpMarketplacePrivateOfferMigrationMetadata(
                        inventory_flavor_external_name = '', 
                        product_external_name = '', 
                        provider_id = '', ), 
                    name = '', 
                    offer_id = '', 
                    offer_source = '', 
                    offer_state = 'OFFER_PUBLISHED', 
                    offer_term = openapi_client.models.gcp_marketplace_private_offer_term.GcpMarketplacePrivateOfferTerm(
                        enable_scheduled_start_times = True, 
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_policy = '', 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    payment_schedule = openapi_client.models.payment_schedule.paymentSchedule(), 
                    policies = {
                        'key' : ''
                        }, 
                    price_model = openapi_client.models.price_model.priceModel(), 
                    price_model_type = '', 
                    provider_cancellation_internal_note = '', 
                    provider_info = openapi_client.models.gcp_marketplace_private_offer_provider_info.GcpMarketplacePrivateOfferProviderInfo(
                        creator_email_address = '', 
                        sales_contact_email = '', 
                        sales_contact_name = '', ), 
                    provider_internal_note = '', 
                    provider_public_note = '', 
                    purchase_channel = openapi_client.models.gcp_marketplace_purchase_channel.GcpMarketplacePurchaseChannel(
                        marketplace = True, 
                        reseller = True, ), 
                    purchase_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    replacement_metadata = openapi_client.models.gcp_marketplace_private_offer_replacement_metadata.GcpMarketplacePrivateOfferReplacementMetadata(
                        coterm_alignment = '', 
                        replaced_offer = '', 
                        replaced_offer_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        replacement_policy = '', ), 
                    service_level = '', 
                    update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    use_legacy_partner_eula = True, 
                    user_labels = [
                        ''
                        ], ),
                gcp_provider_info = openapi_client.models.gcp_marketplace_private_offer_provider_info.GcpMarketplacePrivateOfferProviderInfo(
                    creator_email_address = '', 
                    sales_contact_email = '', 
                    sales_contact_name = '', ),
                gcp_provider_internal_note = '',
                gcp_provider_public_note = '',
                gcp_usage_plan_price_model = '',
                payment_installments = [
                    openapi_client.models.payment_installment.PaymentInstallment(
                        amount = 1.337, 
                        charge_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        charge_on_str = '', 
                        credit = 1.337, 
                        discount_percentage = 1.337, 
                        original_amount = 1.337, )
                    ],
                private_offer_url = '',
                refund_cancelation_policy = '',
                seller_notes = '',
                visibility = 'PRIVATE'
            )
        else:
            return OfferInfo(
        )
        """

    def testOfferInfo(self):
        """Test OfferInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
