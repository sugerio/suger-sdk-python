# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.integration_info import \
    IntegrationInfo  # noqa: E501


class TestIntegrationInfo(unittest.TestCase):
    """IntegrationInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IntegrationInfo:
        """Test IntegrationInfo
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `IntegrationInfo`
        """
        model = IntegrationInfo()  # noqa: E501
        if include_optional:
            return IntegrationInfo(
                alibaba_integration = openapi_client.models.alibaba_marketplace_integration.AlibabaMarketplaceIntegration(
                    aliyun_uid = '', 
                    auto_cancel_suspended_entitlements_enabled = True, 
                    credential = openapi_client.models.alibaba_integration_credential.AlibabaIntegrationCredential(
                        access_key_id = '', 
                        access_key_secret = '', 
                        region_id = '', 
                        spi_key = '', ), 
                    days_until_auto_cancel_suspended_entitlements = 56, 
                    product_codes = [
                        ''
                        ], 
                    secret_key = '', 
                    usage_metering_disabled = True, ),
                aws_ace_integration = openapi_client.models.aws_ace_integration.AwsAceIntegration(
                    credential = openapi_client.models.credential.credential(), 
                    enable_assume_iam_role = True, 
                    iam_role_arn = '', 
                    partner_id = '', 
                    paused = True, 
                    s3_bucket_name = '', 
                    s3_bucket_region = '', 
                    secret_key = '', ),
                aws_integration = openapi_client.models.aws_marketplace_integration.AwsMarketplaceIntegration(
                    basic_info_full_sync_done = True, 
                    create_entitlement_before_notification_enabled = True, 
                    enable_marketplace_beta_api = True, 
                    event_bridge_rule_name = '', 
                    external_id = '', 
                    iam_role_arn = '', 
                    marketplace_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    mcas_full_sync_done = True, 
                    mcas_iam_role_arn = '', 
                    mcas_s3_bucket = '', 
                    mcas_sns_topic = '', 
                    mcas_sync_disabled = True, 
                    mdfs_full_sync_done = True, 
                    mdfs_kms_key_arn = '', 
                    mdfs_s3_bucket_arn = '', 
                    mdfs_sync_disabled = True, 
                    policy_arns = [
                        ''
                        ], 
                    revenue_record_full_sync_done = True, 
                    signup_redirect_without_entitlement_enabled = True, 
                    usage_metering_disabled = True, ),
                azure_integration = openapi_client.models.azure_integration.AzureIntegration(
                    cma_full_sync_done = True, 
                    credential = openapi_client.models.azure_integration_credential.AzureIntegrationCredential(
                        access_token = '', 
                        client_id = '', 
                        client_secret = '', 
                        expires_on = '', 
                        refresh_token = '', 
                        tenant_id = '', 
                        token_scope = '', 
                        token_type = '', ), 
                    partner_center_referral_sync_paused = True, 
                    revenue_record_full_sync_done = True, 
                    secret_key = '', ),
                gcp_integration = openapi_client.models.gcp_integration.GcpIntegration(
                    enable_chrome_sync = True, 
                    enable_manual_approve_entitlement = True, 
                    gcp_project_id = '', 
                    gcp_project_number = '', 
                    identity_provider_id = '', 
                    login_url = '', 
                    partner_id = '', 
                    pubsub_subscription = '', 
                    pubsub_topic = '', 
                    report_bucket = '', 
                    report_full_sync_done = True, 
                    report_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    report_sync_disabled = True, 
                    revenue_record_full_sync_done = True, 
                    revenue_record_sync_disabled = True, 
                    service_account_email = '', 
                    service_names = [
                        ''
                        ], 
                    signup_redirect_without_entitlement_enabled = True, 
                    usage_metering_disabled = True, 
                    workload_identity_pool_id = '', ),
                hubspot_crm_integration = openapi_client.models.hubspot_crm_integration.HubspotCrmIntegration(
                    company_fields = [
                        ''
                        ], 
                    contact_fields = [
                        ''
                        ], 
                    credential = openapi_client.models.hubspot_crm_credential.HubspotCrmCredential(
                        access_token = '', 
                        acquired_on = 56, 
                        expires_in = 56, 
                        refresh_token = '', ), 
                    deal_fields = [
                        ''
                        ], 
                    paused = True, 
                    portal_id = 56, 
                    secret_key = '', 
                    sync_filters = [
                        openapi_client.models.hubspot_sync_filter.HubspotSyncFilter(
                            operator = '', 
                            property_name = '', 
                            value = '', )
                        ], ),
                metronome_integration = openapi_client.models.metronome_integration.MetronomeIntegration(
                    api_token = '', 
                    billable_metric_full_list = [
                        openapi_client.models.metronome_billable_metric.MetronomeBillableMetric(
                            group_by = [
                                ''
                                ], 
                            id = '', 
                            name = '', )
                        ], 
                    billable_metric_whitelist = [
                        openapi_client.models.metronome_billable_metric.MetronomeBillableMetric(
                            id = '', 
                            name = '', )
                        ], 
                    enable_auto_report_usage = True, 
                    enable_billable_metric_whitelist = True, 
                    secret_key = '', ),
                orb_integration = openapi_client.models.orb_integration.OrbIntegration(
                    api_key = '', 
                    billable_metric_full_list = [
                        openapi_client.models.orb_billable_metric.OrbBillableMetric(
                            description = '', 
                            id = '', 
                            metadata = {
                                'key' : ''
                                }, 
                            name = '', 
                            status = 'active', )
                        ], 
                    billing_mode = openapi_client.models.billing_mode.billingMode(), 
                    enable_auto_report_usage = True, 
                    plan_full_list = [
                        openapi_client.models.orb_plan.OrbPlan(
                            base_plan_id = '', 
                            created_at = '', 
                            currency = '', 
                            default_invoice_memo = '', 
                            description = '', 
                            discount = openapi_client.models.orb_price_discount.OrbPriceDiscount(
                                amount_discount = '', 
                                applies_to_price_ids = [
                                    ''
                                    ], 
                                discount_type = 'percentage', 
                                percentage_discount = 1.337, 
                                trial_amount_discount = '', 
                                usage_discount = '', ), 
                            external_plan_id = '', 
                            id = '', 
                            invoicing_currency = '', 
                            maximum = openapi_client.models.orb_price_maximum.OrbPriceMaximum(
                                maximum_amount = '', ), 
                            metering_dimensions = [
                                openapi_client.models.metering_dimension.MeteringDimension(
                                    category = '', 
                                    description = '', 
                                    included_base_quantities = [
                                        openapi_client.models.azure_included_base_quantity.AzureIncludedBaseQuantity(
                                            is_infinite = True, 
                                            quantity = 1.337, 
                                            recurring_unit = 'Monthly', )
                                        ], 
                                    key = '', 
                                    name = '', 
                                    plan_id = '', 
                                    plan_name = '', 
                                    price_tiers = [
                                        openapi_client.models.gcp_price_tier.GcpPriceTier(
                                            from_amount = 1.337, 
                                            price = openapi_client.models.gcp_price_value.GcpPriceValue(
                                                currency_code = '', 
                                                nanos = 56, 
                                                units = '', ), 
                                            starting_usage_amount = '', )
                                        ], 
                                    rate = 1.337, 
                                    sku_id = '', 
                                    types = [
                                        ''
                                        ], 
                                    usage_count = openapi_client.models.usage_count.usageCount(), 
                                    value_type = openapi_client.models.value_type.valueType(), )
                                ], 
                            minimum = openapi_client.models.orb_price_minimum.OrbPriceMinimum(
                                minimum_amount = '', ), 
                            name = '', 
                            net_terms = 56, 
                            plan_phases = [
                                openapi_client.models.orb_plan_phase.OrbPlanPhase(
                                    description = '', 
                                    duration = 56, 
                                    duration_unit = 'monthly', 
                                    name = '', 
                                    order = 56, )
                                ], 
                            prices = [
                                openapi_client.models.orb_price.OrbPrice(
                                    billable_metric = openapi_client.models.orb_billable_metric.OrbBillableMetric(
                                        description = '', 
                                        id = '', 
                                        name = '', ), 
                                    bps_config = openapi_client.models.orb_price_model_config_bps.OrbPriceModelConfig_BPS(
                                        bps = 1.337, 
                                        per_unit_maximum = '', ), 
                                    bulk_bps_config = openapi_client.models.orb_price_model_config_bulk_bps.OrbPriceModelConfig_BULK_BPS(
                                        tiers = [
                                            openapi_client.models.orb_price_tier.OrbPriceTier(
                                                bps = 1.337, 
                                                first_unit = '', 
                                                last_unit = '', 
                                                maximum_amount = '', 
                                                maximum_units = 1.337, 
                                                minimum_amount = '', 
                                                per_unit_maximum = '', 
                                                unit_amount = '', )
                                            ], ), 
                                    bulk_config = openapi_client.models.orb_price_model_config_bulk.OrbPriceModelConfig_BULK(), 
                                    cadence = 'monthly', 
                                    created_at = '', 
                                    currency = '', 
                                    fixed_price_quantity = 56, 
                                    id = '', 
                                    item = openapi_client.models.orb_item.OrbItem(
                                        created_at = '', 
                                        external_connections = [
                                            openapi_client.models.orb_external_connection.OrbExternalConnection(
                                                external_connection_name = 'stripe', 
                                                external_entity_id = '', )
                                            ], 
                                        id = '', 
                                        name = '', ), 
                                    matrix_config = openapi_client.models.orb_price_model_config_matrix.OrbPriceModelConfig_MATRIX(
                                        default_unit_amount = '', 
                                        dimensions = [
                                            ''
                                            ], 
                                        matrix_values = [
                                            openapi_client.models.orb_matrix_price_value.OrbMatrixPriceValue(
                                                dimension_values = [
                                                    ''
                                                    ], 
                                                unit_amount = '', )
                                            ], ), 
                                    model_type = '', 
                                    name = '', 
                                    package_config = openapi_client.models.orb_price_model_config_package.OrbPriceModelConfig_PACKAGE(
                                        package_amount = '', 
                                        package_size = 1.337, ), 
                                    plan_phase_order = 56, 
                                    tiered_bps_config = openapi_client.models.orb_price_model_config_tiered_bps.OrbPriceModelConfig_TIERED_BPS(), 
                                    tiered_config = openapi_client.models.orb_price_model_config_tiered.OrbPriceModelConfig_TIERED(), 
                                    unit_config = openapi_client.models.orb_price_model_config_unit.OrbPriceModelConfig_UNIT(
                                        unit_amount = '', ), )
                                ], 
                            product = openapi_client.models.orb_product.OrbProduct(
                                created_at = '', 
                                id = '', 
                                name = '', ), 
                            trial_config = openapi_client.models.orb_trial_config.OrbTrialConfig(
                                trial_period = 56, 
                                trial_period_unit = 'days', ), )
                        ], 
                    secret_key = '', ),
                salesforce_crm_integration = openapi_client.models.salesforce_crm_integration.SalesforceCrmIntegration(
                    credential = openapi_client.models.credential.credential(), 
                    filters = [
                        openapi_client.models.salesforce_sync_filter.SalesforceSyncFilter(
                            field_name = '', 
                            operator = 'EQ', 
                            value = openapi_client.models.value.value(), )
                        ], 
                    instance_url = '', 
                    is_sandbox = True, 
                    paused = True, 
                    secret_key = '', 
                    subdomain = '', 
                    suger_app_installed = True, ),
                slack_integration = openapi_client.models.slack_integration.SlackIntegration(
                    access_token = '', 
                    app_id = '', 
                    authed_user = openapi_client.models.slack/o_auth_v2_response_authed_user.slack.OAuthV2ResponseAuthedUser(
                        access_token = '', 
                        expires_in = 56, 
                        id = '', 
                        refresh_token = '', 
                        scope = '', 
                        token_type = '', ), 
                    bot_user_id = '', 
                    enterprise = openapi_client.models.slack/o_auth_v2_response_enterprise.slack.OAuthV2ResponseEnterprise(
                        id = '', 
                        name = '', ), 
                    expires_in = 56, 
                    incoming_webhook = openapi_client.models.slack/o_auth_response_incoming_webhook.slack.OAuthResponseIncomingWebhook(
                        channel = '', 
                        channel_id = '', 
                        configuration_url = '', 
                        url = '', ), 
                    redirect_url = '', 
                    refresh_token = '', 
                    scope = '', 
                    team = openapi_client.models.slack/o_auth_v2_response_team.slack.OAuthV2ResponseTeam(
                        id = '', 
                        name = '', ), 
                    token_type = '', )
            )
        else:
            return IntegrationInfo(
        )
        """

    def testIntegrationInfo(self):
        """Test IntegrationInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
