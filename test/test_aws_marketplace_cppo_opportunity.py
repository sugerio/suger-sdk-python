# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.aws_marketplace_cppo_opportunity import AwsMarketplaceCppoOpportunity

class TestAwsMarketplaceCppoOpportunity(unittest.TestCase):
    """AwsMarketplaceCppoOpportunity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AwsMarketplaceCppoOpportunity:
        """Test AwsMarketplaceCppoOpportunity
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AwsMarketplaceCppoOpportunity`
        """
        model = AwsMarketplaceCppoOpportunity()
        if include_optional:
            return AwsMarketplaceCppoOpportunity(
                created_date = '',
                description = '',
                dimensions = [
                    {"Types":["Types","Types"],"Description":"Description","Length":3,"Rate":6.965117697638846,"TimeUnit":"DAY","Unit":"Unit","Key":"Key","Name":"Name"}
                    ],
                manufacturer_account_id = '',
                manufacturer_legal_name = '',
                name = '',
                offer_details = suger_sdk_python.models.aws_marketplace_cppo_opportunity_offer_details.AwsMarketplaceCppoOpportunityOfferDetails(
                    offer_created_count = 56, 
                    offer_extended_status = '', ),
                pre_existing_buyer_agreement = suger_sdk_python.models.aws_marketplace_pre_existing_agreement.AwsMarketplacePreExistingAgreement(
                    acquisition_channel = suger_sdk_python.models.acquisition_channel.AcquisitionChannel(), 
                    pricing_model = suger_sdk_python.models.pricing_model.PricingModel(), ),
                product_id = '',
                product_name = '',
                rules = [
                    suger_sdk_python.models.aws_marketplace_cppo_opportunity_rule.AwsMarketplaceCppoOpportunityRule(
                        availability_end_date = '', 
                        id = '', 
                        negative_targeting = suger_sdk_python.models.negative_targeting.NegativeTargeting(), 
                        offers_max_quantity = 56, 
                        positive_targeting = suger_sdk_python.models.positive_targeting.PositiveTargeting(), 
                        reseller_account_id = '', 
                        reseller_legal_name = '', 
                        type = 'AvailabilityRule', 
                        usage = '', )
                    ],
                status = 'Active',
                terms = [
                    suger_sdk_python.models.aws_marketplace_cppo_opportunity_term.AwsMarketplaceCppoOpportunityTerm(
                        currency_code = '', 
                        documents = [
                            suger_sdk_python.models.aws_marketplace_catalog_legal_term_document.AwsMarketplaceCatalogLegalTermDocument(
                                type = 'CustomEula', 
                                url = '', 
                                version = '', )
                            ], 
                        duration = '', 
                        grants = [
                            suger_sdk_python.models.aws_marketplace_cppo_opportunity_upfront_price_grant.AwsMarketplaceCppoOpportunityUpfrontPriceGrant(
                                dimension_key = '', 
                                max_quantity = 56, )
                            ], 
                        id = '', 
                        maximum_agreement_start_date = '', 
                        positive_targeting = suger_sdk_python.models.aws_marketplace_cppo_opportunity_positive_targeting.AwsMarketplaceCppoOpportunityPositiveTargeting(
                            buyer_accounts = [
                                suger_sdk_python.models.aws_marketplace_buyer_account.AwsMarketplaceBuyerAccount(
                                    aws_account_id = '', )
                                ], 
                            country_codes = [
                                ''
                                ], ), 
                        price = '', 
                        rate_cards = [
                            suger_sdk_python.models.aws_marketplace_catalog_pricing_term_rate_card.AwsMarketplaceCatalogPricingTermRateCard(
                                constraints = suger_sdk_python.models.constraints.Constraints(), 
                                rate_card = [
                                    suger_sdk_python.models.aws_marketplace_catalog_pricing_term_rate_card_item.AwsMarketplaceCatalogPricingTermRateCardItem(
                                        description = '', 
                                        dimension_key = '', 
                                        display_name = '', 
                                        price = '', 
                                        quantity = '', 
                                        unit = '', )
                                    ], 
                                selector = suger_sdk_python.models.selector.Selector(), )
                            ], 
                        schedule = [
                            suger_sdk_python.models.aws_marketplace_cppo_opportunity_payment_schedule.AwsMarketplaceCppoOpportunityPaymentSchedule(
                                charge_amount = '', 
                                charge_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        type = 'BuyerTargetingTerm', )
                    ],
                discount_type = 'DISCOUNT_PERCENT',
                opportunity_duration_type = 'SPECIFIC_DATES',
                opportunity_id = '',
                partner_id = ''
            )
        else:
            return AwsMarketplaceCppoOpportunity(
        )
        """

    def testAwsMarketplaceCppoOpportunity(self):
        """Test AwsMarketplaceCppoOpportunity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
