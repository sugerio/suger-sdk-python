# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.aws_marketplace_cppo_opportunity import \
    AwsMarketplaceCppoOpportunity  # noqa: E501


class TestAwsMarketplaceCppoOpportunity(unittest.TestCase):
    """AwsMarketplaceCppoOpportunity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AwsMarketplaceCppoOpportunity:
        """Test AwsMarketplaceCppoOpportunity
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `AwsMarketplaceCppoOpportunity`
        """
        model = AwsMarketplaceCppoOpportunity()  # noqa: E501
        if include_optional:
            return AwsMarketplaceCppoOpportunity(
                buyer_ids = [
                    ''
                    ],
                buyer_names = [
                    ''
                    ],
                contract_duration_in_days = 56,
                created_by = '',
                created_date = '',
                custom_price_terms = openapi_client.models.aws_marketplace_cppo_price_terms.AwsMarketplaceCppoPriceTerms(
                    all_consumption_unit_column_names = [
                        ''
                        ], 
                    detailed_view = openapi_client.models.aws_marketplace_cppo_price_term_detailed_view.AwsMarketplaceCppoPriceTermDetailedView(
                        additional_consumption_unit_column_names = [
                            ''
                            ], 
                        additional_consumption_unit_entries = [
                            openapi_client.models.aws_marketplace_cppo_price_term_entry.AwsMarketplaceCppoPriceTermEntry(
                                consumption_unit_column_names = [
                                    ''
                                    ], 
                                description = '', 
                                display_name = '', 
                                is_custom_dimension = True, 
                                is_deleted = True, 
                                name = '', 
                                price_per_consumption_unit = {
                                    'key' : ''
                                    }, 
                                pricing_dimension = '', )
                            ], 
                        consumption_unit_column_names = [
                            ''
                            ], 
                        consumption_unit_entries = [
                            openapi_client.models.aws_marketplace_cppo_price_term_entry.AwsMarketplaceCppoPriceTermEntry(
                                description = '', 
                                display_name = '', 
                                is_custom_dimension = True, 
                                is_deleted = True, 
                                name = '', 
                                pricing_dimension = '', )
                            ], ), 
                    entries = [
                        
                        ], ),
                discount = '',
                discount_percent = 1.337,
                discount_type = 'DISCOUNT_PERCENT',
                errors = [
                    None
                    ],
                expiration_date = '',
                listing_fee_renewal = True,
                manufacturer_id = '',
                manufacturer_name = '',
                offers_count = 56,
                opportunity_discription = '',
                opportunity_duration_type = 'SPECIFIC_DATES',
                opportunity_eula = openapi_client.models.aws_marketplace_cppo_opportunity_eula.AwsMarketplaceCppoOpportunityEula(
                    access_url = '', 
                    key = '', 
                    object_url = '', ),
                opportunity_id = '',
                opportunity_name = '',
                opportunity_rcmp = openapi_client.models.aws_marketplace_cppo_opportunity_eula.AwsMarketplaceCppoOpportunityEula(
                    access_url = '', 
                    key = '', 
                    object_url = '', ),
                partner_id = '',
                partner_name = '',
                payment_terms = openapi_client.models.aws_marketplace_cppo_payment_terms.AwsMarketplaceCppoPaymentTerms(
                    currency_code = '', 
                    entitlement = [
                        openapi_client.models.aws_marketplace_cppo_payment_terms_entitlement.AwsMarketplaceCppoPaymentTermsEntitlement(
                            name = '', 
                            quantity = 56, )
                        ], 
                    schedule = [
                        openapi_client.models.aws_marketplace_cppo_payment_schedule.AwsMarketplaceCppoPaymentSchedule(
                            amount = 1.337, 
                            charge_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    schedule_type = '', 
                    selected_duration = '', ),
                product_id = '',
                product_name = '',
                product_type = '',
                sppo = True,
                status = 'active',
                usage_allowed = 56
            )
        else:
            return AwsMarketplaceCppoOpportunity(
        )
        """

    def testAwsMarketplaceCppoOpportunity(self):
        """Test AwsMarketplaceCppoOpportunity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
