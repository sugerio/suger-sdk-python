# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.snowflake_marketplace_product_pricing_plan import SnowflakeMarketplaceProductPricingPlan

class TestSnowflakeMarketplaceProductPricingPlan(unittest.TestCase):
    """SnowflakeMarketplaceProductPricingPlan unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SnowflakeMarketplaceProductPricingPlan:
        """Test SnowflakeMarketplaceProductPricingPlan
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SnowflakeMarketplaceProductPricingPlan`
        """
        model = SnowflakeMarketplaceProductPricingPlan()
        if include_optional:
            return SnowflakeMarketplaceProductPricingPlan(
                base_fee = 1.337,
                billing_duration_months = '0',
                comment = '',
                contract_duration_months = '0',
                contract_type = '',
                currency = '',
                display_name = '',
                metadata = {
                    'key' : ''
                    },
                name = '',
                pricing_model = '',
                sales_motion = '',
                state = '',
                updated_on = '',
                usage_details = {"free_unit_kind":"free_unit_kind","free_units":5.533258397034986,"usage_unit_kind":"usage_unit_kind","max_fee":3.2588565619047607,"usage_unit_price":4.078845849666752},
                visibility = ''
            )
        else:
            return SnowflakeMarketplaceProductPricingPlan(
        )
        """

    def testSnowflakeMarketplaceProductPricingPlan(self):
        """Test SnowflakeMarketplaceProductPricingPlan"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
