# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.buyer_info import BuyerInfo

class TestBuyerInfo(unittest.TestCase):
    """BuyerInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BuyerInfo:
        """Test BuyerInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BuyerInfo`
        """
        model = BuyerInfo()
        if include_optional:
            return BuyerInfo(
                adyen_buyer = suger_sdk_python.models.adyen_buyer.AdyenBuyer(
                    settings = { }, 
                    shopper_id = '', ),
                aws_buyer = suger_sdk_python.models.aws_account_identifier.AwsAccountIdentifier(
                    aws_account_id = '', 
                    aws_customer_id = '', 
                    data_feed_account_id = '', ),
                azure_buyer = {"firstName":"firstName","lastName":"lastName","licenseType":"licenseType","puid":"puid","customerId":"customerId","tenantId":"tenantId","billingAccountId":"billingAccountId","emailId":"emailId","objectId":"objectId"},
                collectable_amount = 1.337,
                company_info = {"country":"country","emailDomain":"emailDomain","city":"city","postalCode":"postalCode","name":"name","addressLine1":"addressLine1","addressLine2":"addressLine2","state":"state","validFrom":"validFrom"},
                customer_id = '',
                disbursed_amount = 1.337,
                email_address = '',
                fields = { },
                gcp_buyer = suger_sdk_python.models.gcp_marketplace_user_account.GcpMarketplaceUserAccount(
                    approvals = [
                        suger_sdk_python.models.gcp_marketplace_user_account_approval.GcpMarketplaceUserAccountApproval(
                            name = '', 
                            reason = '', 
                            state = 'STATE_UNSPECIFIED', 
                            update_time = '', )
                        ], 
                    billing_account_id = '', 
                    create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    input_properties = [
                        56
                        ], 
                    name = '', 
                    provider = '', 
                    state = suger_sdk_python.models.state.state(), 
                    update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user_info = suger_sdk_python.models.gcp_user_info.GcpUserInfo(
                        roles = [
                            ''
                            ], 
                        user_identity = '', ), ),
                gross_amount = 1.337,
                invoiced_amount = 1.337,
                lago_customer_id = '',
                last_modified_by = '',
                metronome_customer_id = '',
                orb_customer_id = '',
                payment_config = suger_sdk_python.models.payment_config.PaymentConfig(
                    allowed_wallet_types = [
                        'ach_debit'
                        ], 
                    currency = '', 
                    default_wallet_id = '', ),
                spa_url = '',
                stripe_buyer = suger_sdk_python.models.stripe_customer.StripeCustomer(
                    address = suger_sdk_python.models.stripe_customer_address.StripeCustomerAddress(
                        city = '', 
                        country = '', 
                        line1 = '', 
                        line2 = '', 
                        postal_code = '', 
                        state = '', ), 
                    description = '', 
                    email = '', 
                    id = '', 
                    metadata = {
                        'key' : ''
                        }, 
                    name = '', 
                    phone = '', )
            )
        else:
            return BuyerInfo(
        )
        """

    def testBuyerInfo(self):
        """Test BuyerInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
