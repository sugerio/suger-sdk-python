# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.azure_product_feature_availability import AzureProductFeatureAvailability

class TestAzureProductFeatureAvailability(unittest.TestCase):
    """AzureProductFeatureAvailability unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AzureProductFeatureAvailability:
        """Test AzureProductFeatureAvailability
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AzureProductFeatureAvailability`
        """
        model = AzureProductFeatureAvailability()
        if include_optional:
            return AzureProductFeatureAvailability(
                custom_meters = [
                    {"unitOfMeasure":"unitOfMeasure","displayName":"displayName","includedBaseQuantities":[{"quantity":4.145608029883936,"isInfinite":true,"recurringUnit":"Monthly"},{"quantity":4.145608029883936,"isInfinite":true,"recurringUnit":"Monthly"}],"isEnabled":true,"priceInUsd":5.025004791520295,"id":"id","uniqueID":"uniqueID"}
                    ],
                id = '',
                is_hidden = True,
                market_states = [
                    {"marketCode":"marketCode","state":"Disabled"}
                    ],
                markets = [
                    {"marketCode":"marketCode","friendlyName":"friendlyName"}
                    ],
                price_schedules = [
                    {"isBaseSchedule":true,"schedules":[{"pricingModel":"Flat","pricingUnits":[{"unitType":"unitType","name":"sharedcore","lowerUnit":9,"upperUnit":6,"isUnlimitedUnit":true},{"unitType":"unitType","name":"sharedcore","lowerUnit":9,"upperUnit":6,"isUnlimitedUnit":true}],"priceCadence":{"type":"Month","value":9},"retailPrice":{"openPrice":8.762042012749001,"priceTierID":"priceTierID","currencyCode":"currencyCode"}},{"pricingModel":"Flat","pricingUnits":[{"unitType":"unitType","name":"sharedcore","lowerUnit":9,"upperUnit":6,"isUnlimitedUnit":true},{"unitType":"unitType","name":"sharedcore","lowerUnit":9,"upperUnit":6,"isUnlimitedUnit":true}],"priceCadence":{"type":"Month","value":9},"retailPrice":{"openPrice":8.762042012749001,"priceTierID":"priceTierID","currencyCode":"currencyCode"}}],"dateTimeRange":{"endAt":{"dateTimeInUtc":"dateTimeInUtc","localizePerMarket":true},"startAt":{"dateTimeInUtc":"dateTimeInUtc","localizePerMarket":true}},"marketCodes":["marketCodes","marketCodes"],"friendlyName":"friendlyName"}
                    ],
                properties = [
                    {"type":"type","value":"value"}
                    ],
                resource_type = '',
                subscription_audiences = [
                    {"description":"description","id":"id"}
                    ],
                tenant_audiences = [
                    {"description":"description","id":"id"}
                    ],
                trial = {"duration":9,"dateTimeRange":{"endAt":{"dateTimeInUtc":"dateTimeInUtc","localizePerMarket":true},"startAt":{"dateTimeInUtc":"dateTimeInUtc","localizePerMarket":true}},"type":"NoTrial","durationType":"Minute"},
                visibility = 'Public'
            )
        else:
            return AzureProductFeatureAvailability(
        )
        """

    def testAzureProductFeatureAvailability(self):
        """Test AzureProductFeatureAvailability"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
