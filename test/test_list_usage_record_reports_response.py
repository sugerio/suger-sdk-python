# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.list_usage_record_reports_response import ListUsageRecordReportsResponse

class TestListUsageRecordReportsResponse(unittest.TestCase):
    """ListUsageRecordReportsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListUsageRecordReportsResponse:
        """Test ListUsageRecordReportsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListUsageRecordReportsResponse`
        """
        model = ListUsageRecordReportsResponse()
        if include_optional:
            return ListUsageRecordReportsResponse(
                next_offset = 56,
                usage_record_reports = [
                    {"organizationID":"organizationID","entitlementTermID":"entitlementTermID","creationTime":"2000-01-23T04:56:07.000+00:00","partner":"partner","productID":"productID","entitlementID":"entitlementID","id":"id","buyerID":"buyerID","info":{"creditRecords":{"key":2.3021358869347655},"usedCommitAmountIncrement":1.4894159098541704,"gcpMeteringRequest":"{}","alibabaMeteringResponse":"{}","usedCommitAmount":1.0246457001441578,"reportedRecords":{"key":1.2315135367772556},"usedCreditAmount":6.84685269835264,"alibabaMeteringRequest":"{}","dimensionUnitListPrice":{"key":9.301444243932576},"azureMeteringRequest":"{}","aggregatedBillableRecords":[{"amount":6.027456183070403,"quantity":1.4658129805029452,"name":"name","billableMetricInfo":{"groupBys":["groupBys","groupBys"],"propertyUniqueOn":"propertyUniqueOn","filterGroups":[{"filters":[{"valueType":"STRING","name":"name","operation":"IS","value":"{}"},{"valueType":"STRING","name":"name","operation":"IS","value":"{}"}]},{"filters":[{"valueType":"STRING","name":"name","operation":"IS","value":"{}"},{"valueType":"STRING","name":"name","operation":"IS","value":"{}"}]}]},"groupBysExpression":"groupBysExpression","billableMetricAggregationType":"COUNT","key":"key","uniqueCountAggregationResult":"{}"},{"amount":6.027456183070403,"quantity":1.4658129805029452,"name":"name","billableMetricInfo":{"groupBys":["groupBys","groupBys"],"propertyUniqueOn":"propertyUniqueOn","filterGroups":[{"filters":[{"valueType":"STRING","name":"name","operation":"IS","value":"{}"},{"valueType":"STRING","name":"name","operation":"IS","value":"{}"}]},{"filters":[{"valueType":"STRING","name":"name","operation":"IS","value":"{}"},{"valueType":"STRING","name":"name","operation":"IS","value":"{}"}]}]},"groupBysExpression":"groupBysExpression","billableMetricAggregationType":"COUNT","key":"key","uniqueCountAggregationResult":"{}"}],"awsMeteringResponse":"{}","dimensionUnitPrice":{"key":3.616076749251911},"startTime":"2000-01-23T04:56:07.000+00:00","decimalParts":{"key":7.061401241503109},"newDecimalParts":{"key":4.145608029883936},"recordsToReportBeforeAdjustmentAtListPrice":{"key":7.386281948385884},"azureMeteringResponse":"{}","message":"message","dimensionCategories":{"key":"dimensionCategories"},"awsMeteringRequest":"{}","usedCreditAmountIncrement":7.457744773683766,"gcpMeteringResponse":"{}","partner":"partner","includedRecords":{"key":2.027123023002322},"endTime":"2000-01-23T04:56:07.000+00:00","creditAmount":5.637376656633329,"commitAmount":5.962133916683182,"usageRecordGroupIds":["usageRecordGroupIds","usageRecordGroupIds"],"status":""}}
                    ]
            )
        else:
            return ListUsageRecordReportsResponse(
        )
        """

    def testListUsageRecordReportsResponse(self):
        """Test ListUsageRecordReportsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
