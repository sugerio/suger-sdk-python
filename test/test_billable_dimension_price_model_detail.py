# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.billable_dimension_price_model_detail import BillableDimensionPriceModelDetail

class TestBillableDimensionPriceModelDetail(unittest.TestCase):
    """BillableDimensionPriceModelDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillableDimensionPriceModelDetail:
        """Test BillableDimensionPriceModelDetail
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillableDimensionPriceModelDetail`
        """
        model = BillableDimensionPriceModelDetail()
        if include_optional:
            return BillableDimensionPriceModelDetail(
                amount = 1.337,
                billable_metric_key = {"groupBysExpression":"groupBysExpression","id":"id"},
                category = 'basic',
                details = [
                    {"feeExpressions":"feeExpressions","descriptions":"descriptions"}
                    ],
                discount = {"discountType":"PERCENTAGE","value":1.4658129805029452},
                discount_expression = '',
                is_trial = True,
                minimum_commit = 1.337,
                minimum_commit_scope = '',
                name = '',
                quantity = 1.337
            )
        else:
            return BillableDimensionPriceModelDetail(
        )
        """

    def testBillableDimensionPriceModelDetail(self):
        """Test BillableDimensionPriceModelDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
