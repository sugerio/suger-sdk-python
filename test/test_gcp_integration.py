# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.gcp_integration import GcpIntegration  # noqa: E501


class TestGcpIntegration(unittest.TestCase):
    """GcpIntegration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GcpIntegration:
        """Test GcpIntegration
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `GcpIntegration`
        """
        model = GcpIntegration()  # noqa: E501
        if include_optional:
            return GcpIntegration(
                enable_chrome_sync = True,
                enable_manual_approve_entitlement = True,
                gcp_project_id = '',
                gcp_project_number = '',
                identity_provider_id = '',
                login_url = '',
                partner_id = '',
                pubsub_subscription = '',
                pubsub_topic = '',
                report_bucket = '',
                report_full_sync_done = True,
                report_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                report_sync_disabled = True,
                revenue_record_full_sync_done = True,
                revenue_record_sync_disabled = True,
                service_account_email = '',
                service_names = [
                    ''
                    ],
                signup_redirect_without_entitlement_enabled = True,
                usage_metering_disabled = True,
                workload_identity_pool_id = ''
            )
        else:
            return GcpIntegration(
        )
        """

    def testGcpIntegration(self):
        """Test GcpIntegration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
