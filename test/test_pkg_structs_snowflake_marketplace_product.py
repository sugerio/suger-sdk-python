# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.pkg_structs_snowflake_marketplace_product import PkgStructsSnowflakeMarketplaceProduct

class TestPkgStructsSnowflakeMarketplaceProduct(unittest.TestCase):
    """PkgStructsSnowflakeMarketplaceProduct unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PkgStructsSnowflakeMarketplaceProduct:
        """Test PkgStructsSnowflakeMarketplaceProduct
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PkgStructsSnowflakeMarketplaceProduct`
        """
        model = PkgStructsSnowflakeMarketplaceProduct()
        if include_optional:
            return PkgStructsSnowflakeMarketplaceProduct(
                comment = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                created_on = suger_sdk_python.models.database_sql/null_time.database_sql.NullTime(
                    time = '', 
                    valid = True, ),
                detailed_target_accounts = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                distribution = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                global_name = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                is_application = suger_sdk_python.models.database_sql/null_bool.database_sql.NullBool(
                    bool = True, 
                    valid = True, ),
                is_by_request = suger_sdk_python.models.database_sql/null_bool.database_sql.NullBool(
                    bool = True, 
                    valid = True, ),
                is_limited_trial = suger_sdk_python.models.database_sql/null_bool.database_sql.NullBool(
                    bool = True, 
                    valid = True, ),
                is_monetized = suger_sdk_python.models.database_sql/null_bool.database_sql.NullBool(
                    bool = True, 
                    valid = True, ),
                is_mountless_queryable = suger_sdk_python.models.database_sql/null_bool.database_sql.NullBool(
                    bool = True, 
                    valid = True, ),
                is_targeted = suger_sdk_python.models.database_sql/null_bool.database_sql.NullBool(
                    bool = True, 
                    valid = True, ),
                owner = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                owner_role_type = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                profile = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                published_on = suger_sdk_python.models.database_sql/null_time.database_sql.NullTime(
                    time = '', 
                    valid = True, ),
                regions = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                rejected_on = suger_sdk_python.models.database_sql/null_time.database_sql.NullTime(
                    time = '', 
                    valid = True, ),
                review_state = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                state = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                subtitle = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                target_accounts = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                title = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                uniform_listing_locator = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                updated_on = suger_sdk_python.models.database_sql/null_time.database_sql.NullTime(
                    time = '', 
                    valid = True, ),
                name = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, ),
                organization_profile_name = suger_sdk_python.models.database_sql/null_string.database_sql.NullString(
                    string = '', 
                    valid = True, )
            )
        else:
            return PkgStructsSnowflakeMarketplaceProduct(
        )
        """

    def testPkgStructsSnowflakeMarketplaceProduct(self):
        """Test PkgStructsSnowflakeMarketplaceProduct"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
