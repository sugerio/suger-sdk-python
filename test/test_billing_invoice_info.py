# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.billing_invoice_info import BillingInvoiceInfo

class TestBillingInvoiceInfo(unittest.TestCase):
    """BillingInvoiceInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillingInvoiceInfo:
        """Test BillingInvoiceInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillingInvoiceInfo`
        """
        model = BillingInvoiceInfo()
        if include_optional:
            return BillingInvoiceInfo(
                add_fixed_fees = [
                    {"reason":"reason","quantity":0,"endDate":"2000-01-23T04:56:07.000+00:00","rate":6.027456183070403,"startDate":"2000-01-23T04:56:07.000+00:00"}
                    ],
                addon_detail = {"amount":0.8008281904610115,"name":"name","description":"description","chargeOn":"2000-01-23T04:56:07.000+00:00","id":"id"},
                adjust_discount_by_dimensions = [
                    {"reason":"reason","dimensionKey":"dimensionKey","discount":{"discountType":"PERCENTAGE","value":1.4658129805029452}}
                    ],
                adjust_minimum_spend_by_dimensions = [
                    {"minimumSpend":5.962133916683182,"reason":"reason","dimensionKey":"dimensionKey"}
                    ],
                adjust_overall_discount = suger_sdk_python.models.invoice_adjust_overall_discount.InvoiceAdjustOverallDiscount(
                    discount = {"discountType":"PERCENTAGE","value":1.4658129805029452}, 
                    reason = '', ),
                adjust_overall_minimum_spend = suger_sdk_python.models.invoice_adjust_overall_minimum_spend.InvoiceAdjustOverallMinimumSpend(
                    minimum_spend = 1.337, 
                    reason = '', ),
                amount = 1.337,
                billable_dimension_details = [
                    {"discountExpression":"discountExpression","amount":2.3021358869347655,"quantity":9.301444243932576,"minimumCommit":7.061401241503109,"name":"name","discount":"{}","details":[{"feeExpressions":"feeExpressions","descriptions":"descriptions"},{"feeExpressions":"feeExpressions","descriptions":"descriptions"}],"billableMetricKey":"{}","category":"{}","isTrial":true,"minimumCommitScope":"{}"}
                    ],
                commits_revenue_details = [
                    {"amount":3.616076749251911,"expression":"expression","quantity":2,"rate":4.145608029883936,"name":"name","description":"description","key":"key"}
                    ],
                creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                currency = '',
                description = '',
                due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                grace_period_in_days = 56,
                issue_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                memo = '',
                net_terms_in_days = 56,
                payment_installments_detail = {"amount":1.0246457001441578,"description":"description","chargeOn":"2000-01-23T04:56:07.000+00:00"},
                receipt_url = '',
                spa_url = '',
                trial_period_in_days = 56,
                usage_daily_revenues = [
                    {"date":"date","uniquePropertyItems":{"key":""},"quantity":6.84685269835264,"billableMetricKey":{"groupBysExpression":"groupBysExpression","id":"id"}}
                    ]
            )
        else:
            return BillingInvoiceInfo(
        )
        """

    def testBillingInvoiceInfo(self):
        """Test BillingInvoiceInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
