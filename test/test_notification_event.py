# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.notification_event import NotificationEvent

class TestNotificationEvent(unittest.TestCase):
    """NotificationEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NotificationEvent:
        """Test NotificationEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NotificationEvent`
        """
        model = NotificationEvent()
        if include_optional:
            return NotificationEvent(
                action = '',
                cc_contact_ids = [
                    ''
                    ],
                channels = [
                    'EMAIL'
                    ],
                contact_emails = [
                    ''
                    ],
                contact_ids = [
                    ''
                    ],
                created_by = suger_sdk_python.models.last_modified_by.LastModifiedBy(
                    email = '', 
                    entity_id = '', 
                    entity_type = suger_sdk_python.models.entity_type.entityType(), 
                    name = '', ),
                custom_fields = { },
                entity_id = '',
                entity_name = '',
                entity_status = '',
                entity_type = '',
                event_id = '',
                event_status = '',
                info = None,
                is_action_item = True,
                last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                message = '',
                organization_id = '',
                partner = '',
                priority = '',
                require_audit = True,
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                title = '',
                track_events = [
                    {"contactId":"contactId","action":"OPEN_EMAIL","timestamp":"2000-01-23T04:56:07.000+00:00"}
                    ]
            )
        else:
            return NotificationEvent(
        )
        """

    def testNotificationEvent(self):
        """Test NotificationEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
