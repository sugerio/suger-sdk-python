# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.orb_plan_phase import OrbPlanPhase  # noqa: E501


class TestOrbPlanPhase(unittest.TestCase):
    """OrbPlanPhase unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbPlanPhase:
        """Test OrbPlanPhase
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `OrbPlanPhase`
        """
        model = OrbPlanPhase()  # noqa: E501
        if include_optional:
            return OrbPlanPhase(
                description = '',
                discount = openapi_client.models.orb_price_discount.OrbPriceDiscount(
                    amount_discount = '', 
                    applies_to_price_ids = [
                        ''
                        ], 
                    discount_type = 'percentage', 
                    percentage_discount = 1.337, 
                    trial_amount_discount = '', 
                    usage_discount = '', ),
                duration = 56,
                duration_unit = 'monthly',
                maximum = openapi_client.models.orb_price_maximum.OrbPriceMaximum(
                    applies_to_price_ids = [
                        ''
                        ], 
                    maximum_amount = '', ),
                minimum = openapi_client.models.orb_price_minimum.OrbPriceMinimum(
                    applies_to_price_ids = [
                        ''
                        ], 
                    minimum_amount = '', ),
                name = '',
                order = 56
            )
        else:
            return OrbPlanPhase(
        )
        """

    def testOrbPlanPhase(self):
        """Test OrbPlanPhase"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
