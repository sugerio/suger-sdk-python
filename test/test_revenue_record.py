# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from suger_sdk_python.models.revenue_record import RevenueRecord

class TestRevenueRecord(unittest.TestCase):
    """RevenueRecord unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RevenueRecord:
        """Test RevenueRecord
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RevenueRecord`
        """
        model = RevenueRecord()
        if include_optional:
            return RevenueRecord(
                amount = 1.337,
                buyer_id = '',
                collectable_amount = 1.337,
                currency = '',
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                disburse_amount = 1.337,
                disburse_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                entitlement_id = '',
                id = '',
                info = {"awsRevenueRecords":[{"brokerID":"brokerID","usagePeriodStartDate":{"valid":true,"time":"time"},"productID":"productID","insertDate":{"valid":true,"time":"time"},"toAccountID":"toAccountID","usagePeriodEndDate":{"valid":true,"time":"time"},"parentBillingEventID":"parentBillingEventID","disbursementBillingEventID":"disbursementBillingEventID","action":"action","offerID":"offerID","currency":"currency","invoiceID":"invoiceID","id":"id","balanceImpacting":5,"amount":5.962133916683182,"endUserAccountID":"endUserAccountID","dataFeedProductID":"dataFeedProductID","entitlementID":"entitlementID","buyerID":"buyerID","invoiceDate":{"valid":true,"time":"time"},"transactionReferenceID":"transactionReferenceID","organizationID":"organizationID","transactionType":"transactionType","paymentDueDate":{"valid":true,"time":"time"},"fromAccountID":"fromAccountID","agreementID":"agreementID","billingAddressID":"billingAddressID","bankTraceID":"bankTraceID"},{"brokerID":"brokerID","usagePeriodStartDate":{"valid":true,"time":"time"},"productID":"productID","insertDate":{"valid":true,"time":"time"},"toAccountID":"toAccountID","usagePeriodEndDate":{"valid":true,"time":"time"},"parentBillingEventID":"parentBillingEventID","disbursementBillingEventID":"disbursementBillingEventID","action":"action","offerID":"offerID","currency":"currency","invoiceID":"invoiceID","id":"id","balanceImpacting":5,"amount":5.962133916683182,"endUserAccountID":"endUserAccountID","dataFeedProductID":"dataFeedProductID","entitlementID":"entitlementID","buyerID":"buyerID","invoiceDate":{"valid":true,"time":"time"},"transactionReferenceID":"transactionReferenceID","organizationID":"organizationID","transactionType":"transactionType","paymentDueDate":{"valid":true,"time":"time"},"fromAccountID":"fromAccountID","agreementID":"agreementID","billingAddressID":"billingAddressID","bankTraceID":"bankTraceID"}],"disbursementNotificationSent":true,"azureRevenueRecords":[{"purchaseRecordID":"purchaseRecordID","revenueUsd":7.061401241503109,"productID":"productID","termEndDate":"termEndDate","azureBillingAccountID":"azureBillingAccountID","azureCustomerID":"azureCustomerID","billingModel":"billingModel","entitlementID":"entitlementID","payoutStatus":"payoutStatus","buyerID":"buyerID","organizationID":"organizationID","termStartDate":"termStartDate","azureAssetID":"azureAssetID","offerID":"offerID","earningUsd":2.3021358869347655,"azureOfferID":"azureOfferID","azurePlanID":"azurePlanID","estimatedPayoutMonth":{"valid":true,"time":"time"},"paymentSentDate":{"valid":true,"time":"time"}},{"purchaseRecordID":"purchaseRecordID","revenueUsd":7.061401241503109,"productID":"productID","termEndDate":"termEndDate","azureBillingAccountID":"azureBillingAccountID","azureCustomerID":"azureCustomerID","billingModel":"billingModel","entitlementID":"entitlementID","payoutStatus":"payoutStatus","buyerID":"buyerID","organizationID":"organizationID","termStartDate":"termStartDate","azureAssetID":"azureAssetID","offerID":"offerID","earningUsd":2.3021358869347655,"azureOfferID":"azureOfferID","azurePlanID":"azurePlanID","estimatedPayoutMonth":{"valid":true,"time":"time"},"paymentSentDate":{"valid":true,"time":"time"}}],"resource":"resource","idSource":"idSource","creditAmount":9.301444243932576,"gcpRevenueRecords":[{"productID":"productID","usage":1.1730742509559433,"withheld":4.965218492984954,"paymentType":"paymentType","accountID":"accountID","refundBalanceOutstanding":1.4894159098541704,"reportDate":"reportDate","trialUse":7.457744773683766,"paymentSchedule":"paymentSchedule","offerID":"offerID","currency":"currency","prepayCredits":1.2315135367772556,"abandoned":3.616076749251911,"sku":"sku","released":6.84685269835264,"usedBy":"usedBy","insightAccountID":"insightAccountID","dueVendor":4.145608029883936,"resource":"resource","googleEntity":"googleEntity","refundReason":"refundReason","entitlementID":"entitlementID","buyerID":"buyerID","organizationID":"organizationID","charges":2.027123023002322,"unit":"unit","refundBalanceDeductedThisMonth":1.0246457001441578,"ordinal":7},{"productID":"productID","usage":1.1730742509559433,"withheld":4.965218492984954,"paymentType":"paymentType","accountID":"accountID","refundBalanceOutstanding":1.4894159098541704,"reportDate":"reportDate","trialUse":7.457744773683766,"paymentSchedule":"paymentSchedule","offerID":"offerID","currency":"currency","prepayCredits":1.2315135367772556,"abandoned":3.616076749251911,"sku":"sku","released":6.84685269835264,"usedBy":"usedBy","insightAccountID":"insightAccountID","dueVendor":4.145608029883936,"resource":"resource","googleEntity":"googleEntity","refundReason":"refundReason","entitlementID":"entitlementID","buyerID":"buyerID","organizationID":"organizationID","charges":2.027123023002322,"unit":"unit","refundBalanceDeductedThisMonth":1.0246457001441578,"ordinal":7}]},
                invoice_amount = 1.337,
                invoice_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                organization_id = '',
                partner = '',
                payment_due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                product_id = '',
                refund_disburse_amount = 1.337,
                refund_disburse_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                refund_invoice_amount = 1.337,
                refund_invoice_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                tax_amount = 1.337
            )
        else:
            return RevenueRecord(
        )
        """

    def testRevenueRecord(self):
        """Test RevenueRecord"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
