# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest


from openapi_client.models.gcp_marketplace_product import (
    GcpMarketplaceProduct,
)  # noqa: E501


class TestGcpMarketplaceProduct(unittest.TestCase):
    """GcpMarketplaceProduct unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GcpMarketplaceProduct:
        """Test GcpMarketplaceProduct
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `GcpMarketplaceProduct`
        """
        model = GcpMarketplaceProduct()  # noqa: E501
        if include_optional:
            return GcpMarketplaceProduct(
                create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                derived_discovery_state = openapi_client.models.gcp_marketplace_product_derived_discovery_state.GcpMarketplaceProductDerivedDiscoveryState(
                    access_state = 'ALLUSERS_ACCESSIBLE', 
                    search_state = 'ADMIN_OVERRIDE_UNSEARCHABLE', ),
                id = '',
                last_publish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                listing_spec = openapi_client.models.gcp_marketplace_product_listing_spec.GcpMarketplaceProductListingSpec(
                    external_account_spec = openapi_client.models.gcp_marketplace_product_external_account_spec.GcpMarketplaceProductExternalAccountSpec(
                        login_uri = '', 
                        signup_uri = '', 
                        single_sign_on_uri = '', ), 
                    listing_type = 'BillingIntegratedManagedService', 
                    marketing_spec = openapi_client.models.gcp_marketplace_product_marketing_spec.GcpMarketplaceProductMarketingSpec(
                        description = '', 
                        display_names = [
                            ''
                            ], 
                        documentation_specs = [
                            openapi_client.models.gcp_marketplace_product_documentation_spec.GcpMarketplaceProductDocumentationSpec(
                                description = '', 
                                title = '', 
                                uri = '', )
                            ], 
                        eula_url = '', 
                        external_license_specs = [
                            openapi_client.models.gcp_marketplace_product_license_spec.GcpMarketplaceProductLicenseSpec(
                                description = '', 
                                uri = '', )
                            ], 
                        external_marketing_url = '', 
                        icon = '', 
                        search_categories = [
                            ''
                            ], 
                        search_description = '', 
                        search_keywords = [
                            ''
                            ], 
                        signup_uri = '', 
                        support_spec = openapi_client.models.gcp_marketplace_product_support_spec.GcpMarketplaceProductSupportSpec(
                            description = '', 
                            email = '', 
                            uri = '', ), 
                        tag_line = '', 
                        title = '', ), 
                    purchase_spec = openapi_client.models.gcp_marketplace_product_purchase_spec.GcpMarketplaceProductPurchaseSpec(
                        features = [
                            openapi_client.models.gcp_marketplace_product_feature.GcpMarketplaceProductFeature(
                                description = '', 
                                name = '', 
                                title = '', )
                            ], 
                        metrics = [
                            openapi_client.models.gcp_marketplace_product_metering_metric.GcpMarketplaceProductMeteringMetric(
                                description = '', 
                                display_name = '', 
                                display_unit = '', 
                                display_unit_description = '', 
                                id = '', 
                                metric_kind = '', 
                                name = '', 
                                price_tiers = [
                                    openapi_client.models.gcp_price_tier.GcpPriceTier(
                                        from_amount = 1.337, 
                                        price = openapi_client.models.gcp_price_value.GcpPriceValue(
                                            currency_code = '', 
                                            nanos = 56, 
                                            units = '', ), 
                                        starting_usage_amount = '', )
                                    ], 
                                reporting_unit = '', 
                                sku_id = '', 
                                unit = '', 
                                value_type = openapi_client.models.value_type.valueType(), )
                            ], 
                        purchase_option_specs = [
                            openapi_client.models.gcp_marketplace_product_purchase_option_spec.GcpMarketplaceProductPurchaseOptionSpec(
                                feature_values = [
                                    openapi_client.models.gcp_marketplace_product_feature_value.GcpMarketplaceProductFeatureValue(
                                        feature_description = '', 
                                        feature_name = '', 
                                        feature_title = '', 
                                        feature_value = '', )
                                    ], 
                                name = '', 
                                price_info = openapi_client.models.gcp_marketplace_product_price_info.GcpMarketplaceProductPriceInfo(
                                    description = '', 
                                    price_model = 'FREE', 
                                    subscription_plans = [
                                        openapi_client.models.gcp_marketplace_product_subscription_plan.GcpMarketplaceProductSubscriptionPlan(
                                            period = '', )
                                        ], 
                                    usage_fees = [
                                        openapi_client.models.gcp_marketplace_product_usage_fee.GcpMarketplaceProductUsageFee(
                                            display_quantity = 56, 
                                            metric_id = '', )
                                        ], ), 
                                purchase_mode = 'PURCHASE_MODE_PRIVATE', 
                                title = '', )
                            ], ), 
                    terms_spec = openapi_client.models.gcp_marketplace_product_terms_spec.GcpMarketplaceProductTermsSpec(
                        eula_uri = '', 
                        inline_eula = openapi_client.models.inline_eula.inlineEula(), 
                        standard_eula = openapi_client.models.standard_eula.standardEula(), ), ),
                marketplace = 'marketplaces/google-cloud',
                name = '',
                revision_create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                revision_id = '',
                service = '',
                service_config = openapi_client.models.gcp_marketplace_product_service_config.GcpMarketplaceProductServiceConfig(
                    billing = openapi_client.models.gcp_marketplace_product_service_config_billing.GcpMarketplaceProductServiceConfigBilling(
                        metrics = [
                            ''
                            ], ), 
                    metrics = [
                        openapi_client.models.gcp_marketplace_product_metering_metric.GcpMarketplaceProductMeteringMetric(
                            description = '', 
                            display_name = '', 
                            display_unit = '', 
                            display_unit_description = '', 
                            id = '', 
                            metric_kind = '', 
                            name = '', 
                            price_tiers = [
                                openapi_client.models.gcp_price_tier.GcpPriceTier(
                                    from_amount = 1.337, 
                                    price = openapi_client.models.gcp_price_value.GcpPriceValue(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), 
                                    starting_usage_amount = '', )
                                ], 
                            reporting_unit = '', 
                            sku_id = '', 
                            unit = '', 
                            value_type = openapi_client.models.value_type.valueType(), )
                        ], 
                    name = '', 
                    producer_project_id = '', 
                    title = '', ),
                validation_summary = None
            )
        else:
            return GcpMarketplaceProduct(
        )
        """

    def testGcpMarketplaceProduct(self):
        """Test GcpMarketplaceProduct"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
