# coding: utf-8

"""
    Suger API

    CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

    The version of the OpenAPI document: 1.0
    Contact: support@suger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest


from openapi_client.models.metering_usage_record_report_info import (
    MeteringUsageRecordReportInfo,
)  # noqa: E501


class TestMeteringUsageRecordReportInfo(unittest.TestCase):
    """MeteringUsageRecordReportInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MeteringUsageRecordReportInfo:
        """Test MeteringUsageRecordReportInfo
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `MeteringUsageRecordReportInfo`
        """
        model = MeteringUsageRecordReportInfo()  # noqa: E501
        if include_optional:
            return MeteringUsageRecordReportInfo(
                alibaba_metering_request = openapi_client.models.client/push_metering_data_request.client.PushMeteringDataRequest(
                    metering = '', ),
                alibaba_metering_response = openapi_client.models.client/push_metering_data_response_body.client.PushMeteringDataResponseBody(
                    request_id = '', 
                    success = True, ),
                aws_metering_response = openapi_client.models.marketplacemetering/batch_meter_usage_output.marketplacemetering.BatchMeterUsageOutput(
                    result_metadata = openapi_client.models.result_metadata.resultMetadata(), 
                    results = [
                        openapi_client.models.types/usage_record_result.types.UsageRecordResult(
                            metering_record_id = '', 
                            status = openapi_client.models.status.status(), 
                            usage_record = openapi_client.models.usage_record.usageRecord(), )
                        ], 
                    unprocessed_records = [
                        openapi_client.models.types/usage_record.types.UsageRecord(
                            customer_identifier = '', 
                            dimension = '', 
                            quantity = 56, 
                            timestamp = '', 
                            usage_allocations = [
                                openapi_client.models.types/usage_allocation.types.UsageAllocation(
                                    allocated_usage_quantity = 56, 
                                    tags = [
                                        openapi_client.models.github_com_aws_aws_sdk_go_v2_service_marketplacemetering_types/tag.github_com_aws_aws-sdk-go-v2_service_marketplacemetering_types.Tag(
                                            key = '', 
                                            value = '', )
                                        ], )
                                ], )
                        ], ),
                azure_metering_response = openapi_client.models.github_com_sugerio_marketplace_service_azure_sdk_marketplacemeteringv1/batch_usage_event_ok_response.github_com_sugerio_marketplace-service_azure_sdk_marketplacemeteringv1.BatchUsageEventOkResponse(
                    count = 56, 
                    result = [
                        openapi_client.models.github_com_sugerio_marketplace_service_azure_sdk_marketplacemeteringv1/usage_batch_event_ok_message.github_com_sugerio_marketplace-service_azure_sdk_marketplacemeteringv1.UsageBatchEventOkMessage(
                            dimension = '', 
                            effective_start_time = '', 
                            error = openapi_client.models.github_com_sugerio_marketplace_service_azure_sdk_marketplacemeteringv1/usage_event_conflict_response.github_com_sugerio_marketplace-service_azure_sdk_marketplacemeteringv1.UsageEventConflictResponse(
                                additional_info = openapi_client.models.github_com_sugerio_marketplace_service_azure_sdk_marketplacemeteringv1/usage_event_conflict_response_additional_info.github_com_sugerio_marketplace-service_azure_sdk_marketplacemeteringv1.UsageEventConflictResponseAdditionalInfo(
                                    accepted_message = openapi_client.models.github_com_sugerio_marketplace_service_azure_sdk_marketplacemeteringv1/usage_event_ok_response.github_com_sugerio_marketplace-service_azure_sdk_marketplacemeteringv1.UsageEventOkResponse(
                                        dimension = '', 
                                        effective_start_time = '', 
                                        message_time = '', 
                                        plan_id = '', 
                                        quantity = 1.337, 
                                        resource_id = '', 
                                        resource_uri = '', 
                                        status = openapi_client.models.status.status(), 
                                        usage_event_id = '', ), ), 
                                code = '', 
                                message = '', ), 
                            message_time = '', 
                            plan_id = '', 
                            quantity = 1.337, 
                            resource_id = '', 
                            resource_uri = '', 
                            status = openapi_client.models.status.status(), 
                            usage_event_id = '', )
                        ], ),
                commit_amount = 1.337,
                credit_amount = 1.337,
                credit_records = {
                    'key' : 1.337
                    },
                decimal_parts = {
                    'key' : 1.337
                    },
                dimension_categories = {
                    'key' : ''
                    },
                dimension_unit_list_price = {
                    'key' : 1.337
                    },
                dimension_unit_price = {
                    'key' : 1.337
                    },
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                gcp_metering_response = openapi_client.models.servicecontrol/report_response.servicecontrol.ReportResponse(
                    report_errors = [
                        openapi_client.models.servicecontrol/report_error.servicecontrol.ReportError(
                            operation_id = '', 
                            status = openapi_client.models.status.status(), )
                        ], 
                    service_config_id = '', 
                    service_rollout_id = '', ),
                included_records = {
                    'key' : 1.337
                    },
                new_decimal_parts = {
                    'key' : 1.337
                    },
                partner = '',
                records_to_report_before_adjustment_at_list_price = {
                    'key' : 1.337
                    },
                reported_records = {
                    'key' : 1.337
                    },
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                usage_record_group_ids = [
                    ''
                    ],
                used_commit_amount = 1.337,
                used_commit_amount_increment = 1.337,
                used_credit_amount = 1.337,
                used_credit_amount_increment = 1.337
            )
        else:
            return MeteringUsageRecordReportInfo(
        )
        """

    def testMeteringUsageRecordReportInfo(self):
        """Test MeteringUsageRecordReportInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
